
Clock_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001242  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00001242  000012d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000065  00800084  00800084  000012fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000132c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002940  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000107d  00000000  00000000  00003fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001733  00000000  00000000  00005025  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000064c  00000000  00000000  00006758  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ea4  00000000  00000000  00006da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000141f  00000000  00000000  00007c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  00009067  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3e       	cpi	r26, 0xE9	; 233
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a2 02 	call	0x544	; 0x544 <main>
      8a:	0c 94 1f 09 	jmp	0x123e	; 0x123e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_16>:
	
//ISR(ADC_vect){
	//b = ADCW;
//}

ISR(ADC_vect){
      92:	1f 92       	push	r1
      94:	0f 92       	push	r0
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	0f 92       	push	r0
      9a:	11 24       	eor	r1, r1
      9c:	8f 93       	push	r24
      9e:	9f 93       	push	r25
      a0:	af 93       	push	r26
      a2:	bf 93       	push	r27
      a4:	ef 93       	push	r30
      a6:	ff 93       	push	r31
		
	adcValue.adcChannel[adcHandleConfig->adcActiveChannel] = ADCW;				// Saves adc value for current channel
      a8:	a0 91 88 00 	lds	r26, 0x0088	; 0x800088 <adcHandleConfig>
      ac:	b0 91 89 00 	lds	r27, 0x0089	; 0x800089 <adcHandleConfig+0x1>
      b0:	ec 91       	ld	r30, X
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	84 b1       	in	r24, 0x04	; 4
      b6:	95 b1       	in	r25, 0x05	; 5
      b8:	ee 0f       	add	r30, r30
      ba:	ff 1f       	adc	r31, r31
      bc:	ec 57       	subi	r30, 0x7C	; 124
      be:	ff 4f       	sbci	r31, 0xFF	; 255
      c0:	91 83       	std	Z+1, r25	; 0x01
      c2:	80 83       	st	Z, r24
	
	adcHandleConfig->adcActiveChannel++;
      c4:	8c 91       	ld	r24, X
      c6:	8f 5f       	subi	r24, 0xFF	; 255
      c8:	8c 93       	st	X, r24
	if (adcHandleConfig->adcActiveChannel == adcHandleConfig->adcChannelsCount)
      ca:	11 96       	adiw	r26, 0x01	; 1
      cc:	9c 91       	ld	r25, X
      ce:	11 97       	sbiw	r26, 0x01	; 1
      d0:	89 13       	cpse	r24, r25
      d2:	01 c0       	rjmp	.+2      	; 0xd6 <__vector_16+0x44>
		adcHandleConfig->adcActiveChannel = 0;
      d4:	1c 92       	st	X, r1
	
	ADMUX &= 0xF0;																 // Clear the older channel that was read
      d6:	87 b1       	in	r24, 0x07	; 7
      d8:	80 7f       	andi	r24, 0xF0	; 240
      da:	87 b9       	out	0x07, r24	; 7
	ADMUX |= adcHandleConfig->adcPinValue[adcHandleConfig->adcActiveChannel];    // Defines the new ADC channel to be read
      dc:	97 b1       	in	r25, 0x07	; 7
      de:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <adcHandleConfig>
      e2:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <adcHandleConfig+0x1>
      e6:	80 81       	ld	r24, Z
      e8:	e8 0f       	add	r30, r24
      ea:	f1 1d       	adc	r31, r1
      ec:	82 81       	ldd	r24, Z+2	; 0x02
      ee:	89 2b       	or	r24, r25
      f0:	87 b9       	out	0x07, r24	; 7
}
      f2:	ff 91       	pop	r31
      f4:	ef 91       	pop	r30
      f6:	bf 91       	pop	r27
      f8:	af 91       	pop	r26
      fa:	9f 91       	pop	r25
      fc:	8f 91       	pop	r24
      fe:	0f 90       	pop	r0
     100:	0f be       	out	0x3f, r0	; 63
     102:	0f 90       	pop	r0
     104:	1f 90       	pop	r1
     106:	18 95       	reti

00000108 <AdcInit>:

void AdcInit(void){
	adcHandleConfig = AdcCfgInitAndGet();
     108:	0e 94 9a 00 	call	0x134	; 0x134 <AdcCfgInitAndGet>
     10c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <adcHandleConfig+0x1>
     110:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <adcHandleConfig>
     114:	08 95       	ret

00000116 <GetAdcValue>:
}

const AdcValue* GetAdcValue(){
	return &adcValue;
}
     116:	84 e8       	ldi	r24, 0x84	; 132
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	08 95       	ret

0000011c <AdcEnable>:
void AdcEnable(void){
	ADCSRA |= (1<<ADEN);		// Turn on ADC
}

void AdcDisable(void){
	ADCSRA &= ~(1<<ADEN);		// Turn off ADC
     11c:	86 b1       	in	r24, 0x06	; 6
     11e:	80 68       	ori	r24, 0x80	; 128
     120:	86 b9       	out	0x06, r24	; 6
     122:	08 95       	ret

00000124 <AdcStartConversion>:
}

void AdcStartConversion(void){
	ADCSRA |= (1<<ADSC);	   // Start to convert
     124:	86 b1       	in	r24, 0x06	; 6
     126:	80 64       	ori	r24, 0x40	; 64
     128:	86 b9       	out	0x06, r24	; 6
     12a:	08 95       	ret

0000012c <AdcEnableInterrupt>:
}

void AdcEnableInterrupt(void){
	ADCSRA |= (1<<ADIE);	   // Conversion Complete	interrupt is activated.
     12c:	86 b1       	in	r24, 0x06	; 6
     12e:	88 60       	ori	r24, 0x08	; 8
     130:	86 b9       	out	0x06, r24	; 6
     132:	08 95       	ret

00000134 <AdcCfgInitAndGet>:

static AdcHandleConfig adcHandleConfig;

AdcHandleConfig* AdcCfgInitAndGet(void){
	
	adcHandleConfig.adcActiveChannel = 0;
     134:	ea e8       	ldi	r30, 0x8A	; 138
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	10 82       	st	Z, r1
	adcHandleConfig.adcChannelsCount = ADC_CHANNELS_USED;
     13a:	82 e0       	ldi	r24, 0x02	; 2
     13c:	81 83       	std	Z+1, r24	; 0x01
	adcHandleConfig.adcPinValue[0] = ADC_CHANNEL_1_PIN;
     13e:	86 e0       	ldi	r24, 0x06	; 6
     140:	82 83       	std	Z+2, r24	; 0x02
	adcHandleConfig.adcPinValue[1] = ADC_CHANNEL_2_PIN;
     142:	87 e0       	ldi	r24, 0x07	; 7
     144:	83 83       	std	Z+3, r24	; 0x03
	
	for (uint8_t i = 0; i < adcHandleConfig.adcChannelsCount; i++)
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	11 c0       	rjmp	.+34     	; 0x16c <AdcCfgInitAndGet+0x38>
		DDRA &= ~(1<<adcHandleConfig.adcPinValue[i]);	
     14a:	3a b3       	in	r19, 0x1a	; 26
     14c:	e2 2f       	mov	r30, r18
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	e6 57       	subi	r30, 0x76	; 118
     152:	ff 4f       	sbci	r31, 0xFF	; 255
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	02 80       	ldd	r0, Z+2	; 0x02
     15a:	02 c0       	rjmp	.+4      	; 0x160 <AdcCfgInitAndGet+0x2c>
     15c:	88 0f       	add	r24, r24
     15e:	99 1f       	adc	r25, r25
     160:	0a 94       	dec	r0
     162:	e2 f7       	brpl	.-8      	; 0x15c <AdcCfgInitAndGet+0x28>
     164:	80 95       	com	r24
     166:	83 23       	and	r24, r19
     168:	8a bb       	out	0x1a, r24	; 26
	adcHandleConfig.adcActiveChannel = 0;
	adcHandleConfig.adcChannelsCount = ADC_CHANNELS_USED;
	adcHandleConfig.adcPinValue[0] = ADC_CHANNEL_1_PIN;
	adcHandleConfig.adcPinValue[1] = ADC_CHANNEL_2_PIN;
	
	for (uint8_t i = 0; i < adcHandleConfig.adcChannelsCount; i++)
     16a:	2f 5f       	subi	r18, 0xFF	; 255
     16c:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <adcHandleConfig+0x1>
     170:	28 17       	cp	r18, r24
     172:	58 f3       	brcs	.-42     	; 0x14a <AdcCfgInitAndGet+0x16>
		DDRA &= ~(1<<adcHandleConfig.adcPinValue[i]);	
	
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));								 // 16Mhz/128 = 125Khz the ADC reference clock
     174:	86 b1       	in	r24, 0x06	; 6
     176:	87 60       	ori	r24, 0x07	; 7
     178:	86 b9       	out	0x06, r24	; 6
	ADMUX  |= (1<<REFS0);														 // Voltage reference from Avcc (5v)
     17a:	87 b1       	in	r24, 0x07	; 7
     17c:	80 64       	ori	r24, 0x40	; 64
     17e:	87 b9       	out	0x07, r24	; 7
	ADMUX  |= adcHandleConfig.adcPinValue[adcHandleConfig.adcActiveChannel];	 // Defines what adc channel to read
     180:	97 b1       	in	r25, 0x07	; 7
     182:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <adcHandleConfig>
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	e6 57       	subi	r30, 0x76	; 118
     18a:	ff 4f       	sbci	r31, 0xFF	; 255
     18c:	82 81       	ldd	r24, Z+2	; 0x02
     18e:	89 2b       	or	r24, r25
     190:	87 b9       	out	0x07, r24	; 7
	AdcEnable();
     192:	0e 94 8e 00 	call	0x11c	; 0x11c <AdcEnable>
	AdcEnableInterrupt();														 
     196:	0e 94 96 00 	call	0x12c	; 0x12c <AdcEnableInterrupt>
	AdcStartConversion();														// Do an initial conversion because this one is the slowest and to ensure that everything is up and running
     19a:	0e 94 92 00 	call	0x124	; 0x124 <AdcStartConversion>
	return &adcHandleConfig;
}
     19e:	8a e8       	ldi	r24, 0x8A	; 138
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	08 95       	ret

000001a4 <ButtonInit>:
static uint8_t counter[BUTTON_COUNT] = {};

ButtonFunctionPtr* buttonFunctionPtr;

void ButtonInit(ButtonFunctionPtr* _buttonFuctionPtr){
	buttonFunctionPtr = _buttonFuctionPtr;
     1a4:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <buttonFunctionPtr+0x1>
     1a8:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <buttonFunctionPtr>

	buttonHandleConfig.pinValue[0] = PIN_BUTTON_POWER;
     1ac:	e3 ea       	ldi	r30, 0xA3	; 163
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	11 82       	std	Z+1, r1	; 0x01
	buttonHandleConfig.pinValue[1] = PIN_BUTTON_NEXT;
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	82 83       	std	Z+2, r24	; 0x02
	buttonHandleConfig.pinValue[2] = PIN_BUTTON_TOGGLE;
     1b6:	82 e0       	ldi	r24, 0x02	; 2
     1b8:	83 83       	std	Z+3, r24	; 0x03
	buttonHandleConfig.pinValue[3] = PIN_BUTTON_INCREASE;
     1ba:	83 e0       	ldi	r24, 0x03	; 3
     1bc:	84 83       	std	Z+4, r24	; 0x04
	buttonHandleConfig.pinValue[4] = PIN_BUTTON_DECREASE;
     1be:	84 e0       	ldi	r24, 0x04	; 4
     1c0:	85 83       	std	Z+5, r24	; 0x05
	buttonHandleConfig.pinValue[5] = PIN_BUTTON_OK;
     1c2:	85 e0       	ldi	r24, 0x05	; 5
     1c4:	86 83       	std	Z+6, r24	; 0x06
	buttonHandleConfig.pinValue[6] = PIN_BUTTON_ABORT;
     1c6:	86 e0       	ldi	r24, 0x06	; 6
     1c8:	87 83       	std	Z+7, r24	; 0x07
	buttonHandleConfig.count = BUTTON_COUNT;
     1ca:	87 e0       	ldi	r24, 0x07	; 7
     1cc:	80 83       	st	Z, r24

	// makes button pins input
	for (uint8_t i = 0; i < buttonHandleConfig.count; i++)
     1ce:	20 e0       	ldi	r18, 0x00	; 0
     1d0:	11 c0       	rjmp	.+34     	; 0x1f4 <ButtonInit+0x50>
		PORT_DIRECTION_BUTTON &= ~(1 << buttonHandleConfig.pinValue[i]);
     1d2:	31 b3       	in	r19, 0x11	; 17
     1d4:	e2 2f       	mov	r30, r18
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	ed 55       	subi	r30, 0x5D	; 93
     1da:	ff 4f       	sbci	r31, 0xFF	; 255
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	01 80       	ldd	r0, Z+1	; 0x01
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <ButtonInit+0x44>
     1e4:	88 0f       	add	r24, r24
     1e6:	99 1f       	adc	r25, r25
     1e8:	0a 94       	dec	r0
     1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <ButtonInit+0x40>
     1ec:	80 95       	com	r24
     1ee:	83 23       	and	r24, r19
     1f0:	81 bb       	out	0x11, r24	; 17
	buttonHandleConfig.pinValue[5] = PIN_BUTTON_OK;
	buttonHandleConfig.pinValue[6] = PIN_BUTTON_ABORT;
	buttonHandleConfig.count = BUTTON_COUNT;

	// makes button pins input
	for (uint8_t i = 0; i < buttonHandleConfig.count; i++)
     1f2:	2f 5f       	subi	r18, 0xFF	; 255
     1f4:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <buttonHandleConfig>
     1f8:	28 17       	cp	r18, r24
     1fa:	58 f3       	brcs	.-42     	; 0x1d2 <ButtonInit+0x2e>
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	10 c0       	rjmp	.+32     	; 0x220 <ButtonInit+0x7c>
		PORT_DIRECTION_BUTTON &= ~(1 << buttonHandleConfig.pinValue[i]);

	// enables pull up resistor for all buttons
	for(uint8_t i = 0; i < buttonHandleConfig.count; i++)
		PORT_BUTTON |= (1 << buttonHandleConfig.pinValue[i]);
     200:	32 b3       	in	r19, 0x12	; 18
     202:	e2 2f       	mov	r30, r18
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	ed 55       	subi	r30, 0x5D	; 93
     208:	ff 4f       	sbci	r31, 0xFF	; 255
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	01 80       	ldd	r0, Z+1	; 0x01
     210:	02 c0       	rjmp	.+4      	; 0x216 <ButtonInit+0x72>
     212:	88 0f       	add	r24, r24
     214:	99 1f       	adc	r25, r25
     216:	0a 94       	dec	r0
     218:	e2 f7       	brpl	.-8      	; 0x212 <ButtonInit+0x6e>
     21a:	83 2b       	or	r24, r19
     21c:	82 bb       	out	0x12, r24	; 18
	// makes button pins input
	for (uint8_t i = 0; i < buttonHandleConfig.count; i++)
		PORT_DIRECTION_BUTTON &= ~(1 << buttonHandleConfig.pinValue[i]);

	// enables pull up resistor for all buttons
	for(uint8_t i = 0; i < buttonHandleConfig.count; i++)
     21e:	2f 5f       	subi	r18, 0xFF	; 255
     220:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <buttonHandleConfig>
     224:	28 17       	cp	r18, r24
     226:	60 f3       	brcs	.-40     	; 0x200 <ButtonInit+0x5c>
		PORT_BUTTON |= (1 << buttonHandleConfig.pinValue[i]);
}
     228:	08 95       	ret

0000022a <ButtonRoutine>:

void ButtonRoutine(void)
{
     22a:	1f 93       	push	r17
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
	for (uint8_t i = 0; i < buttonHandleConfig.count; i++) {
     230:	10 e0       	ldi	r17, 0x00	; 0
     232:	60 c0       	rjmp	.+192    	; 0x2f4 <ButtonRoutine+0xca>

		if (PIN_BUTTON & (1 << buttonHandleConfig.pinValue[i])) {
     234:	80 b3       	in	r24, 0x10	; 16
     236:	c1 2f       	mov	r28, r17
     238:	d0 e0       	ldi	r29, 0x00	; 0
     23a:	fe 01       	movw	r30, r28
     23c:	ed 55       	subi	r30, 0x5D	; 93
     23e:	ff 4f       	sbci	r31, 0xFF	; 255
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	01 80       	ldd	r0, Z+1	; 0x01
     244:	02 c0       	rjmp	.+4      	; 0x24a <ButtonRoutine+0x20>
     246:	95 95       	asr	r25
     248:	87 95       	ror	r24
     24a:	0a 94       	dec	r0
     24c:	e2 f7       	brpl	.-8      	; 0x246 <ButtonRoutine+0x1c>
     24e:	80 ff       	sbrs	r24, 0
     250:	12 c0       	rjmp	.+36     	; 0x276 <ButtonRoutine+0x4c>
			if (counter[i] != 0) 
     252:	fe 01       	movw	r30, r28
     254:	e2 57       	subi	r30, 0x72	; 114
     256:	ff 4f       	sbci	r31, 0xFF	; 255
     258:	80 81       	ld	r24, Z
     25a:	88 23       	and	r24, r24
     25c:	31 f0       	breq	.+12     	; 0x26a <ButtonRoutine+0x40>
				counter[i]--;
     25e:	fe 01       	movw	r30, r28
     260:	e2 57       	subi	r30, 0x72	; 114
     262:	ff 4f       	sbci	r31, 0xFF	; 255
     264:	81 50       	subi	r24, 0x01	; 1
     266:	80 83       	st	Z, r24
     268:	16 c0       	rjmp	.+44     	; 0x296 <ButtonRoutine+0x6c>
			 else
				buttonState[i] = ButtonStateRealesed;
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	fe 01       	movw	r30, r28
     26e:	eb 56       	subi	r30, 0x6B	; 107
     270:	ff 4f       	sbci	r31, 0xFF	; 255
     272:	80 83       	st	Z, r24
     274:	10 c0       	rjmp	.+32     	; 0x296 <ButtonRoutine+0x6c>
			} 
			else {
			if (counter[i] <= MAX_COUNTER_VALUE) 
     276:	fe 01       	movw	r30, r28
     278:	e2 57       	subi	r30, 0x72	; 114
     27a:	ff 4f       	sbci	r31, 0xFF	; 255
     27c:	80 81       	ld	r24, Z
     27e:	85 36       	cpi	r24, 0x65	; 101
     280:	30 f4       	brcc	.+12     	; 0x28e <ButtonRoutine+0x64>
				counter[i]++;
     282:	fe 01       	movw	r30, r28
     284:	e2 57       	subi	r30, 0x72	; 114
     286:	ff 4f       	sbci	r31, 0xFF	; 255
     288:	8f 5f       	subi	r24, 0xFF	; 255
     28a:	80 83       	st	Z, r24
     28c:	04 c0       	rjmp	.+8      	; 0x296 <ButtonRoutine+0x6c>
			else
				buttonState[i] = ButtonStatePressed;
     28e:	fe 01       	movw	r30, r28
     290:	eb 56       	subi	r30, 0x6B	; 107
     292:	ff 4f       	sbci	r31, 0xFF	; 255
     294:	10 82       	st	Z, r1
		}

		if (buttonState[i] == ButtonStateRealesed) 
     296:	fe 01       	movw	r30, r28
     298:	eb 56       	subi	r30, 0x6B	; 107
     29a:	ff 4f       	sbci	r31, 0xFF	; 255
     29c:	80 81       	ld	r24, Z
     29e:	81 30       	cpi	r24, 0x01	; 1
     2a0:	29 f4       	brne	.+10     	; 0x2ac <ButtonRoutine+0x82>
			togglState[i] = TogglStateNo;
     2a2:	fe 01       	movw	r30, r28
     2a4:	e4 56       	subi	r30, 0x64	; 100
     2a6:	ff 4f       	sbci	r31, 0xFF	; 255
     2a8:	10 82       	st	Z, r1
     2aa:	0b c0       	rjmp	.+22     	; 0x2c2 <ButtonRoutine+0x98>
		else if (togglState[i] == TogglStateNo) 
     2ac:	fe 01       	movw	r30, r28
     2ae:	e4 56       	subi	r30, 0x64	; 100
     2b0:	ff 4f       	sbci	r31, 0xFF	; 255
     2b2:	80 81       	ld	r24, Z
     2b4:	81 11       	cpse	r24, r1
     2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <ButtonRoutine+0x98>
			togglState[i] = TogglStateWaiting;
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	fe 01       	movw	r30, r28
     2bc:	e4 56       	subi	r30, 0x64	; 100
     2be:	ff 4f       	sbci	r31, 0xFF	; 255
     2c0:	80 83       	st	Z, r24

		if (togglState[i] == TogglStateWaiting) {
     2c2:	fe 01       	movw	r30, r28
     2c4:	e4 56       	subi	r30, 0x64	; 100
     2c6:	ff 4f       	sbci	r31, 0xFF	; 255
     2c8:	80 81       	ld	r24, Z
     2ca:	81 30       	cpi	r24, 0x01	; 1
     2cc:	91 f4       	brne	.+36     	; 0x2f2 <ButtonRoutine+0xc8>
			(*buttonFunctionPtr)[i](i);
     2ce:	e0 91 cf 00 	lds	r30, 0x00CF	; 0x8000cf <buttonFunctionPtr>
     2d2:	f0 91 d0 00 	lds	r31, 0x00D0	; 0x8000d0 <buttonFunctionPtr+0x1>
     2d6:	ce 01       	movw	r24, r28
     2d8:	88 0f       	add	r24, r24
     2da:	99 1f       	adc	r25, r25
     2dc:	e8 0f       	add	r30, r24
     2de:	f9 1f       	adc	r31, r25
     2e0:	01 90       	ld	r0, Z+
     2e2:	f0 81       	ld	r31, Z
     2e4:	e0 2d       	mov	r30, r0
     2e6:	81 2f       	mov	r24, r17
     2e8:	09 95       	icall
			togglState[i] = TogglStateDone;
     2ea:	c4 56       	subi	r28, 0x64	; 100
     2ec:	df 4f       	sbci	r29, 0xFF	; 255
     2ee:	82 e0       	ldi	r24, 0x02	; 2
     2f0:	88 83       	st	Y, r24
		PORT_BUTTON |= (1 << buttonHandleConfig.pinValue[i]);
}

void ButtonRoutine(void)
{
	for (uint8_t i = 0; i < buttonHandleConfig.count; i++) {
     2f2:	1f 5f       	subi	r17, 0xFF	; 255
     2f4:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <buttonHandleConfig>
     2f8:	18 17       	cp	r17, r24
     2fa:	08 f4       	brcc	.+2      	; 0x2fe <ButtonRoutine+0xd4>
     2fc:	9b cf       	rjmp	.-202    	; 0x234 <ButtonRoutine+0xa>
		if (togglState[i] == TogglStateWaiting) {
			(*buttonFunctionPtr)[i](i);
			togglState[i] = TogglStateDone;
		}
	}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	1f 91       	pop	r17
     304:	08 95       	ret

00000306 <LedAllOn>:

void LedAllToggle(void)
{
	for (uint8_t i = 0; i < ledHandleConfig.count; i++)
		PORT_LED ^= (1 << ledHandleConfig.pinValue[i]);
}
     306:	20 e0       	ldi	r18, 0x00	; 0
     308:	11 c0       	rjmp	.+34     	; 0x32c <LedAllOn+0x26>
     30a:	3b b3       	in	r19, 0x1b	; 27
     30c:	e2 2f       	mov	r30, r18
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	e5 55       	subi	r30, 0x55	; 85
     312:	ff 4f       	sbci	r31, 0xFF	; 255
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	01 80       	ldd	r0, Z+1	; 0x01
     31a:	02 c0       	rjmp	.+4      	; 0x320 <LedAllOn+0x1a>
     31c:	88 0f       	add	r24, r24
     31e:	99 1f       	adc	r25, r25
     320:	0a 94       	dec	r0
     322:	e2 f7       	brpl	.-8      	; 0x31c <LedAllOn+0x16>
     324:	80 95       	com	r24
     326:	83 23       	and	r24, r19
     328:	8b bb       	out	0x1b, r24	; 27
     32a:	2f 5f       	subi	r18, 0xFF	; 255
     32c:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <ledHandleConfig>
     330:	28 17       	cp	r18, r24
     332:	58 f3       	brcs	.-42     	; 0x30a <LedAllOn+0x4>
     334:	08 95       	ret

00000336 <LedAllOff>:
     336:	20 e0       	ldi	r18, 0x00	; 0
     338:	10 c0       	rjmp	.+32     	; 0x35a <LedAllOff+0x24>
     33a:	3b b3       	in	r19, 0x1b	; 27
     33c:	e2 2f       	mov	r30, r18
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	e5 55       	subi	r30, 0x55	; 85
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	01 80       	ldd	r0, Z+1	; 0x01
     34a:	02 c0       	rjmp	.+4      	; 0x350 <LedAllOff+0x1a>
     34c:	88 0f       	add	r24, r24
     34e:	99 1f       	adc	r25, r25
     350:	0a 94       	dec	r0
     352:	e2 f7       	brpl	.-8      	; 0x34c <LedAllOff+0x16>
     354:	83 2b       	or	r24, r19
     356:	8b bb       	out	0x1b, r24	; 27
     358:	2f 5f       	subi	r18, 0xFF	; 255
     35a:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <ledHandleConfig>
     35e:	28 17       	cp	r18, r24
     360:	60 f3       	brcs	.-40     	; 0x33a <LedAllOff+0x4>
     362:	08 95       	ret

00000364 <LedInit>:
     364:	eb ea       	ldi	r30, 0xAB	; 171
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	11 82       	std	Z+1, r1	; 0x01
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	82 83       	std	Z+2, r24	; 0x02
     36e:	82 e0       	ldi	r24, 0x02	; 2
     370:	83 83       	std	Z+3, r24	; 0x03
     372:	83 e0       	ldi	r24, 0x03	; 3
     374:	84 83       	std	Z+4, r24	; 0x04
     376:	84 e0       	ldi	r24, 0x04	; 4
     378:	85 83       	std	Z+5, r24	; 0x05
     37a:	85 e0       	ldi	r24, 0x05	; 5
     37c:	80 83       	st	Z, r24
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	10 c0       	rjmp	.+32     	; 0x3a2 <LedInit+0x3e>
     382:	3a b3       	in	r19, 0x1a	; 26
     384:	e2 2f       	mov	r30, r18
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	e5 55       	subi	r30, 0x55	; 85
     38a:	ff 4f       	sbci	r31, 0xFF	; 255
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	01 80       	ldd	r0, Z+1	; 0x01
     392:	02 c0       	rjmp	.+4      	; 0x398 <LedInit+0x34>
     394:	88 0f       	add	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	0a 94       	dec	r0
     39a:	e2 f7       	brpl	.-8      	; 0x394 <LedInit+0x30>
     39c:	83 2b       	or	r24, r19
     39e:	8a bb       	out	0x1a, r24	; 26
     3a0:	2f 5f       	subi	r18, 0xFF	; 255
     3a2:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <ledHandleConfig>
     3a6:	28 17       	cp	r18, r24
     3a8:	60 f3       	brcs	.-40     	; 0x382 <LedInit+0x1e>
     3aa:	0e 94 9b 01 	call	0x336	; 0x336 <LedAllOff>
     3ae:	08 95       	ret

000003b0 <LedOn>:


void LedOn(uint8_t index)
{
	PORT_LED &= ~(1 << ledHandleConfig.pinValue[index]);
     3b0:	2b b3       	in	r18, 0x1b	; 27
     3b2:	e8 2f       	mov	r30, r24
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	e5 55       	subi	r30, 0x55	; 85
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	01 80       	ldd	r0, Z+1	; 0x01
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <LedOn+0x16>
     3c2:	88 0f       	add	r24, r24
     3c4:	99 1f       	adc	r25, r25
     3c6:	0a 94       	dec	r0
     3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <LedOn+0x12>
     3ca:	80 95       	com	r24
     3cc:	82 23       	and	r24, r18
     3ce:	8b bb       	out	0x1b, r24	; 27
     3d0:	08 95       	ret

000003d2 <LedOff>:
}

void LedOff(uint8_t index)
{
	PORT_LED |= (1 << ledHandleConfig.pinValue[index]);
     3d2:	2b b3       	in	r18, 0x1b	; 27
     3d4:	e8 2f       	mov	r30, r24
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	e5 55       	subi	r30, 0x55	; 85
     3da:	ff 4f       	sbci	r31, 0xFF	; 255
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	01 80       	ldd	r0, Z+1	; 0x01
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <LedOff+0x16>
     3e4:	88 0f       	add	r24, r24
     3e6:	99 1f       	adc	r25, r25
     3e8:	0a 94       	dec	r0
     3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <LedOff+0x12>
     3ec:	82 2b       	or	r24, r18
     3ee:	8b bb       	out	0x1b, r24	; 27
     3f0:	08 95       	ret

000003f2 <ButtonToggleFunction>:
		deviceDisplayState++;
	DeviceDisplayStateLedNormal();
}

void ButtonToggleFunction(uint8_t index){
	if (displayState!=DisplayStateEdit)
     3f2:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <displayState>
     3f6:	82 30       	cpi	r24, 0x02	; 2
     3f8:	51 f4       	brne	.+20     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		return;
		
	if(editState==EditStateHours)
     3fa:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <editState>
     3fe:	81 11       	cpse	r24, r1
     400:	04 c0       	rjmp	.+8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		editState = EditStateMinutes;
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <editState>
     408:	08 95       	ret
	else
		editState = EditStateHours;
     40a:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <editState>
     40e:	08 95       	ret

00000410 <ButtonIncreaseFunction>:
}

void ButtonIncreaseFunction(uint8_t index){
     410:	0f 93       	push	r16
     412:	1f 93       	push	r17
     414:	cf 93       	push	r28
	if (displayState!=DisplayStateEdit)
     416:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <displayState>
     41a:	82 30       	cpi	r24, 0x02	; 2
     41c:	09 f0       	breq	.+2      	; 0x420 <ButtonIncreaseFunction+0x10>
     41e:	41 c0       	rjmp	.+130    	; 0x4a2 <ButtonIncreaseFunction+0x92>
     420:	c0 e0       	ldi	r28, 0x00	; 0
     422:	3d c0       	rjmp	.+122    	; 0x49e <ButtonIncreaseFunction+0x8e>
		return;
		
	for(DeviceDisplayState state = DeviceDisplayStateClock; state <= DeviceDisplayStateTemperature; state++)
	{
		if (deviceDisplayState == state){
     424:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <deviceDisplayState>
     428:	c8 13       	cpse	r28, r24
     42a:	38 c0       	rjmp	.+112    	; 0x49c <ButtonIncreaseFunction+0x8c>
			if (state == DeviceDisplayStateTemperature){
     42c:	c4 30       	cpi	r28, 0x04	; 4
     42e:	89 f4       	brne	.+34     	; 0x452 <ButtonIncreaseFunction+0x42>
				temperature++;
     430:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <temperature>
     434:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <temperature+0x1>
     438:	6f 5f       	subi	r22, 0xFF	; 255
     43a:	7f 4f       	sbci	r23, 0xFF	; 255
     43c:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <temperature+0x1>
     440:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <temperature>
				SevSegSetFloatVal(temperature);
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatunsisf>
     44c:	0e 94 4c 05 	call	0xa98	; 0xa98 <SevSegSetFloatVal>
     450:	25 c0       	rjmp	.+74     	; 0x49c <ButtonIncreaseFunction+0x8c>
			}
			else{
				if(editState==EditStateHours)
     452:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <editState>
     456:	81 11       	cpse	r24, r1
     458:	0a c0       	rjmp	.+20     	; 0x46e <ButtonIncreaseFunction+0x5e>
					{
						timeTrackers[state].hours++;
     45a:	ec 2f       	mov	r30, r28
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	ee 0f       	add	r30, r30
     460:	ff 1f       	adc	r31, r31
     462:	e0 59       	subi	r30, 0x90	; 144
     464:	ff 4f       	sbci	r31, 0xFF	; 255
     466:	80 81       	ld	r24, Z
     468:	8f 5f       	subi	r24, 0xFF	; 255
     46a:	80 83       	st	Z, r24
     46c:	09 c0       	rjmp	.+18     	; 0x480 <ButtonIncreaseFunction+0x70>
					}
				else
					{timeTrackers[state].minutes++;}
     46e:	ec 2f       	mov	r30, r28
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	ee 0f       	add	r30, r30
     474:	ff 1f       	adc	r31, r31
     476:	e0 59       	subi	r30, 0x90	; 144
     478:	ff 4f       	sbci	r31, 0xFF	; 255
     47a:	81 81       	ldd	r24, Z+1	; 0x01
     47c:	8f 5f       	subi	r24, 0xFF	; 255
     47e:	81 83       	std	Z+1, r24	; 0x01
				TimeValidate(&timeTrackers[state]);
     480:	0c 2f       	mov	r16, r28
     482:	10 e0       	ldi	r17, 0x00	; 0
     484:	00 0f       	add	r16, r16
     486:	11 1f       	adc	r17, r17
     488:	00 59       	subi	r16, 0x90	; 144
     48a:	1f 4f       	sbci	r17, 0xFF	; 255
     48c:	c8 01       	movw	r24, r16
     48e:	0e 94 5f 03 	call	0x6be	; 0x6be <TimeValidate>
				SevSegSetTimeVal(timeTrackers[state]);
     492:	f8 01       	movw	r30, r16
     494:	80 81       	ld	r24, Z
     496:	91 81       	ldd	r25, Z+1	; 0x01
     498:	0e 94 46 05 	call	0xa8c	; 0xa8c <SevSegSetTimeVal>

void ButtonIncreaseFunction(uint8_t index){
	if (displayState!=DisplayStateEdit)
		return;
		
	for(DeviceDisplayState state = DeviceDisplayStateClock; state <= DeviceDisplayStateTemperature; state++)
     49c:	cf 5f       	subi	r28, 0xFF	; 255
     49e:	c5 30       	cpi	r28, 0x05	; 5
     4a0:	08 f2       	brcs	.-126    	; 0x424 <ButtonIncreaseFunction+0x14>
				TimeValidate(&timeTrackers[state]);
				SevSegSetTimeVal(timeTrackers[state]);
			}
		}
	}
}
     4a2:	cf 91       	pop	r28
     4a4:	1f 91       	pop	r17
     4a6:	0f 91       	pop	r16
     4a8:	08 95       	ret

000004aa <ButtonDecreaseFunction>:

void ButtonDecreaseFunction(uint8_t index){
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
	if (displayState!=DisplayStateEdit)
     4b0:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <displayState>
     4b4:	82 30       	cpi	r24, 0x02	; 2
     4b6:	09 f0       	breq	.+2      	; 0x4ba <ButtonDecreaseFunction+0x10>
     4b8:	41 c0       	rjmp	.+130    	; 0x53c <ButtonDecreaseFunction+0x92>
     4ba:	c0 e0       	ldi	r28, 0x00	; 0
     4bc:	3d c0       	rjmp	.+122    	; 0x538 <ButtonDecreaseFunction+0x8e>
		return;
		
	for(DeviceDisplayState state = DeviceDisplayStateClock; state <= DeviceDisplayStateTemperature; state++)
	{
		if (deviceDisplayState == state){
     4be:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <deviceDisplayState>
     4c2:	c8 13       	cpse	r28, r24
     4c4:	38 c0       	rjmp	.+112    	; 0x536 <ButtonDecreaseFunction+0x8c>
		if (state == DeviceDisplayStateTemperature){
     4c6:	c4 30       	cpi	r28, 0x04	; 4
     4c8:	89 f4       	brne	.+34     	; 0x4ec <ButtonDecreaseFunction+0x42>
			temperature--;
     4ca:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <temperature>
     4ce:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <temperature+0x1>
     4d2:	61 50       	subi	r22, 0x01	; 1
     4d4:	71 09       	sbc	r23, r1
     4d6:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <temperature+0x1>
     4da:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <temperature>
			SevSegSetFloatVal(temperature);
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatunsisf>
     4e6:	0e 94 4c 05 	call	0xa98	; 0xa98 <SevSegSetFloatVal>
     4ea:	25 c0       	rjmp	.+74     	; 0x536 <ButtonDecreaseFunction+0x8c>
		}
		else{
			if(editState==EditStateHours)
     4ec:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <editState>
     4f0:	81 11       	cpse	r24, r1
     4f2:	0a c0       	rjmp	.+20     	; 0x508 <ButtonDecreaseFunction+0x5e>
				{timeTrackers[state].hours--;}
     4f4:	ec 2f       	mov	r30, r28
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	ee 0f       	add	r30, r30
     4fa:	ff 1f       	adc	r31, r31
     4fc:	e0 59       	subi	r30, 0x90	; 144
     4fe:	ff 4f       	sbci	r31, 0xFF	; 255
     500:	80 81       	ld	r24, Z
     502:	81 50       	subi	r24, 0x01	; 1
     504:	80 83       	st	Z, r24
     506:	09 c0       	rjmp	.+18     	; 0x51a <ButtonDecreaseFunction+0x70>
			else
				{timeTrackers[state].minutes--;}
     508:	ec 2f       	mov	r30, r28
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	ee 0f       	add	r30, r30
     50e:	ff 1f       	adc	r31, r31
     510:	e0 59       	subi	r30, 0x90	; 144
     512:	ff 4f       	sbci	r31, 0xFF	; 255
     514:	81 81       	ldd	r24, Z+1	; 0x01
     516:	81 50       	subi	r24, 0x01	; 1
     518:	81 83       	std	Z+1, r24	; 0x01
			TimeValidate(&timeTrackers[state]);
     51a:	0c 2f       	mov	r16, r28
     51c:	10 e0       	ldi	r17, 0x00	; 0
     51e:	00 0f       	add	r16, r16
     520:	11 1f       	adc	r17, r17
     522:	00 59       	subi	r16, 0x90	; 144
     524:	1f 4f       	sbci	r17, 0xFF	; 255
     526:	c8 01       	movw	r24, r16
     528:	0e 94 5f 03 	call	0x6be	; 0x6be <TimeValidate>
			SevSegSetTimeVal(timeTrackers[state]);
     52c:	f8 01       	movw	r30, r16
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	0e 94 46 05 	call	0xa8c	; 0xa8c <SevSegSetTimeVal>

void ButtonDecreaseFunction(uint8_t index){
	if (displayState!=DisplayStateEdit)
		return;
		
	for(DeviceDisplayState state = DeviceDisplayStateClock; state <= DeviceDisplayStateTemperature; state++)
     536:	cf 5f       	subi	r28, 0xFF	; 255
     538:	c5 30       	cpi	r28, 0x05	; 5
     53a:	08 f2       	brcs	.-126    	; 0x4be <ButtonDecreaseFunction+0x14>
			TimeValidate(&timeTrackers[state]);
			SevSegSetTimeVal(timeTrackers[state]);
		}
		}
	}
}
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	08 95       	ret

00000544 <main>:
void DeviceDisplayStateLedEdit(void);

int main(void)
{
	StatusError err;
	TimerSwInitParam* pTimerSwInitParam = TimerGetIntervalPointerCfg();
     544:	0e 94 d5 05 	call	0xbaa	; 0xbaa <TimerGetIntervalPointerCfg>
     548:	ec 01       	movw	r28, r24

	if (deviceState == DeviceStateStartup){
     54a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <deviceState>
     54e:	81 11       	cpse	r24, r1
     550:	28 c0       	rjmp	.+80     	; 0x5a2 <main+0x5e>
		deviceState = DeviceStateInit;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <deviceState>

		TimerInitCfg();
     558:	0e 94 bc 05 	call	0xb78	; 0xb78 <TimerInitCfg>
		TimerEnableCfg(true);
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	0e 94 cc 05 	call	0xb98	; 0xb98 <TimerEnableCfg>

		SevSegInit();
     562:	0e 94 ff 04 	call	0x9fe	; 0x9fe <SevSegInit>
		ButtonInit(&buttonFunctionPtr);
     566:	80 e6       	ldi	r24, 0x60	; 96
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <ButtonInit>
		LedInit();
     56e:	0e 94 b2 01 	call	0x364	; 0x364 <LedInit>

		AdcInit();
     572:	0e 94 84 00 	call	0x108	; 0x108 <AdcInit>
		adcValue = GetAdcValue();
     576:	0e 94 8b 00 	call	0x116	; 0x116 <GetAdcValue>
     57a:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <adcValue+0x1>
     57e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <adcValue>

		sei();
     582:	78 94       	sei

		err = TimerSwInit(pTimerSwInitParam, &timerSwHandle);
     584:	63 eb       	ldi	r22, 0xB3	; 179
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	ce 01       	movw	r24, r28
     58a:	0e 94 9c 06 	call	0xd38	; 0xd38 <TimerSwInit>
		if (err == StatusErrNone) {
     58e:	81 11       	cpse	r24, r1
     590:	08 c0       	rjmp	.+16     	; 0x5a2 <main+0x5e>
			TimerSwStartup(&timerSwHandle, 1000);
     592:	48 ee       	ldi	r20, 0xE8	; 232
     594:	53 e0       	ldi	r21, 0x03	; 3
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	83 eb       	ldi	r24, 0xB3	; 179
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 a8 06 	call	0xd50	; 0xd50 <TimerSwStartup>
		}
	}
	
    while (1) {
        ButtonRoutine();
     5a2:	0e 94 15 01 	call	0x22a	; 0x22a <ButtonRoutine>
        
        err = TimerSwIsExpired(&timerSwHandle);
     5a6:	83 eb       	ldi	r24, 0xB3	; 179
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	0e 94 c1 06 	call	0xd82	; 0xd82 <TimerSwIsExpired>
        if (err == StatusErrTime && !(deviceDisplayState==DeviceDisplayStateClock&&displayState==DisplayStateEdit)) {
     5ae:	80 31       	cpi	r24, 0x10	; 16
     5b0:	a1 f5       	brne	.+104    	; 0x61a <main+0xd6>
     5b2:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <deviceDisplayState>
     5b6:	81 11       	cpse	r24, r1
     5b8:	04 c0       	rjmp	.+8      	; 0x5c2 <main+0x7e>
     5ba:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <displayState>
     5be:	82 30       	cpi	r24, 0x02	; 2
     5c0:	61 f1       	breq	.+88     	; 0x61a <main+0xd6>
			
			TimeIncrement(&timeTrackers[DeviceDisplayStateClock]);
     5c2:	80 e7       	ldi	r24, 0x70	; 112
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <TimeIncrement>
			
			for(DeviceDisplayState state = DeviceDisplayStateClock; state <= DeviceDisplayStateTemperature; state++)
     5ca:	c0 e0       	ldi	r28, 0x00	; 0
     5cc:	1c c0       	rjmp	.+56     	; 0x606 <main+0xc2>
			{
				if (deviceDisplayState == state){
     5ce:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <deviceDisplayState>
     5d2:	c8 13       	cpse	r28, r24
     5d4:	17 c0       	rjmp	.+46     	; 0x604 <main+0xc0>
					if (state == DeviceDisplayStateTemperature)
     5d6:	c4 30       	cpi	r28, 0x04	; 4
     5d8:	59 f4       	brne	.+22     	; 0x5f0 <main+0xac>
						{SevSegSetFloatVal(temperature);}
     5da:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <temperature>
     5de:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <temperature+0x1>
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatunsisf>
     5ea:	0e 94 4c 05 	call	0xa98	; 0xa98 <SevSegSetFloatVal>
     5ee:	0a c0       	rjmp	.+20     	; 0x604 <main+0xc0>
					else
						{SevSegSetTimeVal(timeTrackers[state]);}
     5f0:	ec 2f       	mov	r30, r28
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	ee 0f       	add	r30, r30
     5f6:	ff 1f       	adc	r31, r31
     5f8:	e0 59       	subi	r30, 0x90	; 144
     5fa:	ff 4f       	sbci	r31, 0xFF	; 255
     5fc:	80 81       	ld	r24, Z
     5fe:	91 81       	ldd	r25, Z+1	; 0x01
     600:	0e 94 46 05 	call	0xa8c	; 0xa8c <SevSegSetTimeVal>
        err = TimerSwIsExpired(&timerSwHandle);
        if (err == StatusErrTime && !(deviceDisplayState==DeviceDisplayStateClock&&displayState==DisplayStateEdit)) {
			
			TimeIncrement(&timeTrackers[DeviceDisplayStateClock]);
			
			for(DeviceDisplayState state = DeviceDisplayStateClock; state <= DeviceDisplayStateTemperature; state++)
     604:	cf 5f       	subi	r28, 0xFF	; 255
     606:	c5 30       	cpi	r28, 0x05	; 5
     608:	10 f3       	brcs	.-60     	; 0x5ce <main+0x8a>
					else
						{SevSegSetTimeVal(timeTrackers[state]);}
					}
			}
						
            TimerSwStartup(&timerSwHandle, 1000);
     60a:	48 ee       	ldi	r20, 0xE8	; 232
     60c:	53 e0       	ldi	r21, 0x03	; 3
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	83 eb       	ldi	r24, 0xB3	; 179
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 a8 06 	call	0xd50	; 0xd50 <TimerSwStartup>
        }
		
		if(deviceDisplayState==DeviceDisplayStateTemperature)
     61a:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <deviceDisplayState>
     61e:	84 30       	cpi	r24, 0x04	; 4
     620:	51 f4       	brne	.+20     	; 0x636 <main+0xf2>
			SevSegSetFloatVal(temperature);
     622:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <temperature>
     626:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <temperature+0x1>
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatunsisf>
     632:	0e 94 4c 05 	call	0xa98	; 0xa98 <SevSegSetFloatVal>
			
		if(displayState==DisplayStateOff)
     636:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <displayState>
     63a:	81 11       	cpse	r24, r1
     63c:	03 c0       	rjmp	.+6      	; 0x644 <main+0x100>
			SevSegCfgAllDigitsOff();
     63e:	0e 94 70 05 	call	0xae0	; 0xae0 <SevSegCfgAllDigitsOff>
     642:	af cf       	rjmp	.-162    	; 0x5a2 <main+0x5e>
		else
			SevSegRutine();
     644:	0e 94 1e 05 	call	0xa3c	; 0xa3c <SevSegRutine>
     648:	ac cf       	rjmp	.-168    	; 0x5a2 <main+0x5e>

0000064a <DeviceDisplayStateLedNormal>:
	DeviceDisplayStateLedEdit();
}


void DeviceDisplayStateLedNormal(void){
	LedAllOff();
     64a:	0e 94 9b 01 	call	0x336	; 0x336 <LedAllOff>
	LedOn(deviceDisplayState);
     64e:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <deviceDisplayState>
     652:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LedOn>
     656:	08 95       	ret

00000658 <ButtonPowerFunction>:

    }
}

void ButtonPowerFunction(uint8_t index){
	if(displayState==DisplayStateOff){
     658:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <displayState>
     65c:	81 11       	cpse	r24, r1
     65e:	06 c0       	rjmp	.+12     	; 0x66c <ButtonPowerFunction+0x14>
		displayState = DisplayStateNormal;
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <displayState>
		DeviceDisplayStateLedNormal();
     666:	0e 94 25 03 	call	0x64a	; 0x64a <DeviceDisplayStateLedNormal>
     66a:	08 95       	ret
	}
	else{
		displayState = DisplayStateOff;
     66c:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <displayState>
		LedAllOff();
     670:	0e 94 9b 01 	call	0x336	; 0x336 <LedAllOff>
     674:	08 95       	ret

00000676 <ButtonNextFunction>:
		}
}

void ButtonNextFunction(uint8_t index){
	if (displayState!=DisplayStateNormal)
     676:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <displayState>
     67a:	81 30       	cpi	r24, 0x01	; 1
     67c:	61 f4       	brne	.+24     	; 0x696 <ButtonNextFunction+0x20>
		return;
		
	if(deviceDisplayState==DeviceDisplayStateTemperature)
     67e:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <deviceDisplayState>
     682:	84 30       	cpi	r24, 0x04	; 4
     684:	19 f4       	brne	.+6      	; 0x68c <ButtonNextFunction+0x16>
		deviceDisplayState=0;
     686:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <deviceDisplayState>
     68a:	03 c0       	rjmp	.+6      	; 0x692 <ButtonNextFunction+0x1c>
	else
		deviceDisplayState++;
     68c:	8f 5f       	subi	r24, 0xFF	; 255
     68e:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <deviceDisplayState>
	DeviceDisplayStateLedNormal();
     692:	0e 94 25 03 	call	0x64a	; 0x64a <DeviceDisplayStateLedNormal>
     696:	08 95       	ret

00000698 <ButtonOkFunction>:
		}
	}
}

void ButtonOkFunction(uint8_t index){
	displayState = DisplayStateNormal;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <displayState>
	DeviceDisplayStateLedNormal();
     69e:	0e 94 25 03 	call	0x64a	; 0x64a <DeviceDisplayStateLedNormal>
     6a2:	08 95       	ret

000006a4 <DeviceDisplayStateLedEdit>:
	LedAllOff();
	LedOn(deviceDisplayState);
}

void DeviceDisplayStateLedEdit(void){
	LedAllOn();
     6a4:	0e 94 83 01 	call	0x306	; 0x306 <LedAllOn>
	LedOff(deviceDisplayState);
     6a8:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <deviceDisplayState>
     6ac:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LedOff>
     6b0:	08 95       	ret

000006b2 <ButtonEditFunction>:
void ButtonOkFunction(uint8_t index){
	displayState = DisplayStateNormal;
	DeviceDisplayStateLedNormal();
}
void ButtonEditFunction(uint8_t index){
	displayState = DisplayStateEdit;
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <displayState>
	DeviceDisplayStateLedEdit();
     6b8:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DeviceDisplayStateLedEdit>
     6bc:	08 95       	ret

000006be <TimeValidate>:
void TimeDecrement(Time* time){
	time->minutes--;
	TimeValidate(time);
}

void TimeValidate(Time* time){
     6be:	fc 01       	movw	r30, r24
	if(time->minutes==60){
     6c0:	81 81       	ldd	r24, Z+1	; 0x01
     6c2:	8c 33       	cpi	r24, 0x3C	; 60
     6c4:	21 f4       	brne	.+8      	; 0x6ce <TimeValidate+0x10>
		time->minutes=0;
     6c6:	11 82       	std	Z+1, r1	; 0x01
		time->hours++;}
     6c8:	80 81       	ld	r24, Z
     6ca:	8f 5f       	subi	r24, 0xFF	; 255
     6cc:	80 83       	st	Z, r24
	if(time->minutes<0){
		time->minutes=59;
		time->hours--;
	}
	if (time->hours>=24)
     6ce:	80 81       	ld	r24, Z
     6d0:	88 31       	cpi	r24, 0x18	; 24
     6d2:	08 f0       	brcs	.+2      	; 0x6d6 <TimeValidate+0x18>
		time->hours=0;
     6d4:	10 82       	st	Z, r1
     6d6:	08 95       	ret

000006d8 <TimeIncrement>:
#include "Rtc.h"

void TimeIncrement(Time* time){
	time->minutes++;
     6d8:	fc 01       	movw	r30, r24
     6da:	21 81       	ldd	r18, Z+1	; 0x01
     6dc:	2f 5f       	subi	r18, 0xFF	; 255
     6de:	21 83       	std	Z+1, r18	; 0x01
	TimeValidate(time);
     6e0:	0e 94 5f 03 	call	0x6be	; 0x6be <TimeValidate>
     6e4:	08 95       	ret

000006e6 <TimeToBuff>:
		return StatusErrIndex;
	}
}

void TimeToBuff(Time time,uint8_t * data)
{
     6e6:	db 01       	movw	r26, r22
	uint8_t localdigitCount = 0;
	
    if(time.hours<10)
     6e8:	8a 30       	cpi	r24, 0x0A	; 10
     6ea:	20 f4       	brcc	.+8      	; 0x6f4 <TimeToBuff+0xe>
    {
        data[localdigitCount] = segCode[0];
     6ec:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <segCode>
     6f0:	2c 93       	st	X, r18
     6f2:	13 c0       	rjmp	.+38     	; 0x71a <TimeToBuff+0x34>
        localdigitCount++;
    }else{
        uint8_t tmp = time.hours / 10;
     6f4:	2d ec       	ldi	r18, 0xCD	; 205
     6f6:	82 9f       	mul	r24, r18
     6f8:	21 2d       	mov	r18, r1
     6fa:	11 24       	eor	r1, r1
     6fc:	26 95       	lsr	r18
     6fe:	26 95       	lsr	r18
     700:	26 95       	lsr	r18
        data[localdigitCount] = segCode[tmp];
     702:	e2 2f       	mov	r30, r18
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	e8 58       	subi	r30, 0x88	; 136
     708:	ff 4f       	sbci	r31, 0xFF	; 255
     70a:	30 81       	ld	r19, Z
     70c:	3c 93       	st	X, r19
        localdigitCount++;
        time.hours %= 10;
     70e:	22 0f       	add	r18, r18
     710:	32 2f       	mov	r19, r18
     712:	33 0f       	add	r19, r19
     714:	33 0f       	add	r19, r19
     716:	23 0f       	add	r18, r19
     718:	82 1b       	sub	r24, r18
    }
    data[localdigitCount] = segCode[time.hours] | segCode[COMA_INDEX];
     71a:	e8 2f       	mov	r30, r24
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	e8 58       	subi	r30, 0x88	; 136
     720:	ff 4f       	sbci	r31, 0xFF	; 255
     722:	20 81       	ld	r18, Z
     724:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <segCode+0xa>
     728:	82 2b       	or	r24, r18
     72a:	11 96       	adiw	r26, 0x01	; 1
     72c:	8c 93       	st	X, r24
     72e:	11 97       	sbiw	r26, 0x01	; 1
    localdigitCount++;
	
    if(time.minutes<10)
     730:	9a 30       	cpi	r25, 0x0A	; 10
     732:	30 f4       	brcc	.+12     	; 0x740 <TimeToBuff+0x5a>
    {
        data[localdigitCount] = segCode[0];
     734:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <segCode>
     738:	12 96       	adiw	r26, 0x02	; 2
     73a:	8c 93       	st	X, r24
     73c:	12 97       	sbiw	r26, 0x02	; 2
     73e:	15 c0       	rjmp	.+42     	; 0x76a <TimeToBuff+0x84>
        localdigitCount++;
    }else{
        uint8_t tmp = time.minutes / 10;
     740:	8d ec       	ldi	r24, 0xCD	; 205
     742:	98 9f       	mul	r25, r24
     744:	81 2d       	mov	r24, r1
     746:	11 24       	eor	r1, r1
     748:	86 95       	lsr	r24
     74a:	86 95       	lsr	r24
     74c:	86 95       	lsr	r24
        data[localdigitCount] = segCode[tmp];
     74e:	e8 2f       	mov	r30, r24
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	e8 58       	subi	r30, 0x88	; 136
     754:	ff 4f       	sbci	r31, 0xFF	; 255
     756:	20 81       	ld	r18, Z
     758:	12 96       	adiw	r26, 0x02	; 2
     75a:	2c 93       	st	X, r18
     75c:	12 97       	sbiw	r26, 0x02	; 2
        localdigitCount++;
        time.minutes %= 10;
     75e:	88 0f       	add	r24, r24
     760:	28 2f       	mov	r18, r24
     762:	22 0f       	add	r18, r18
     764:	22 0f       	add	r18, r18
     766:	82 0f       	add	r24, r18
     768:	98 1b       	sub	r25, r24
    }
    data[localdigitCount] = segCode[time.minutes];
     76a:	e9 2f       	mov	r30, r25
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	e8 58       	subi	r30, 0x88	; 136
     770:	ff 4f       	sbci	r31, 0xFF	; 255
     772:	80 81       	ld	r24, Z
     774:	13 96       	adiw	r26, 0x03	; 3
     776:	8c 93       	st	X, r24
     778:	08 95       	ret

0000077a <FloatToBuff>:
	return;
}


static void FloatToBuff(float value,uint8_t * data)
{
     77a:	4f 92       	push	r4
     77c:	5f 92       	push	r5
     77e:	6f 92       	push	r6
     780:	7f 92       	push	r7
     782:	8f 92       	push	r8
     784:	9f 92       	push	r9
     786:	af 92       	push	r10
     788:	bf 92       	push	r11
     78a:	cf 92       	push	r12
     78c:	df 92       	push	r13
     78e:	ef 92       	push	r14
     790:	ff 92       	push	r15
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	4b 01       	movw	r8, r22
     79c:	5c 01       	movw	r10, r24
     79e:	8a 01       	movw	r16, r20
	uint8_t tmp;
	float localVlaue, localdecValue, decimalMultipler;
	
	decimalMultipler = (float)pow((double)10,(double)(DISPLAY_7_SEGMENT_DIGITS_COUNT - 1));
	
	if (value < 0)
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	a9 01       	movw	r20, r18
     7a6:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__cmpsf2>
     7aa:	88 23       	and	r24, r24
     7ac:	2c f5       	brge	.+74     	; 0x7f8 <FloatToBuff+0x7e>
	{
		value *= -1;
     7ae:	b7 fa       	bst	r11, 7
     7b0:	b0 94       	com	r11
     7b2:	b7 f8       	bld	r11, 7
     7b4:	b0 94       	com	r11
		data[localdigitCount] = segCode[MINUS_INDEX];
     7b6:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <segCode+0xb>
     7ba:	f8 01       	movw	r30, r16
     7bc:	80 83       	st	Z, r24
		localdigitCount++;
		decVal = (float)pow((double)10,(double)(DISPLAY_7_SEGMENT_DIGITS_COUNT - 2));
		
		if (value >= (float)pow((double)10,(double)(DISPLAY_7_SEGMENT_DIGITS_COUNT - 1)))
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	4a e7       	ldi	r20, 0x7A	; 122
     7c4:	54 e4       	ldi	r21, 0x44	; 68
     7c6:	c5 01       	movw	r24, r10
     7c8:	b4 01       	movw	r22, r8
     7ca:	0e 94 ad 08 	call	0x115a	; 0x115a <__gesf2>
     7ce:	88 23       	and	r24, r24
     7d0:	84 f1       	brlt	.+96     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
		{
			localVlaue = (float)pow((double)10,(double)(DISPLAY_7_SEGMENT_DIGITS_COUNT - 1)) - 1;
     7d2:	0f 2e       	mov	r0, r31
     7d4:	81 2c       	mov	r8, r1
     7d6:	f0 ec       	ldi	r31, 0xC0	; 192
     7d8:	9f 2e       	mov	r9, r31
     7da:	f9 e7       	ldi	r31, 0x79	; 121
     7dc:	af 2e       	mov	r10, r31
     7de:	f4 e4       	ldi	r31, 0x44	; 68
     7e0:	bf 2e       	mov	r11, r31
     7e2:	f0 2d       	mov	r31, r0
	
	if (value < 0)
	{
		value *= -1;
		data[localdigitCount] = segCode[MINUS_INDEX];
		localdigitCount++;
     7e4:	c1 e0       	ldi	r28, 0x01	; 1
		decVal = (float)pow((double)10,(double)(DISPLAY_7_SEGMENT_DIGITS_COUNT - 2));
     7e6:	0f 2e       	mov	r0, r31
     7e8:	c1 2c       	mov	r12, r1
     7ea:	d1 2c       	mov	r13, r1
     7ec:	f8 ec       	ldi	r31, 0xC8	; 200
     7ee:	ef 2e       	mov	r14, r31
     7f0:	f2 e4       	ldi	r31, 0x42	; 66
     7f2:	ff 2e       	mov	r15, r31
     7f4:	f0 2d       	mov	r31, r0
     7f6:	30 c0       	rjmp	.+96     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
	}
	else
	{
		decVal = (float)pow((double)10,(double)(DISPLAY_7_SEGMENT_DIGITS_COUNT - 1));
		
		if (value >= (float)pow((double)10,(double)(DISPLAY_7_SEGMENT_DIGITS_COUNT)))
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e4       	ldi	r19, 0x40	; 64
     7fc:	4c e1       	ldi	r20, 0x1C	; 28
     7fe:	56 e4       	ldi	r21, 0x46	; 70
     800:	c5 01       	movw	r24, r10
     802:	b4 01       	movw	r22, r8
     804:	0e 94 ad 08 	call	0x115a	; 0x115a <__gesf2>
     808:	88 23       	and	r24, r24
     80a:	ec f0       	brlt	.+58     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
		{
			localVlaue = (float)pow((double)10,(double)(DISPLAY_7_SEGMENT_DIGITS_COUNT)) - 1;
     80c:	0f 2e       	mov	r0, r31
     80e:	81 2c       	mov	r8, r1
     810:	fc e3       	ldi	r31, 0x3C	; 60
     812:	9f 2e       	mov	r9, r31
     814:	fc e1       	ldi	r31, 0x1C	; 28
     816:	af 2e       	mov	r10, r31
     818:	f6 e4       	ldi	r31, 0x46	; 70
     81a:	bf 2e       	mov	r11, r31
     81c:	f0 2d       	mov	r31, r0

static void FloatToBuff(float value,uint8_t * data)
{
	bool startCountIncrease = false;
	float decVal;
	uint8_t localdigitCount = 0;
     81e:	c0 e0       	ldi	r28, 0x00	; 0
			localVlaue = value;
		}
	}
	else
	{
		decVal = (float)pow((double)10,(double)(DISPLAY_7_SEGMENT_DIGITS_COUNT - 1));
     820:	0f 2e       	mov	r0, r31
     822:	c1 2c       	mov	r12, r1
     824:	d1 2c       	mov	r13, r1
     826:	fa e7       	ldi	r31, 0x7A	; 122
     828:	ef 2e       	mov	r14, r31
     82a:	f4 e4       	ldi	r31, 0x44	; 68
     82c:	ff 2e       	mov	r15, r31
     82e:	f0 2d       	mov	r31, r0
     830:	13 c0       	rjmp	.+38     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
	
	if (value < 0)
	{
		value *= -1;
		data[localdigitCount] = segCode[MINUS_INDEX];
		localdigitCount++;
     832:	c1 e0       	ldi	r28, 0x01	; 1
		decVal = (float)pow((double)10,(double)(DISPLAY_7_SEGMENT_DIGITS_COUNT - 2));
     834:	0f 2e       	mov	r0, r31
     836:	c1 2c       	mov	r12, r1
     838:	d1 2c       	mov	r13, r1
     83a:	f8 ec       	ldi	r31, 0xC8	; 200
     83c:	ef 2e       	mov	r14, r31
     83e:	f2 e4       	ldi	r31, 0x42	; 66
     840:	ff 2e       	mov	r15, r31
     842:	f0 2d       	mov	r31, r0
     844:	09 c0       	rjmp	.+18     	; 0x858 <__DATA_REGION_LENGTH__+0x58>

static void FloatToBuff(float value,uint8_t * data)
{
	bool startCountIncrease = false;
	float decVal;
	uint8_t localdigitCount = 0;
     846:	c0 e0       	ldi	r28, 0x00	; 0
			localVlaue = value;
		}
	}
	else
	{
		decVal = (float)pow((double)10,(double)(DISPLAY_7_SEGMENT_DIGITS_COUNT - 1));
     848:	0f 2e       	mov	r0, r31
     84a:	c1 2c       	mov	r12, r1
     84c:	d1 2c       	mov	r13, r1
     84e:	fa e7       	ldi	r31, 0x7A	; 122
     850:	ef 2e       	mov	r14, r31
     852:	f4 e4       	ldi	r31, 0x44	; 68
     854:	ff 2e       	mov	r15, r31
     856:	f0 2d       	mov	r31, r0
		{
			localVlaue = value;
		}
	}
	
	localdecValue = (localVlaue * (float)decimalMultipler) - (float)((int)localVlaue * (int)decimalMultipler);
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	4a e7       	ldi	r20, 0x7A	; 122
     85e:	54 e4       	ldi	r21, 0x44	; 68
     860:	c5 01       	movw	r24, r10
     862:	b4 01       	movw	r22, r8
     864:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     868:	2b 01       	movw	r4, r22
     86a:	3c 01       	movw	r6, r24
     86c:	c5 01       	movw	r24, r10
     86e:	b4 01       	movw	r22, r8
     870:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fixsfsi>
     874:	28 ee       	ldi	r18, 0xE8	; 232
     876:	33 e0       	ldi	r19, 0x03	; 3
     878:	26 9f       	mul	r18, r22
     87a:	a0 01       	movw	r20, r0
     87c:	27 9f       	mul	r18, r23
     87e:	50 0d       	add	r21, r0
     880:	36 9f       	mul	r19, r22
     882:	50 0d       	add	r21, r0
     884:	11 24       	eor	r1, r1
     886:	ba 01       	movw	r22, r20
     888:	55 0f       	add	r21, r21
     88a:	88 0b       	sbc	r24, r24
     88c:	99 0b       	sbc	r25, r25
     88e:	0e 94 fd 07 	call	0xffa	; 0xffa <__floatsisf>
     892:	9b 01       	movw	r18, r22
     894:	ac 01       	movw	r20, r24
     896:	c3 01       	movw	r24, r6
     898:	b2 01       	movw	r22, r4
     89a:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__subsf3>
     89e:	2b 01       	movw	r4, r22
     8a0:	3c 01       	movw	r6, r24
}


static void FloatToBuff(float value,uint8_t * data)
{
	bool startCountIncrease = false;
     8a2:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
	
	localdecValue = (localVlaue * (float)decimalMultipler) - (float)((int)localVlaue * (int)decimalMultipler);
	
	while(decVal >= 1)
     8a4:	42 c0       	rjmp	.+132    	; 0x92a <__stack+0xcb>
	{
		if (localVlaue >= decVal)
     8a6:	a5 01       	movw	r20, r10
     8a8:	94 01       	movw	r18, r8
     8aa:	c7 01       	movw	r24, r14
     8ac:	b6 01       	movw	r22, r12
     8ae:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__cmpsf2>
     8b2:	18 16       	cp	r1, r24
     8b4:	3c f1       	brlt	.+78     	; 0x904 <__stack+0xa5>
		{
			tmp = (uint8_t)(localVlaue / decVal);
     8b6:	a7 01       	movw	r20, r14
     8b8:	96 01       	movw	r18, r12
     8ba:	c5 01       	movw	r24, r10
     8bc:	b4 01       	movw	r22, r8
     8be:	0e 94 53 07 	call	0xea6	; 0xea6 <__divsf3>
     8c2:	0e 94 cc 07 	call	0xf98	; 0xf98 <__fixunssfsi>
			data[localdigitCount] = segCode[tmp];
     8c6:	d8 01       	movw	r26, r16
     8c8:	ac 0f       	add	r26, r28
     8ca:	b1 1d       	adc	r27, r1
     8cc:	e6 2f       	mov	r30, r22
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	e8 58       	subi	r30, 0x88	; 136
     8d2:	ff 4f       	sbci	r31, 0xFF	; 255
     8d4:	80 81       	ld	r24, Z
     8d6:	8c 93       	st	X, r24
			localdigitCount++;
     8d8:	cf 5f       	subi	r28, 0xFF	; 255
			localVlaue -= (float)tmp * decVal;
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatunsisf>
     8e4:	9b 01       	movw	r18, r22
     8e6:	ac 01       	movw	r20, r24
     8e8:	c7 01       	movw	r24, r14
     8ea:	b6 01       	movw	r22, r12
     8ec:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     8f0:	9b 01       	movw	r18, r22
     8f2:	ac 01       	movw	r20, r24
     8f4:	c5 01       	movw	r24, r10
     8f6:	b4 01       	movw	r22, r8
     8f8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__subsf3>
     8fc:	4b 01       	movw	r8, r22
     8fe:	5c 01       	movw	r10, r24
			startCountIncrease = true;
     900:	d1 e0       	ldi	r29, 0x01	; 1
     902:	09 c0       	rjmp	.+18     	; 0x916 <__stack+0xb7>
		}
		else if(startCountIncrease)
     904:	dd 23       	and	r29, r29
     906:	39 f0       	breq	.+14     	; 0x916 <__stack+0xb7>
		{
			data[localdigitCount] = segCode[ZERO_INDEX];
     908:	f8 01       	movw	r30, r16
     90a:	ec 0f       	add	r30, r28
     90c:	f1 1d       	adc	r31, r1
     90e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <segCode>
     912:	80 83       	st	Z, r24
			localdigitCount++;
     914:	cf 5f       	subi	r28, 0xFF	; 255
		}
		decVal /= 10;
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	40 e2       	ldi	r20, 0x20	; 32
     91c:	51 e4       	ldi	r21, 0x41	; 65
     91e:	c7 01       	movw	r24, r14
     920:	b6 01       	movw	r22, r12
     922:	0e 94 53 07 	call	0xea6	; 0xea6 <__divsf3>
     926:	6b 01       	movw	r12, r22
     928:	7c 01       	movw	r14, r24
		}
	}
	
	localdecValue = (localVlaue * (float)decimalMultipler) - (float)((int)localVlaue * (int)decimalMultipler);
	
	while(decVal >= 1)
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e8       	ldi	r20, 0x80	; 128
     930:	5f e3       	ldi	r21, 0x3F	; 63
     932:	c7 01       	movw	r24, r14
     934:	b6 01       	movw	r22, r12
     936:	0e 94 ad 08 	call	0x115a	; 0x115a <__gesf2>
     93a:	88 23       	and	r24, r24
     93c:	0c f0       	brlt	.+2      	; 0x940 <__stack+0xe1>
     93e:	b3 cf       	rjmp	.-154    	; 0x8a6 <__stack+0x47>
		}
		decVal /= 10;
		
	}
	
	if (localdigitCount >= DISPLAY_7_SEGMENT_DIGITS_COUNT)
     940:	c4 30       	cpi	r28, 0x04	; 4
     942:	08 f0       	brcs	.+2      	; 0x946 <__stack+0xe7>
     944:	4b c0       	rjmp	.+150    	; 0x9dc <__stack+0x17d>
	{
		return;
	}
	
	if (localdigitCount == 0)
     946:	c1 11       	cpse	r28, r1
     948:	05 c0       	rjmp	.+10     	; 0x954 <__stack+0xf5>
	{
		data[localdigitCount] = 0;
     94a:	f8 01       	movw	r30, r16
     94c:	ec 0f       	add	r30, r28
     94e:	f1 1d       	adc	r31, r1
     950:	10 82       	st	Z, r1
		localdigitCount++;
     952:	cf 5f       	subi	r28, 0xFF	; 255
	}
	
	data[localdigitCount - 1] |= segCode[COMA_INDEX];
     954:	ec 2f       	mov	r30, r28
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	31 97       	sbiw	r30, 0x01	; 1
     95a:	e0 0f       	add	r30, r16
     95c:	f1 1f       	adc	r31, r17
     95e:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <segCode+0xa>
     962:	90 81       	ld	r25, Z
     964:	89 2b       	or	r24, r25
     966:	80 83       	st	Z, r24
	
	decVal = decimalMultipler / 10;
     968:	0f 2e       	mov	r0, r31
     96a:	c1 2c       	mov	r12, r1
     96c:	d1 2c       	mov	r13, r1
     96e:	f8 ec       	ldi	r31, 0xC8	; 200
     970:	ef 2e       	mov	r14, r31
     972:	f2 e4       	ldi	r31, 0x42	; 66
     974:	ff 2e       	mov	r15, r31
     976:	f0 2d       	mov	r31, r0
	
	while(localdigitCount <= DISPLAY_7_SEGMENT_DIGITS_COUNT)
     978:	2f c0       	rjmp	.+94     	; 0x9d8 <__stack+0x179>
	{
		tmp = (uint8_t)(localdecValue / decVal);
     97a:	a7 01       	movw	r20, r14
     97c:	96 01       	movw	r18, r12
     97e:	c3 01       	movw	r24, r6
     980:	b2 01       	movw	r22, r4
     982:	0e 94 53 07 	call	0xea6	; 0xea6 <__divsf3>
     986:	0e 94 cc 07 	call	0xf98	; 0xf98 <__fixunssfsi>
		data[localdigitCount] = segCode[tmp];
     98a:	d8 01       	movw	r26, r16
     98c:	ac 0f       	add	r26, r28
     98e:	b1 1d       	adc	r27, r1
     990:	e6 2f       	mov	r30, r22
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	e8 58       	subi	r30, 0x88	; 136
     996:	ff 4f       	sbci	r31, 0xFF	; 255
     998:	80 81       	ld	r24, Z
     99a:	8c 93       	st	X, r24
		localdigitCount++;
     99c:	cf 5f       	subi	r28, 0xFF	; 255
		localdecValue -= (float)tmp * decVal;
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatunsisf>
     9a8:	9b 01       	movw	r18, r22
     9aa:	ac 01       	movw	r20, r24
     9ac:	c7 01       	movw	r24, r14
     9ae:	b6 01       	movw	r22, r12
     9b0:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     9b4:	9b 01       	movw	r18, r22
     9b6:	ac 01       	movw	r20, r24
     9b8:	c3 01       	movw	r24, r6
     9ba:	b2 01       	movw	r22, r4
     9bc:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__subsf3>
     9c0:	2b 01       	movw	r4, r22
     9c2:	3c 01       	movw	r6, r24
		decVal /= 10;
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	40 e2       	ldi	r20, 0x20	; 32
     9ca:	51 e4       	ldi	r21, 0x41	; 65
     9cc:	c7 01       	movw	r24, r14
     9ce:	b6 01       	movw	r22, r12
     9d0:	0e 94 53 07 	call	0xea6	; 0xea6 <__divsf3>
     9d4:	6b 01       	movw	r12, r22
     9d6:	7c 01       	movw	r14, r24
	
	data[localdigitCount - 1] |= segCode[COMA_INDEX];
	
	decVal = decimalMultipler / 10;
	
	while(localdigitCount <= DISPLAY_7_SEGMENT_DIGITS_COUNT)
     9d8:	c5 30       	cpi	r28, 0x05	; 5
     9da:	78 f2       	brcs	.-98     	; 0x97a <__stack+0x11b>
		localdecValue -= (float)tmp * decVal;
		decVal /= 10;
	}
	
	return;
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	df 90       	pop	r13
     9ea:	cf 90       	pop	r12
     9ec:	bf 90       	pop	r11
     9ee:	af 90       	pop	r10
     9f0:	9f 90       	pop	r9
     9f2:	8f 90       	pop	r8
     9f4:	7f 90       	pop	r7
     9f6:	6f 90       	pop	r6
     9f8:	5f 90       	pop	r5
     9fa:	4f 90       	pop	r4
     9fc:	08 95       	ret

000009fe <SevSegInit>:

/* Global functions */
void SevSegInit(void)
{
	StatusError err;
	for(uint8_t index = 0; index < DISPLAY_7_SEGMENT_DIGITS_COUNT; index++)
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	06 c0       	rjmp	.+12     	; 0xa0e <SevSegInit+0x10>
	{
		digitsValue[index] = 0;
     a02:	e8 2f       	mov	r30, r24
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	ef 52       	subi	r30, 0x2F	; 47
     a08:	ff 4f       	sbci	r31, 0xFF	; 255
     a0a:	10 82       	st	Z, r1

/* Global functions */
void SevSegInit(void)
{
	StatusError err;
	for(uint8_t index = 0; index < DISPLAY_7_SEGMENT_DIGITS_COUNT; index++)
     a0c:	8f 5f       	subi	r24, 0xFF	; 255
     a0e:	84 30       	cpi	r24, 0x04	; 4
     a10:	c0 f3       	brcs	.-16     	; 0xa02 <SevSegInit+0x4>
	{
		digitsValue[index] = 0;
	}
	disp7SegHandleConfig = SevSegCfgInitAndGet();	
     a12:	0e 94 52 05 	call	0xaa4	; 0xaa4 <SevSegCfgInitAndGet>
	
	TimerSwInitParam *pTimerSwInitParam = TimerGetIntervalPointerCfg();
     a16:	0e 94 d5 05 	call	0xbaa	; 0xbaa <TimerGetIntervalPointerCfg>
	
	err = TimerSwInit(pTimerSwInitParam,&timerSwHandle);
     a1a:	65 ed       	ldi	r22, 0xD5	; 213
     a1c:	70 e0       	ldi	r23, 0x00	; 0
     a1e:	0e 94 9c 06 	call	0xd38	; 0xd38 <TimerSwInit>
	
	if (err == StatusErrNone)
     a22:	81 11       	cpse	r24, r1
     a24:	08 c0       	rjmp	.+16     	; 0xa36 <SevSegInit+0x38>
	{
		TimerSwStartup(&timerSwHandle,DISPLAY_7_SEGMENT_TIMER_MS);
     a26:	44 e0       	ldi	r20, 0x04	; 4
     a28:	50 e0       	ldi	r21, 0x00	; 0
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	85 ed       	ldi	r24, 0xD5	; 213
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 a8 06 	call	0xd50	; 0xd50 <TimerSwStartup>
	}
	digitCount = 0;
     a36:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <digitCount>
     a3a:	08 95       	ret

00000a3c <SevSegRutine>:
}

void SevSegRutine(void)
{
	StatusError err;
	err = TimerSwIsExpired(&timerSwHandle);
     a3c:	85 ed       	ldi	r24, 0xD5	; 213
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 c1 06 	call	0xd82	; 0xd82 <TimerSwIsExpired>
	if (err == StatusErrTime)
     a44:	80 31       	cpi	r24, 0x10	; 16
     a46:	09 f5       	brne	.+66     	; 0xa8a <SevSegRutine+0x4e>
	{
		if (digitCount >= DISPLAY_7_SEGMENT_DIGITS_COUNT)
     a48:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <digitCount>
     a4c:	84 30       	cpi	r24, 0x04	; 4
     a4e:	10 f0       	brcs	.+4      	; 0xa54 <SevSegRutine+0x18>
		{
			digitCount = 0;
     a50:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <digitCount>
		}
		SevSegCfgAllDigitsOff();
     a54:	0e 94 70 05 	call	0xae0	; 0xae0 <SevSegCfgAllDigitsOff>
		
		SevSegCfgSetDigitValue(digitsValue[digitCount]);
     a58:	e0 91 c7 00 	lds	r30, 0x00C7	; 0x8000c7 <digitCount>
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	ef 52       	subi	r30, 0x2F	; 47
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	80 81       	ld	r24, Z
     a64:	0e 94 7d 05 	call	0xafa	; 0xafa <SevSegCfgSetDigitValue>
		
		SevSegCfgDigitOn(digitCount);
     a68:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <digitCount>
     a6c:	0e 94 80 05 	call	0xb00	; 0xb00 <SevSegCfgDigitOn>
		
		TimerSwStartup(&timerSwHandle,DISPLAY_7_SEGMENT_TIMER_MS);
     a70:	44 e0       	ldi	r20, 0x04	; 4
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	85 ed       	ldi	r24, 0xD5	; 213
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 a8 06 	call	0xd50	; 0xd50 <TimerSwStartup>
		
		digitCount++;
     a80:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <digitCount>
     a84:	8f 5f       	subi	r24, 0xFF	; 255
     a86:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <digitCount>
     a8a:	08 95       	ret

00000a8c <SevSegSetTimeVal>:
	}
}

StatusError SevSegSetTimeVal(Time time)
{
	TimeToBuff(time,digitsValue);
     a8c:	61 ed       	ldi	r22, 0xD1	; 209
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	0e 94 73 03 	call	0x6e6	; 0x6e6 <TimeToBuff>
	
	return StatusErrNone;
}
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	08 95       	ret

00000a98 <SevSegSetFloatVal>:

StatusError SevSegSetFloatVal(float value)
{
	FloatToBuff(value,digitsValue);
     a98:	41 ed       	ldi	r20, 0xD1	; 209
     a9a:	50 e0       	ldi	r21, 0x00	; 0
     a9c:	0e 94 bd 03 	call	0x77a	; 0x77a <FloatToBuff>
	
	return StatusErrNone;
}
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	08 95       	ret

00000aa4 <SevSegCfgInitAndGet>:

static SevSegHandleConfig disp7SegHandleConfig;

SevSegHandleConfig* SevSegCfgInitAndGet()
{
	disp7SegHandleConfig.port = DISPLAY_7_SEGMENT_PORT;
     aa4:	85 b3       	in	r24, 0x15	; 21
     aa6:	e8 ec       	ldi	r30, 0xC8	; 200
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	80 83       	st	Z, r24
	disp7SegHandleConfig.portDig = DISPLAY_7_SEGMENT_DIGIT_PORT;
     aac:	88 b3       	in	r24, 0x18	; 24
     aae:	81 83       	std	Z+1, r24	; 0x01
	
	DISPLAY_7_SEGMENT_PORT_DIR = 0xFF;
     ab0:	8f ef       	ldi	r24, 0xFF	; 255
     ab2:	84 bb       	out	0x14, r24	; 20
	
	disp7SegHandleConfig.digitsPinValue[0] = DISPLAY_7_SEGMENT_DIGIT_1_PIN;
     ab4:	84 e0       	ldi	r24, 0x04	; 4
     ab6:	83 83       	std	Z+3, r24	; 0x03
	disp7SegHandleConfig.digitsPinValue[1] = DISPLAY_7_SEGMENT_DIGIT_2_PIN;
     ab8:	85 e0       	ldi	r24, 0x05	; 5
     aba:	84 83       	std	Z+4, r24	; 0x04
	disp7SegHandleConfig.digitsPinValue[2] = DISPLAY_7_SEGMENT_DIGIT_3_PIN;
     abc:	86 e0       	ldi	r24, 0x06	; 6
     abe:	85 83       	std	Z+5, r24	; 0x05
	disp7SegHandleConfig.digitsPinValue[3] = DISPLAY_7_SEGMENT_DIGIT_4_PIN;
     ac0:	87 e0       	ldi	r24, 0x07	; 7
     ac2:	86 83       	std	Z+6, r24	; 0x06
		
	DISPLAY_7_SEGMENT_DIGIT_PORT_DIR |= (1 << DISPLAY_7_SEGMENT_DIGIT_1_PIN);
     ac4:	87 b3       	in	r24, 0x17	; 23
     ac6:	80 61       	ori	r24, 0x10	; 16
     ac8:	87 bb       	out	0x17, r24	; 23
	DISPLAY_7_SEGMENT_DIGIT_PORT_DIR |= (1 << DISPLAY_7_SEGMENT_DIGIT_2_PIN);
     aca:	87 b3       	in	r24, 0x17	; 23
     acc:	80 62       	ori	r24, 0x20	; 32
     ace:	87 bb       	out	0x17, r24	; 23
	DISPLAY_7_SEGMENT_DIGIT_PORT_DIR |= (1 << DISPLAY_7_SEGMENT_DIGIT_3_PIN);
     ad0:	87 b3       	in	r24, 0x17	; 23
     ad2:	80 64       	ori	r24, 0x40	; 64
     ad4:	87 bb       	out	0x17, r24	; 23
	DISPLAY_7_SEGMENT_DIGIT_PORT_DIR |= (1 << DISPLAY_7_SEGMENT_DIGIT_4_PIN);
     ad6:	87 b3       	in	r24, 0x17	; 23
     ad8:	80 68       	ori	r24, 0x80	; 128
     ada:	87 bb       	out	0x17, r24	; 23
	
	return &disp7SegHandleConfig;
}
     adc:	cf 01       	movw	r24, r30
     ade:	08 95       	ret

00000ae0 <SevSegCfgAllDigitsOff>:

void SevSegCfgAllDigitsOff(void)
{
	DISPLAY_7_SEGMENT_DIGIT_PORT |= (1 << DISPLAY_7_SEGMENT_DIGIT_1_PIN);
     ae0:	88 b3       	in	r24, 0x18	; 24
     ae2:	80 61       	ori	r24, 0x10	; 16
     ae4:	88 bb       	out	0x18, r24	; 24
	DISPLAY_7_SEGMENT_DIGIT_PORT |= (1 << DISPLAY_7_SEGMENT_DIGIT_2_PIN);
     ae6:	88 b3       	in	r24, 0x18	; 24
     ae8:	80 62       	ori	r24, 0x20	; 32
     aea:	88 bb       	out	0x18, r24	; 24
	DISPLAY_7_SEGMENT_DIGIT_PORT |= (1 << DISPLAY_7_SEGMENT_DIGIT_3_PIN);
     aec:	88 b3       	in	r24, 0x18	; 24
     aee:	80 64       	ori	r24, 0x40	; 64
     af0:	88 bb       	out	0x18, r24	; 24
	DISPLAY_7_SEGMENT_DIGIT_PORT |= (1 << DISPLAY_7_SEGMENT_DIGIT_4_PIN);
     af2:	88 b3       	in	r24, 0x18	; 24
     af4:	80 68       	ori	r24, 0x80	; 128
     af6:	88 bb       	out	0x18, r24	; 24
     af8:	08 95       	ret

00000afa <SevSegCfgSetDigitValue>:
}

void SevSegCfgSetDigitValue(uint8_t value)
{
#if (DISPLAY_7_SEGMENT_MODE == COMUN_POWER_SUPPLY)
	DISPLAY_7_SEGMENT_PORT = ~value;
     afa:	80 95       	com	r24
     afc:	85 bb       	out	0x15, r24	; 21
     afe:	08 95       	ret

00000b00 <SevSegCfgDigitOn>:
#endif
}

void SevSegCfgDigitOn(uint8_t digit)
{
	if (digit < DISPLAY_7_SEGMENT_DIGITS_COUNT)
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	80 f4       	brcc	.+32     	; 0xb24 <SevSegCfgDigitOn+0x24>
	{
		DISPLAY_7_SEGMENT_DIGIT_PORT &= ~(1 << disp7SegHandleConfig.digitsPinValue[digit]);		
     b04:	28 b3       	in	r18, 0x18	; 24
     b06:	e8 2f       	mov	r30, r24
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	e8 53       	subi	r30, 0x38	; 56
     b0c:	ff 4f       	sbci	r31, 0xFF	; 255
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	03 80       	ldd	r0, Z+3	; 0x03
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <SevSegCfgDigitOn+0x1a>
     b16:	88 0f       	add	r24, r24
     b18:	99 1f       	adc	r25, r25
     b1a:	0a 94       	dec	r0
     b1c:	e2 f7       	brpl	.-8      	; 0xb16 <SevSegCfgDigitOn+0x16>
     b1e:	80 95       	com	r24
     b20:	82 23       	and	r24, r18
     b22:	88 bb       	out	0x18, r24	; 24
     b24:	08 95       	ret

00000b26 <__vector_9>:
 ******************************************************************************/

TimerSwInitParam timerSwInitParam;

ISR (TIMER1_OVF_vect)    // Timer1 ISR
{
     b26:	1f 92       	push	r1
     b28:	0f 92       	push	r0
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	0f 92       	push	r0
     b2e:	11 24       	eor	r1, r1
     b30:	8f 93       	push	r24
     b32:	9f 93       	push	r25
     b34:	af 93       	push	r26
     b36:	bf 93       	push	r27
	timerSwInitParam.interval++;
     b38:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <timerSwInitParam>
     b3c:	90 91 e6 00 	lds	r25, 0x00E6	; 0x8000e6 <timerSwInitParam+0x1>
     b40:	a0 91 e7 00 	lds	r26, 0x00E7	; 0x8000e7 <timerSwInitParam+0x2>
     b44:	b0 91 e8 00 	lds	r27, 0x00E8	; 0x8000e8 <timerSwInitParam+0x3>
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	a1 1d       	adc	r26, r1
     b4c:	b1 1d       	adc	r27, r1
     b4e:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <timerSwInitParam>
     b52:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <timerSwInitParam+0x1>
     b56:	a0 93 e7 00 	sts	0x00E7, r26	; 0x8000e7 <timerSwInitParam+0x2>
     b5a:	b0 93 e8 00 	sts	0x00E8, r27	; 0x8000e8 <timerSwInitParam+0x3>
	TCNT1 = TTIMER_CFG_COUNTER_INIT_STATE;   // for 1 sec at 16 MHz  63974
     b5e:	8f e7       	ldi	r24, 0x7F	; 127
     b60:	91 ec       	ldi	r25, 0xC1	; 193
     b62:	9d bd       	out	0x2d, r25	; 45
     b64:	8c bd       	out	0x2c, r24	; 44
}
     b66:	bf 91       	pop	r27
     b68:	af 91       	pop	r26
     b6a:	9f 91       	pop	r25
     b6c:	8f 91       	pop	r24
     b6e:	0f 90       	pop	r0
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	0f 90       	pop	r0
     b74:	1f 90       	pop	r1
     b76:	18 95       	reti

00000b78 <TimerInitCfg>:

void TimerInitCfg(){
	TCNT1 = TTIMER_CFG_COUNTER_INIT_STATE;   // for 1 sec at 16 MHz
     b78:	8f e7       	ldi	r24, 0x7F	; 127
     b7a:	91 ec       	ldi	r25, 0xC1	; 193
     b7c:	9d bd       	out	0x2d, r25	; 45
     b7e:	8c bd       	out	0x2c, r24	; 44
	TCCR1A = 0x00;
     b80:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<CS10);  // Timer mode with 1 prescler
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	8e bd       	out	0x2e, r24	; 46
	
	timerSwInitParam.interval = 0;
     b86:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <timerSwInitParam>
     b8a:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <timerSwInitParam+0x1>
     b8e:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <timerSwInitParam+0x2>
     b92:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <timerSwInitParam+0x3>
     b96:	08 95       	ret

00000b98 <TimerEnableCfg>:
}

void TimerEnableCfg(bool state){
	
	if(state == false)
     b98:	81 11       	cpse	r24, r1
     b9a:	04 c0       	rjmp	.+8      	; 0xba4 <TimerEnableCfg+0xc>
	{
		TIMSK &= ~(1UL << TOIE1); // Disable timer1 overflow interrupt(TOIE1)			
     b9c:	89 b7       	in	r24, 0x39	; 57
     b9e:	8b 7f       	andi	r24, 0xFB	; 251
     ba0:	89 bf       	out	0x39, r24	; 57
     ba2:	08 95       	ret
	}
	else
	{
		TIMSK = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
     ba4:	84 e0       	ldi	r24, 0x04	; 4
     ba6:	89 bf       	out	0x39, r24	; 57
     ba8:	08 95       	ret

00000baa <TimerGetIntervalPointerCfg>:
}

TimerSwInitParam* TimerGetIntervalPointerCfg(void)
{
	return &timerSwInitParam;
     baa:	85 ee       	ldi	r24, 0xE5	; 229
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	08 95       	ret

00000bb0 <s_IsValidHandle>:
    {
        return err;
    }

    return s_IsActive(handle);
}
     bb0:	00 97       	sbiw	r24, 0x00	; 0
     bb2:	31 f0       	breq	.+12     	; 0xbc0 <s_IsValidHandle+0x10>
     bb4:	fc 01       	movw	r30, r24
     bb6:	80 81       	ld	r24, Z
     bb8:	81 11       	cpse	r24, r1
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <s_IsValidHandle+0x14>
     bbc:	82 e1       	ldi	r24, 0x12	; 18
     bbe:	08 95       	ret
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	08 95       	ret
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	08 95       	ret

00000bc8 <s_IsValidAndActiveHandle>:
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	ec 01       	movw	r28, r24
     bce:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <s_IsValidHandle>
     bd2:	81 11       	cpse	r24, r1
     bd4:	06 c0       	rjmp	.+12     	; 0xbe2 <s_IsValidAndActiveHandle+0x1a>
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	81 11       	cpse	r24, r1
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <s_IsValidAndActiveHandle+0x18>
     bdc:	8f e0       	ldi	r24, 0x0F	; 15
     bde:	01 c0       	rjmp	.+2      	; 0xbe2 <s_IsValidAndActiveHandle+0x1a>
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	08 95       	ret

00000be8 <s_Init>:
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	fb 01       	movw	r30, r22
     bee:	21 e0       	ldi	r18, 0x01	; 1
     bf0:	20 83       	st	Z, r18
     bf2:	97 87       	std	Z+15, r25	; 0x0f
     bf4:	86 87       	std	Z+14, r24	; 0x0e
     bf6:	ec 01       	movw	r28, r24
     bf8:	88 81       	ld	r24, Y
     bfa:	99 81       	ldd	r25, Y+1	; 0x01
     bfc:	aa 81       	ldd	r26, Y+2	; 0x02
     bfe:	bb 81       	ldd	r27, Y+3	; 0x03
     c00:	82 87       	std	Z+10, r24	; 0x0a
     c02:	93 87       	std	Z+11, r25	; 0x0b
     c04:	a4 87       	std	Z+12, r26	; 0x0c
     c06:	b5 87       	std	Z+13, r27	; 0x0d
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	08 95       	ret

00000c10 <s_Startup>:
     c10:	fc 01       	movw	r30, r24
     c12:	a6 85       	ldd	r26, Z+14	; 0x0e
     c14:	b7 85       	ldd	r27, Z+15	; 0x0f
     c16:	8d 91       	ld	r24, X+
     c18:	9d 91       	ld	r25, X+
     c1a:	0d 90       	ld	r0, X+
     c1c:	bc 91       	ld	r27, X
     c1e:	a0 2d       	mov	r26, r0
     c20:	21 e0       	ldi	r18, 0x01	; 1
     c22:	20 83       	st	Z, r18
     c24:	21 83       	std	Z+1, r18	; 0x01
     c26:	82 83       	std	Z+2, r24	; 0x02
     c28:	93 83       	std	Z+3, r25	; 0x03
     c2a:	a4 83       	std	Z+4, r26	; 0x04
     c2c:	b5 83       	std	Z+5, r27	; 0x05
     c2e:	84 0f       	add	r24, r20
     c30:	95 1f       	adc	r25, r21
     c32:	a6 1f       	adc	r26, r22
     c34:	b7 1f       	adc	r27, r23
     c36:	86 83       	std	Z+6, r24	; 0x06
     c38:	97 83       	std	Z+7, r25	; 0x07
     c3a:	a0 87       	std	Z+8, r26	; 0x08
     c3c:	b1 87       	std	Z+9, r27	; 0x09
     c3e:	42 87       	std	Z+10, r20	; 0x0a
     c40:	53 87       	std	Z+11, r21	; 0x0b
     c42:	64 87       	std	Z+12, r22	; 0x0c
     c44:	75 87       	std	Z+13, r23	; 0x0d
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	08 95       	ret

00000c4a <s_GetTimerStateProp>:
     c4a:	cf 92       	push	r12
     c4c:	df 92       	push	r13
     c4e:	ef 92       	push	r14
     c50:	ff 92       	push	r15
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	fc 01       	movw	r30, r24
     c5c:	a6 85       	ldd	r26, Z+14	; 0x0e
     c5e:	b7 85       	ldd	r27, Z+15	; 0x0f
     c60:	cd 90       	ld	r12, X+
     c62:	dd 90       	ld	r13, X+
     c64:	ed 90       	ld	r14, X+
     c66:	fc 90       	ld	r15, X
     c68:	02 81       	ldd	r16, Z+2	; 0x02
     c6a:	13 81       	ldd	r17, Z+3	; 0x03
     c6c:	24 81       	ldd	r18, Z+4	; 0x04
     c6e:	35 81       	ldd	r19, Z+5	; 0x05
     c70:	86 81       	ldd	r24, Z+6	; 0x06
     c72:	97 81       	ldd	r25, Z+7	; 0x07
     c74:	a0 85       	ldd	r26, Z+8	; 0x08
     c76:	b1 85       	ldd	r27, Z+9	; 0x09
     c78:	08 17       	cp	r16, r24
     c7a:	19 07       	cpc	r17, r25
     c7c:	2a 07       	cpc	r18, r26
     c7e:	3b 07       	cpc	r19, r27
     c80:	80 f4       	brcc	.+32     	; 0xca2 <s_GetTimerStateProp+0x58>
     c82:	c8 16       	cp	r12, r24
     c84:	d9 06       	cpc	r13, r25
     c86:	ea 06       	cpc	r14, r26
     c88:	fb 06       	cpc	r15, r27
     c8a:	30 f5       	brcc	.+76     	; 0xcd8 <s_GetTimerStateProp+0x8e>
     c8c:	c0 16       	cp	r12, r16
     c8e:	d1 06       	cpc	r13, r17
     c90:	e2 06       	cpc	r14, r18
     c92:	f3 06       	cpc	r15, r19
     c94:	30 f1       	brcs	.+76     	; 0xce2 <s_GetTimerStateProp+0x98>
     c96:	8c 19       	sub	r24, r12
     c98:	9d 09       	sbc	r25, r13
     c9a:	ae 09       	sbc	r26, r14
     c9c:	bf 09       	sbc	r27, r15
     c9e:	10 e0       	ldi	r17, 0x00	; 0
     ca0:	29 c0       	rjmp	.+82     	; 0xcf4 <s_GetTimerStateProp+0xaa>
     ca2:	c8 16       	cp	r12, r24
     ca4:	d9 06       	cpc	r13, r25
     ca6:	ea 06       	cpc	r14, r26
     ca8:	fb 06       	cpc	r15, r27
     caa:	28 f0       	brcs	.+10     	; 0xcb6 <s_GetTimerStateProp+0x6c>
     cac:	c0 16       	cp	r12, r16
     cae:	d1 06       	cpc	r13, r17
     cb0:	e2 06       	cpc	r14, r18
     cb2:	f3 06       	cpc	r15, r19
     cb4:	d8 f0       	brcs	.+54     	; 0xcec <s_GetTimerStateProp+0xa2>
     cb6:	c8 16       	cp	r12, r24
     cb8:	d9 06       	cpc	r13, r25
     cba:	ea 06       	cpc	r14, r26
     cbc:	fb 06       	cpc	r15, r27
     cbe:	30 f4       	brcc	.+12     	; 0xccc <s_GetTimerStateProp+0x82>
     cc0:	8c 19       	sub	r24, r12
     cc2:	9d 09       	sbc	r25, r13
     cc4:	ae 09       	sbc	r26, r14
     cc6:	bf 09       	sbc	r27, r15
     cc8:	10 e0       	ldi	r17, 0x00	; 0
     cca:	14 c0       	rjmp	.+40     	; 0xcf4 <s_GetTimerStateProp+0xaa>
     ccc:	8c 19       	sub	r24, r12
     cce:	9d 09       	sbc	r25, r13
     cd0:	ae 09       	sbc	r26, r14
     cd2:	bf 09       	sbc	r27, r15
     cd4:	10 e0       	ldi	r17, 0x00	; 0
     cd6:	0e c0       	rjmp	.+28     	; 0xcf4 <s_GetTimerStateProp+0xaa>
     cd8:	10 e1       	ldi	r17, 0x10	; 16
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	dc 01       	movw	r26, r24
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <s_GetTimerStateProp+0xaa>
     ce2:	10 e1       	ldi	r17, 0x10	; 16
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	dc 01       	movw	r26, r24
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <s_GetTimerStateProp+0xaa>
     cec:	10 e1       	ldi	r17, 0x10	; 16
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	dc 01       	movw	r26, r24
     cf4:	41 15       	cp	r20, r1
     cf6:	51 05       	cpc	r21, r1
     cf8:	29 f0       	breq	.+10     	; 0xd04 <s_GetTimerStateProp+0xba>
     cfa:	ea 01       	movw	r28, r20
     cfc:	88 83       	st	Y, r24
     cfe:	99 83       	std	Y+1, r25	; 0x01
     d00:	aa 83       	std	Y+2, r26	; 0x02
     d02:	bb 83       	std	Y+3, r27	; 0x03
     d04:	61 15       	cp	r22, r1
     d06:	71 05       	cpc	r23, r1
     d08:	69 f0       	breq	.+26     	; 0xd24 <s_GetTimerStateProp+0xda>
     d0a:	eb 01       	movw	r28, r22
     d0c:	22 81       	ldd	r18, Z+2	; 0x02
     d0e:	33 81       	ldd	r19, Z+3	; 0x03
     d10:	44 81       	ldd	r20, Z+4	; 0x04
     d12:	55 81       	ldd	r21, Z+5	; 0x05
     d14:	c7 01       	movw	r24, r14
     d16:	b6 01       	movw	r22, r12
     d18:	0e 94 d2 06 	call	0xda4	; 0xda4 <TimerSwBasePassed>
     d1c:	68 83       	st	Y, r22
     d1e:	79 83       	std	Y+1, r23	; 0x01
     d20:	8a 83       	std	Y+2, r24	; 0x02
     d22:	9b 83       	std	Y+3, r25	; 0x03
     d24:	81 2f       	mov	r24, r17
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	ff 90       	pop	r15
     d30:	ef 90       	pop	r14
     d32:	df 90       	pop	r13
     d34:	cf 90       	pop	r12
     d36:	08 95       	ret

00000d38 <TimerSwInit>:
     d38:	00 97       	sbiw	r24, 0x00	; 0
     d3a:	31 f0       	breq	.+12     	; 0xd48 <TimerSwInit+0x10>
     d3c:	61 15       	cp	r22, r1
     d3e:	71 05       	cpc	r23, r1
     d40:	29 f0       	breq	.+10     	; 0xd4c <TimerSwInit+0x14>
     d42:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <s_Init>
     d46:	08 95       	ret
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	08 95       	ret
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	08 95       	ret

00000d50 <TimerSwStartup>:
     d50:	cf 92       	push	r12
     d52:	df 92       	push	r13
     d54:	ef 92       	push	r14
     d56:	ff 92       	push	r15
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	ec 01       	movw	r28, r24
     d5e:	6a 01       	movw	r12, r20
     d60:	7b 01       	movw	r14, r22
     d62:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <s_IsValidHandle>
     d66:	81 11       	cpse	r24, r1
     d68:	05 c0       	rjmp	.+10     	; 0xd74 <TimerSwStartup+0x24>
     d6a:	b7 01       	movw	r22, r14
     d6c:	a6 01       	movw	r20, r12
     d6e:	ce 01       	movw	r24, r28
     d70:	0e 94 08 06 	call	0xc10	; 0xc10 <s_Startup>
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	ff 90       	pop	r15
     d7a:	ef 90       	pop	r14
     d7c:	df 90       	pop	r13
     d7e:	cf 90       	pop	r12
     d80:	08 95       	ret

00000d82 <TimerSwIsExpired>:

StatusError TimerSwIsExpired(
        const TimerSwHandle * const handle)
{
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	ec 01       	movw	r28, r24
    const StatusError err = s_IsValidAndActiveHandle(handle);
     d88:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <s_IsValidAndActiveHandle>

    if (StatusErrNone != err)
     d8c:	81 11       	cpse	r24, r1
     d8e:	07 c0       	rjmp	.+14     	; 0xd9e <TimerSwIsExpired+0x1c>
    {
        return err;
    }

    return s_GetTimerStateProp(
     d90:	40 e0       	ldi	r20, 0x00	; 0
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	ce 01       	movw	r24, r28
     d9a:	0e 94 25 06 	call	0xc4a	; 0xc4a <s_GetTimerStateProp>
            handle,
            NULL,
            NULL);
}
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	08 95       	ret

00000da4 <TimerSwBasePassed>:
 ******************************************************************************/
TimerSwValue TimerSwBasePassed(
        const TimerSwValue timeCurr,
        const TimerSwValue timeStart)
{
    if (timeCurr >= timeStart)
     da4:	62 17       	cp	r22, r18
     da6:	73 07       	cpc	r23, r19
     da8:	84 07       	cpc	r24, r20
     daa:	95 07       	cpc	r25, r21
     dac:	28 f0       	brcs	.+10     	; 0xdb8 <TimerSwBasePassed+0x14>
    {
        return timeCurr - timeStart;
     dae:	62 1b       	sub	r22, r18
     db0:	73 0b       	sbc	r23, r19
     db2:	84 0b       	sbc	r24, r20
     db4:	95 0b       	sbc	r25, r21
     db6:	08 95       	ret
    }
    else
    {
        return (TIMER_SW_VALUE_MAX - timeStart) + 1 + timeCurr;
     db8:	62 1b       	sub	r22, r18
     dba:	73 0b       	sbc	r23, r19
     dbc:	84 0b       	sbc	r24, r20
     dbe:	95 0b       	sbc	r25, r21
    }
}
     dc0:	08 95       	ret

00000dc2 <__subsf3>:
     dc2:	50 58       	subi	r21, 0x80	; 128

00000dc4 <__addsf3>:
     dc4:	bb 27       	eor	r27, r27
     dc6:	aa 27       	eor	r26, r26
     dc8:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__addsf3x>
     dcc:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__fp_round>
     dd0:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fp_pscA>
     dd4:	38 f0       	brcs	.+14     	; 0xde4 <__addsf3+0x20>
     dd6:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fp_pscB>
     dda:	20 f0       	brcs	.+8      	; 0xde4 <__addsf3+0x20>
     ddc:	39 f4       	brne	.+14     	; 0xdec <__addsf3+0x28>
     dde:	9f 3f       	cpi	r25, 0xFF	; 255
     de0:	19 f4       	brne	.+6      	; 0xde8 <__addsf3+0x24>
     de2:	26 f4       	brtc	.+8      	; 0xdec <__addsf3+0x28>
     de4:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__fp_nan>
     de8:	0e f4       	brtc	.+2      	; 0xdec <__addsf3+0x28>
     dea:	e0 95       	com	r30
     dec:	e7 fb       	bst	r30, 7
     dee:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__fp_inf>

00000df2 <__addsf3x>:
     df2:	e9 2f       	mov	r30, r25
     df4:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_split3>
     df8:	58 f3       	brcs	.-42     	; 0xdd0 <__addsf3+0xc>
     dfa:	ba 17       	cp	r27, r26
     dfc:	62 07       	cpc	r22, r18
     dfe:	73 07       	cpc	r23, r19
     e00:	84 07       	cpc	r24, r20
     e02:	95 07       	cpc	r25, r21
     e04:	20 f0       	brcs	.+8      	; 0xe0e <__addsf3x+0x1c>
     e06:	79 f4       	brne	.+30     	; 0xe26 <__addsf3x+0x34>
     e08:	a6 f5       	brtc	.+104    	; 0xe72 <__addsf3x+0x80>
     e0a:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__fp_zero>
     e0e:	0e f4       	brtc	.+2      	; 0xe12 <__addsf3x+0x20>
     e10:	e0 95       	com	r30
     e12:	0b 2e       	mov	r0, r27
     e14:	ba 2f       	mov	r27, r26
     e16:	a0 2d       	mov	r26, r0
     e18:	0b 01       	movw	r0, r22
     e1a:	b9 01       	movw	r22, r18
     e1c:	90 01       	movw	r18, r0
     e1e:	0c 01       	movw	r0, r24
     e20:	ca 01       	movw	r24, r20
     e22:	a0 01       	movw	r20, r0
     e24:	11 24       	eor	r1, r1
     e26:	ff 27       	eor	r31, r31
     e28:	59 1b       	sub	r21, r25
     e2a:	99 f0       	breq	.+38     	; 0xe52 <__addsf3x+0x60>
     e2c:	59 3f       	cpi	r21, 0xF9	; 249
     e2e:	50 f4       	brcc	.+20     	; 0xe44 <__addsf3x+0x52>
     e30:	50 3e       	cpi	r21, 0xE0	; 224
     e32:	68 f1       	brcs	.+90     	; 0xe8e <__addsf3x+0x9c>
     e34:	1a 16       	cp	r1, r26
     e36:	f0 40       	sbci	r31, 0x00	; 0
     e38:	a2 2f       	mov	r26, r18
     e3a:	23 2f       	mov	r18, r19
     e3c:	34 2f       	mov	r19, r20
     e3e:	44 27       	eor	r20, r20
     e40:	58 5f       	subi	r21, 0xF8	; 248
     e42:	f3 cf       	rjmp	.-26     	; 0xe2a <__addsf3x+0x38>
     e44:	46 95       	lsr	r20
     e46:	37 95       	ror	r19
     e48:	27 95       	ror	r18
     e4a:	a7 95       	ror	r26
     e4c:	f0 40       	sbci	r31, 0x00	; 0
     e4e:	53 95       	inc	r21
     e50:	c9 f7       	brne	.-14     	; 0xe44 <__addsf3x+0x52>
     e52:	7e f4       	brtc	.+30     	; 0xe72 <__addsf3x+0x80>
     e54:	1f 16       	cp	r1, r31
     e56:	ba 0b       	sbc	r27, r26
     e58:	62 0b       	sbc	r22, r18
     e5a:	73 0b       	sbc	r23, r19
     e5c:	84 0b       	sbc	r24, r20
     e5e:	ba f0       	brmi	.+46     	; 0xe8e <__addsf3x+0x9c>
     e60:	91 50       	subi	r25, 0x01	; 1
     e62:	a1 f0       	breq	.+40     	; 0xe8c <__addsf3x+0x9a>
     e64:	ff 0f       	add	r31, r31
     e66:	bb 1f       	adc	r27, r27
     e68:	66 1f       	adc	r22, r22
     e6a:	77 1f       	adc	r23, r23
     e6c:	88 1f       	adc	r24, r24
     e6e:	c2 f7       	brpl	.-16     	; 0xe60 <__addsf3x+0x6e>
     e70:	0e c0       	rjmp	.+28     	; 0xe8e <__addsf3x+0x9c>
     e72:	ba 0f       	add	r27, r26
     e74:	62 1f       	adc	r22, r18
     e76:	73 1f       	adc	r23, r19
     e78:	84 1f       	adc	r24, r20
     e7a:	48 f4       	brcc	.+18     	; 0xe8e <__addsf3x+0x9c>
     e7c:	87 95       	ror	r24
     e7e:	77 95       	ror	r23
     e80:	67 95       	ror	r22
     e82:	b7 95       	ror	r27
     e84:	f7 95       	ror	r31
     e86:	9e 3f       	cpi	r25, 0xFE	; 254
     e88:	08 f0       	brcs	.+2      	; 0xe8c <__addsf3x+0x9a>
     e8a:	b0 cf       	rjmp	.-160    	; 0xdec <__addsf3+0x28>
     e8c:	93 95       	inc	r25
     e8e:	88 0f       	add	r24, r24
     e90:	08 f0       	brcs	.+2      	; 0xe94 <__addsf3x+0xa2>
     e92:	99 27       	eor	r25, r25
     e94:	ee 0f       	add	r30, r30
     e96:	97 95       	ror	r25
     e98:	87 95       	ror	r24
     e9a:	08 95       	ret

00000e9c <__cmpsf2>:
     e9c:	0e 94 38 08 	call	0x1070	; 0x1070 <__fp_cmp>
     ea0:	08 f4       	brcc	.+2      	; 0xea4 <__cmpsf2+0x8>
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	08 95       	ret

00000ea6 <__divsf3>:
     ea6:	0e 94 67 07 	call	0xece	; 0xece <__divsf3x>
     eaa:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__fp_round>
     eae:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fp_pscB>
     eb2:	58 f0       	brcs	.+22     	; 0xeca <__divsf3+0x24>
     eb4:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fp_pscA>
     eb8:	40 f0       	brcs	.+16     	; 0xeca <__divsf3+0x24>
     eba:	29 f4       	brne	.+10     	; 0xec6 <__divsf3+0x20>
     ebc:	5f 3f       	cpi	r21, 0xFF	; 255
     ebe:	29 f0       	breq	.+10     	; 0xeca <__divsf3+0x24>
     ec0:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__fp_inf>
     ec4:	51 11       	cpse	r21, r1
     ec6:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__fp_szero>
     eca:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__fp_nan>

00000ece <__divsf3x>:
     ece:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_split3>
     ed2:	68 f3       	brcs	.-38     	; 0xeae <__divsf3+0x8>

00000ed4 <__divsf3_pse>:
     ed4:	99 23       	and	r25, r25
     ed6:	b1 f3       	breq	.-20     	; 0xec4 <__divsf3+0x1e>
     ed8:	55 23       	and	r21, r21
     eda:	91 f3       	breq	.-28     	; 0xec0 <__divsf3+0x1a>
     edc:	95 1b       	sub	r25, r21
     ede:	55 0b       	sbc	r21, r21
     ee0:	bb 27       	eor	r27, r27
     ee2:	aa 27       	eor	r26, r26
     ee4:	62 17       	cp	r22, r18
     ee6:	73 07       	cpc	r23, r19
     ee8:	84 07       	cpc	r24, r20
     eea:	38 f0       	brcs	.+14     	; 0xefa <__divsf3_pse+0x26>
     eec:	9f 5f       	subi	r25, 0xFF	; 255
     eee:	5f 4f       	sbci	r21, 0xFF	; 255
     ef0:	22 0f       	add	r18, r18
     ef2:	33 1f       	adc	r19, r19
     ef4:	44 1f       	adc	r20, r20
     ef6:	aa 1f       	adc	r26, r26
     ef8:	a9 f3       	breq	.-22     	; 0xee4 <__divsf3_pse+0x10>
     efa:	35 d0       	rcall	.+106    	; 0xf66 <__divsf3_pse+0x92>
     efc:	0e 2e       	mov	r0, r30
     efe:	3a f0       	brmi	.+14     	; 0xf0e <__divsf3_pse+0x3a>
     f00:	e0 e8       	ldi	r30, 0x80	; 128
     f02:	32 d0       	rcall	.+100    	; 0xf68 <__divsf3_pse+0x94>
     f04:	91 50       	subi	r25, 0x01	; 1
     f06:	50 40       	sbci	r21, 0x00	; 0
     f08:	e6 95       	lsr	r30
     f0a:	00 1c       	adc	r0, r0
     f0c:	ca f7       	brpl	.-14     	; 0xf00 <__divsf3_pse+0x2c>
     f0e:	2b d0       	rcall	.+86     	; 0xf66 <__divsf3_pse+0x92>
     f10:	fe 2f       	mov	r31, r30
     f12:	29 d0       	rcall	.+82     	; 0xf66 <__divsf3_pse+0x92>
     f14:	66 0f       	add	r22, r22
     f16:	77 1f       	adc	r23, r23
     f18:	88 1f       	adc	r24, r24
     f1a:	bb 1f       	adc	r27, r27
     f1c:	26 17       	cp	r18, r22
     f1e:	37 07       	cpc	r19, r23
     f20:	48 07       	cpc	r20, r24
     f22:	ab 07       	cpc	r26, r27
     f24:	b0 e8       	ldi	r27, 0x80	; 128
     f26:	09 f0       	breq	.+2      	; 0xf2a <__divsf3_pse+0x56>
     f28:	bb 0b       	sbc	r27, r27
     f2a:	80 2d       	mov	r24, r0
     f2c:	bf 01       	movw	r22, r30
     f2e:	ff 27       	eor	r31, r31
     f30:	93 58       	subi	r25, 0x83	; 131
     f32:	5f 4f       	sbci	r21, 0xFF	; 255
     f34:	3a f0       	brmi	.+14     	; 0xf44 <__divsf3_pse+0x70>
     f36:	9e 3f       	cpi	r25, 0xFE	; 254
     f38:	51 05       	cpc	r21, r1
     f3a:	78 f0       	brcs	.+30     	; 0xf5a <__divsf3_pse+0x86>
     f3c:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__fp_inf>
     f40:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__fp_szero>
     f44:	5f 3f       	cpi	r21, 0xFF	; 255
     f46:	e4 f3       	brlt	.-8      	; 0xf40 <__divsf3_pse+0x6c>
     f48:	98 3e       	cpi	r25, 0xE8	; 232
     f4a:	d4 f3       	brlt	.-12     	; 0xf40 <__divsf3_pse+0x6c>
     f4c:	86 95       	lsr	r24
     f4e:	77 95       	ror	r23
     f50:	67 95       	ror	r22
     f52:	b7 95       	ror	r27
     f54:	f7 95       	ror	r31
     f56:	9f 5f       	subi	r25, 0xFF	; 255
     f58:	c9 f7       	brne	.-14     	; 0xf4c <__divsf3_pse+0x78>
     f5a:	88 0f       	add	r24, r24
     f5c:	91 1d       	adc	r25, r1
     f5e:	96 95       	lsr	r25
     f60:	87 95       	ror	r24
     f62:	97 f9       	bld	r25, 7
     f64:	08 95       	ret
     f66:	e1 e0       	ldi	r30, 0x01	; 1
     f68:	66 0f       	add	r22, r22
     f6a:	77 1f       	adc	r23, r23
     f6c:	88 1f       	adc	r24, r24
     f6e:	bb 1f       	adc	r27, r27
     f70:	62 17       	cp	r22, r18
     f72:	73 07       	cpc	r23, r19
     f74:	84 07       	cpc	r24, r20
     f76:	ba 07       	cpc	r27, r26
     f78:	20 f0       	brcs	.+8      	; 0xf82 <__divsf3_pse+0xae>
     f7a:	62 1b       	sub	r22, r18
     f7c:	73 0b       	sbc	r23, r19
     f7e:	84 0b       	sbc	r24, r20
     f80:	ba 0b       	sbc	r27, r26
     f82:	ee 1f       	adc	r30, r30
     f84:	88 f7       	brcc	.-30     	; 0xf68 <__divsf3_pse+0x94>
     f86:	e0 95       	com	r30
     f88:	08 95       	ret

00000f8a <__fixsfsi>:
     f8a:	0e 94 cc 07 	call	0xf98	; 0xf98 <__fixunssfsi>
     f8e:	68 94       	set
     f90:	b1 11       	cpse	r27, r1
     f92:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__fp_szero>
     f96:	08 95       	ret

00000f98 <__fixunssfsi>:
     f98:	0e 94 8c 08 	call	0x1118	; 0x1118 <__fp_splitA>
     f9c:	88 f0       	brcs	.+34     	; 0xfc0 <__fixunssfsi+0x28>
     f9e:	9f 57       	subi	r25, 0x7F	; 127
     fa0:	98 f0       	brcs	.+38     	; 0xfc8 <__fixunssfsi+0x30>
     fa2:	b9 2f       	mov	r27, r25
     fa4:	99 27       	eor	r25, r25
     fa6:	b7 51       	subi	r27, 0x17	; 23
     fa8:	b0 f0       	brcs	.+44     	; 0xfd6 <__fixunssfsi+0x3e>
     faa:	e1 f0       	breq	.+56     	; 0xfe4 <__fixunssfsi+0x4c>
     fac:	66 0f       	add	r22, r22
     fae:	77 1f       	adc	r23, r23
     fb0:	88 1f       	adc	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	1a f0       	brmi	.+6      	; 0xfbc <__fixunssfsi+0x24>
     fb6:	ba 95       	dec	r27
     fb8:	c9 f7       	brne	.-14     	; 0xfac <__fixunssfsi+0x14>
     fba:	14 c0       	rjmp	.+40     	; 0xfe4 <__fixunssfsi+0x4c>
     fbc:	b1 30       	cpi	r27, 0x01	; 1
     fbe:	91 f0       	breq	.+36     	; 0xfe4 <__fixunssfsi+0x4c>
     fc0:	0e 94 a6 08 	call	0x114c	; 0x114c <__fp_zero>
     fc4:	b1 e0       	ldi	r27, 0x01	; 1
     fc6:	08 95       	ret
     fc8:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__fp_zero>
     fcc:	67 2f       	mov	r22, r23
     fce:	78 2f       	mov	r23, r24
     fd0:	88 27       	eor	r24, r24
     fd2:	b8 5f       	subi	r27, 0xF8	; 248
     fd4:	39 f0       	breq	.+14     	; 0xfe4 <__fixunssfsi+0x4c>
     fd6:	b9 3f       	cpi	r27, 0xF9	; 249
     fd8:	cc f3       	brlt	.-14     	; 0xfcc <__fixunssfsi+0x34>
     fda:	86 95       	lsr	r24
     fdc:	77 95       	ror	r23
     fde:	67 95       	ror	r22
     fe0:	b3 95       	inc	r27
     fe2:	d9 f7       	brne	.-10     	; 0xfda <__fixunssfsi+0x42>
     fe4:	3e f4       	brtc	.+14     	; 0xff4 <__fixunssfsi+0x5c>
     fe6:	90 95       	com	r25
     fe8:	80 95       	com	r24
     fea:	70 95       	com	r23
     fec:	61 95       	neg	r22
     fee:	7f 4f       	sbci	r23, 0xFF	; 255
     ff0:	8f 4f       	sbci	r24, 0xFF	; 255
     ff2:	9f 4f       	sbci	r25, 0xFF	; 255
     ff4:	08 95       	ret

00000ff6 <__floatunsisf>:
     ff6:	e8 94       	clt
     ff8:	09 c0       	rjmp	.+18     	; 0x100c <__floatsisf+0x12>

00000ffa <__floatsisf>:
     ffa:	97 fb       	bst	r25, 7
     ffc:	3e f4       	brtc	.+14     	; 0x100c <__floatsisf+0x12>
     ffe:	90 95       	com	r25
    1000:	80 95       	com	r24
    1002:	70 95       	com	r23
    1004:	61 95       	neg	r22
    1006:	7f 4f       	sbci	r23, 0xFF	; 255
    1008:	8f 4f       	sbci	r24, 0xFF	; 255
    100a:	9f 4f       	sbci	r25, 0xFF	; 255
    100c:	99 23       	and	r25, r25
    100e:	a9 f0       	breq	.+42     	; 0x103a <__floatsisf+0x40>
    1010:	f9 2f       	mov	r31, r25
    1012:	96 e9       	ldi	r25, 0x96	; 150
    1014:	bb 27       	eor	r27, r27
    1016:	93 95       	inc	r25
    1018:	f6 95       	lsr	r31
    101a:	87 95       	ror	r24
    101c:	77 95       	ror	r23
    101e:	67 95       	ror	r22
    1020:	b7 95       	ror	r27
    1022:	f1 11       	cpse	r31, r1
    1024:	f8 cf       	rjmp	.-16     	; 0x1016 <__floatsisf+0x1c>
    1026:	fa f4       	brpl	.+62     	; 0x1066 <__floatsisf+0x6c>
    1028:	bb 0f       	add	r27, r27
    102a:	11 f4       	brne	.+4      	; 0x1030 <__floatsisf+0x36>
    102c:	60 ff       	sbrs	r22, 0
    102e:	1b c0       	rjmp	.+54     	; 0x1066 <__floatsisf+0x6c>
    1030:	6f 5f       	subi	r22, 0xFF	; 255
    1032:	7f 4f       	sbci	r23, 0xFF	; 255
    1034:	8f 4f       	sbci	r24, 0xFF	; 255
    1036:	9f 4f       	sbci	r25, 0xFF	; 255
    1038:	16 c0       	rjmp	.+44     	; 0x1066 <__floatsisf+0x6c>
    103a:	88 23       	and	r24, r24
    103c:	11 f0       	breq	.+4      	; 0x1042 <__floatsisf+0x48>
    103e:	96 e9       	ldi	r25, 0x96	; 150
    1040:	11 c0       	rjmp	.+34     	; 0x1064 <__floatsisf+0x6a>
    1042:	77 23       	and	r23, r23
    1044:	21 f0       	breq	.+8      	; 0x104e <__floatsisf+0x54>
    1046:	9e e8       	ldi	r25, 0x8E	; 142
    1048:	87 2f       	mov	r24, r23
    104a:	76 2f       	mov	r23, r22
    104c:	05 c0       	rjmp	.+10     	; 0x1058 <__floatsisf+0x5e>
    104e:	66 23       	and	r22, r22
    1050:	71 f0       	breq	.+28     	; 0x106e <__floatsisf+0x74>
    1052:	96 e8       	ldi	r25, 0x86	; 134
    1054:	86 2f       	mov	r24, r22
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	60 e0       	ldi	r22, 0x00	; 0
    105a:	2a f0       	brmi	.+10     	; 0x1066 <__floatsisf+0x6c>
    105c:	9a 95       	dec	r25
    105e:	66 0f       	add	r22, r22
    1060:	77 1f       	adc	r23, r23
    1062:	88 1f       	adc	r24, r24
    1064:	da f7       	brpl	.-10     	; 0x105c <__floatsisf+0x62>
    1066:	88 0f       	add	r24, r24
    1068:	96 95       	lsr	r25
    106a:	87 95       	ror	r24
    106c:	97 f9       	bld	r25, 7
    106e:	08 95       	ret

00001070 <__fp_cmp>:
    1070:	99 0f       	add	r25, r25
    1072:	00 08       	sbc	r0, r0
    1074:	55 0f       	add	r21, r21
    1076:	aa 0b       	sbc	r26, r26
    1078:	e0 e8       	ldi	r30, 0x80	; 128
    107a:	fe ef       	ldi	r31, 0xFE	; 254
    107c:	16 16       	cp	r1, r22
    107e:	17 06       	cpc	r1, r23
    1080:	e8 07       	cpc	r30, r24
    1082:	f9 07       	cpc	r31, r25
    1084:	c0 f0       	brcs	.+48     	; 0x10b6 <__fp_cmp+0x46>
    1086:	12 16       	cp	r1, r18
    1088:	13 06       	cpc	r1, r19
    108a:	e4 07       	cpc	r30, r20
    108c:	f5 07       	cpc	r31, r21
    108e:	98 f0       	brcs	.+38     	; 0x10b6 <__fp_cmp+0x46>
    1090:	62 1b       	sub	r22, r18
    1092:	73 0b       	sbc	r23, r19
    1094:	84 0b       	sbc	r24, r20
    1096:	95 0b       	sbc	r25, r21
    1098:	39 f4       	brne	.+14     	; 0x10a8 <__fp_cmp+0x38>
    109a:	0a 26       	eor	r0, r26
    109c:	61 f0       	breq	.+24     	; 0x10b6 <__fp_cmp+0x46>
    109e:	23 2b       	or	r18, r19
    10a0:	24 2b       	or	r18, r20
    10a2:	25 2b       	or	r18, r21
    10a4:	21 f4       	brne	.+8      	; 0x10ae <__fp_cmp+0x3e>
    10a6:	08 95       	ret
    10a8:	0a 26       	eor	r0, r26
    10aa:	09 f4       	brne	.+2      	; 0x10ae <__fp_cmp+0x3e>
    10ac:	a1 40       	sbci	r26, 0x01	; 1
    10ae:	a6 95       	lsr	r26
    10b0:	8f ef       	ldi	r24, 0xFF	; 255
    10b2:	81 1d       	adc	r24, r1
    10b4:	81 1d       	adc	r24, r1
    10b6:	08 95       	ret

000010b8 <__fp_inf>:
    10b8:	97 f9       	bld	r25, 7
    10ba:	9f 67       	ori	r25, 0x7F	; 127
    10bc:	80 e8       	ldi	r24, 0x80	; 128
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	08 95       	ret

000010c4 <__fp_nan>:
    10c4:	9f ef       	ldi	r25, 0xFF	; 255
    10c6:	80 ec       	ldi	r24, 0xC0	; 192
    10c8:	08 95       	ret

000010ca <__fp_pscA>:
    10ca:	00 24       	eor	r0, r0
    10cc:	0a 94       	dec	r0
    10ce:	16 16       	cp	r1, r22
    10d0:	17 06       	cpc	r1, r23
    10d2:	18 06       	cpc	r1, r24
    10d4:	09 06       	cpc	r0, r25
    10d6:	08 95       	ret

000010d8 <__fp_pscB>:
    10d8:	00 24       	eor	r0, r0
    10da:	0a 94       	dec	r0
    10dc:	12 16       	cp	r1, r18
    10de:	13 06       	cpc	r1, r19
    10e0:	14 06       	cpc	r1, r20
    10e2:	05 06       	cpc	r0, r21
    10e4:	08 95       	ret

000010e6 <__fp_round>:
    10e6:	09 2e       	mov	r0, r25
    10e8:	03 94       	inc	r0
    10ea:	00 0c       	add	r0, r0
    10ec:	11 f4       	brne	.+4      	; 0x10f2 <__fp_round+0xc>
    10ee:	88 23       	and	r24, r24
    10f0:	52 f0       	brmi	.+20     	; 0x1106 <__fp_round+0x20>
    10f2:	bb 0f       	add	r27, r27
    10f4:	40 f4       	brcc	.+16     	; 0x1106 <__fp_round+0x20>
    10f6:	bf 2b       	or	r27, r31
    10f8:	11 f4       	brne	.+4      	; 0x10fe <__fp_round+0x18>
    10fa:	60 ff       	sbrs	r22, 0
    10fc:	04 c0       	rjmp	.+8      	; 0x1106 <__fp_round+0x20>
    10fe:	6f 5f       	subi	r22, 0xFF	; 255
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	8f 4f       	sbci	r24, 0xFF	; 255
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	08 95       	ret

00001108 <__fp_split3>:
    1108:	57 fd       	sbrc	r21, 7
    110a:	90 58       	subi	r25, 0x80	; 128
    110c:	44 0f       	add	r20, r20
    110e:	55 1f       	adc	r21, r21
    1110:	59 f0       	breq	.+22     	; 0x1128 <__fp_splitA+0x10>
    1112:	5f 3f       	cpi	r21, 0xFF	; 255
    1114:	71 f0       	breq	.+28     	; 0x1132 <__fp_splitA+0x1a>
    1116:	47 95       	ror	r20

00001118 <__fp_splitA>:
    1118:	88 0f       	add	r24, r24
    111a:	97 fb       	bst	r25, 7
    111c:	99 1f       	adc	r25, r25
    111e:	61 f0       	breq	.+24     	; 0x1138 <__fp_splitA+0x20>
    1120:	9f 3f       	cpi	r25, 0xFF	; 255
    1122:	79 f0       	breq	.+30     	; 0x1142 <__fp_splitA+0x2a>
    1124:	87 95       	ror	r24
    1126:	08 95       	ret
    1128:	12 16       	cp	r1, r18
    112a:	13 06       	cpc	r1, r19
    112c:	14 06       	cpc	r1, r20
    112e:	55 1f       	adc	r21, r21
    1130:	f2 cf       	rjmp	.-28     	; 0x1116 <__fp_split3+0xe>
    1132:	46 95       	lsr	r20
    1134:	f1 df       	rcall	.-30     	; 0x1118 <__fp_splitA>
    1136:	08 c0       	rjmp	.+16     	; 0x1148 <__fp_splitA+0x30>
    1138:	16 16       	cp	r1, r22
    113a:	17 06       	cpc	r1, r23
    113c:	18 06       	cpc	r1, r24
    113e:	99 1f       	adc	r25, r25
    1140:	f1 cf       	rjmp	.-30     	; 0x1124 <__fp_splitA+0xc>
    1142:	86 95       	lsr	r24
    1144:	71 05       	cpc	r23, r1
    1146:	61 05       	cpc	r22, r1
    1148:	08 94       	sec
    114a:	08 95       	ret

0000114c <__fp_zero>:
    114c:	e8 94       	clt

0000114e <__fp_szero>:
    114e:	bb 27       	eor	r27, r27
    1150:	66 27       	eor	r22, r22
    1152:	77 27       	eor	r23, r23
    1154:	cb 01       	movw	r24, r22
    1156:	97 f9       	bld	r25, 7
    1158:	08 95       	ret

0000115a <__gesf2>:
    115a:	0e 94 38 08 	call	0x1070	; 0x1070 <__fp_cmp>
    115e:	08 f4       	brcc	.+2      	; 0x1162 <__gesf2+0x8>
    1160:	8f ef       	ldi	r24, 0xFF	; 255
    1162:	08 95       	ret

00001164 <__mulsf3>:
    1164:	0e 94 c5 08 	call	0x118a	; 0x118a <__mulsf3x>
    1168:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__fp_round>
    116c:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fp_pscA>
    1170:	38 f0       	brcs	.+14     	; 0x1180 <__mulsf3+0x1c>
    1172:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fp_pscB>
    1176:	20 f0       	brcs	.+8      	; 0x1180 <__mulsf3+0x1c>
    1178:	95 23       	and	r25, r21
    117a:	11 f0       	breq	.+4      	; 0x1180 <__mulsf3+0x1c>
    117c:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__fp_inf>
    1180:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__fp_nan>
    1184:	11 24       	eor	r1, r1
    1186:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__fp_szero>

0000118a <__mulsf3x>:
    118a:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_split3>
    118e:	70 f3       	brcs	.-36     	; 0x116c <__mulsf3+0x8>

00001190 <__mulsf3_pse>:
    1190:	95 9f       	mul	r25, r21
    1192:	c1 f3       	breq	.-16     	; 0x1184 <__mulsf3+0x20>
    1194:	95 0f       	add	r25, r21
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	55 1f       	adc	r21, r21
    119a:	62 9f       	mul	r22, r18
    119c:	f0 01       	movw	r30, r0
    119e:	72 9f       	mul	r23, r18
    11a0:	bb 27       	eor	r27, r27
    11a2:	f0 0d       	add	r31, r0
    11a4:	b1 1d       	adc	r27, r1
    11a6:	63 9f       	mul	r22, r19
    11a8:	aa 27       	eor	r26, r26
    11aa:	f0 0d       	add	r31, r0
    11ac:	b1 1d       	adc	r27, r1
    11ae:	aa 1f       	adc	r26, r26
    11b0:	64 9f       	mul	r22, r20
    11b2:	66 27       	eor	r22, r22
    11b4:	b0 0d       	add	r27, r0
    11b6:	a1 1d       	adc	r26, r1
    11b8:	66 1f       	adc	r22, r22
    11ba:	82 9f       	mul	r24, r18
    11bc:	22 27       	eor	r18, r18
    11be:	b0 0d       	add	r27, r0
    11c0:	a1 1d       	adc	r26, r1
    11c2:	62 1f       	adc	r22, r18
    11c4:	73 9f       	mul	r23, r19
    11c6:	b0 0d       	add	r27, r0
    11c8:	a1 1d       	adc	r26, r1
    11ca:	62 1f       	adc	r22, r18
    11cc:	83 9f       	mul	r24, r19
    11ce:	a0 0d       	add	r26, r0
    11d0:	61 1d       	adc	r22, r1
    11d2:	22 1f       	adc	r18, r18
    11d4:	74 9f       	mul	r23, r20
    11d6:	33 27       	eor	r19, r19
    11d8:	a0 0d       	add	r26, r0
    11da:	61 1d       	adc	r22, r1
    11dc:	23 1f       	adc	r18, r19
    11de:	84 9f       	mul	r24, r20
    11e0:	60 0d       	add	r22, r0
    11e2:	21 1d       	adc	r18, r1
    11e4:	82 2f       	mov	r24, r18
    11e6:	76 2f       	mov	r23, r22
    11e8:	6a 2f       	mov	r22, r26
    11ea:	11 24       	eor	r1, r1
    11ec:	9f 57       	subi	r25, 0x7F	; 127
    11ee:	50 40       	sbci	r21, 0x00	; 0
    11f0:	9a f0       	brmi	.+38     	; 0x1218 <__mulsf3_pse+0x88>
    11f2:	f1 f0       	breq	.+60     	; 0x1230 <__mulsf3_pse+0xa0>
    11f4:	88 23       	and	r24, r24
    11f6:	4a f0       	brmi	.+18     	; 0x120a <__mulsf3_pse+0x7a>
    11f8:	ee 0f       	add	r30, r30
    11fa:	ff 1f       	adc	r31, r31
    11fc:	bb 1f       	adc	r27, r27
    11fe:	66 1f       	adc	r22, r22
    1200:	77 1f       	adc	r23, r23
    1202:	88 1f       	adc	r24, r24
    1204:	91 50       	subi	r25, 0x01	; 1
    1206:	50 40       	sbci	r21, 0x00	; 0
    1208:	a9 f7       	brne	.-22     	; 0x11f4 <__mulsf3_pse+0x64>
    120a:	9e 3f       	cpi	r25, 0xFE	; 254
    120c:	51 05       	cpc	r21, r1
    120e:	80 f0       	brcs	.+32     	; 0x1230 <__mulsf3_pse+0xa0>
    1210:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__fp_inf>
    1214:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__fp_szero>
    1218:	5f 3f       	cpi	r21, 0xFF	; 255
    121a:	e4 f3       	brlt	.-8      	; 0x1214 <__mulsf3_pse+0x84>
    121c:	98 3e       	cpi	r25, 0xE8	; 232
    121e:	d4 f3       	brlt	.-12     	; 0x1214 <__mulsf3_pse+0x84>
    1220:	86 95       	lsr	r24
    1222:	77 95       	ror	r23
    1224:	67 95       	ror	r22
    1226:	b7 95       	ror	r27
    1228:	f7 95       	ror	r31
    122a:	e7 95       	ror	r30
    122c:	9f 5f       	subi	r25, 0xFF	; 255
    122e:	c1 f7       	brne	.-16     	; 0x1220 <__mulsf3_pse+0x90>
    1230:	fe 2b       	or	r31, r30
    1232:	88 0f       	add	r24, r24
    1234:	91 1d       	adc	r25, r1
    1236:	96 95       	lsr	r25
    1238:	87 95       	ror	r24
    123a:	97 f9       	bld	r25, 7
    123c:	08 95       	ret

0000123e <_exit>:
    123e:	f8 94       	cli

00001240 <__stop_program>:
    1240:	ff cf       	rjmp	.-2      	; 0x1240 <__stop_program>
