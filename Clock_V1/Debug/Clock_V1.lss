
Clock_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000008bc  00000950  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000063  0080007c  0080007c  0000096c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000099c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023ef  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f70  00000000  00000000  0000304f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000142f  00000000  00000000  00003fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000558  00000000  00000000  000053f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c2d  00000000  00000000  00005948  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011f7  00000000  00000000  00006575  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  0000776c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 3d       	cpi	r26, 0xDF	; 223
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <main>
  8a:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_16>:
	
//ISR(ADC_vect){
	//b = ADCW;
//}

ISR(ADC_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	af 93       	push	r26
  a2:	bf 93       	push	r27
  a4:	ef 93       	push	r30
  a6:	ff 93       	push	r31
		
	adcValue.adcChannel[adcHandleConfig->adcActiveChannel] = ADCW;				// Saves adc value for current channel
  a8:	a0 91 80 00 	lds	r26, 0x0080	; 0x800080 <adcHandleConfig>
  ac:	b0 91 81 00 	lds	r27, 0x0081	; 0x800081 <adcHandleConfig+0x1>
  b0:	ec 91       	ld	r30, X
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	95 b1       	in	r25, 0x05	; 5
  b8:	ee 0f       	add	r30, r30
  ba:	ff 1f       	adc	r31, r31
  bc:	e4 58       	subi	r30, 0x84	; 132
  be:	ff 4f       	sbci	r31, 0xFF	; 255
  c0:	91 83       	std	Z+1, r25	; 0x01
  c2:	80 83       	st	Z, r24
	
	adcHandleConfig->adcActiveChannel++;
  c4:	8c 91       	ld	r24, X
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	8c 93       	st	X, r24
	if (adcHandleConfig->adcActiveChannel == adcHandleConfig->adcChannelsCount)
  ca:	11 96       	adiw	r26, 0x01	; 1
  cc:	9c 91       	ld	r25, X
  ce:	11 97       	sbiw	r26, 0x01	; 1
  d0:	89 13       	cpse	r24, r25
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <__vector_16+0x44>
		adcHandleConfig->adcActiveChannel = 0;
  d4:	1c 92       	st	X, r1
	
	ADMUX &= 0xF0;																 // Clear the older channel that was read
  d6:	87 b1       	in	r24, 0x07	; 7
  d8:	80 7f       	andi	r24, 0xF0	; 240
  da:	87 b9       	out	0x07, r24	; 7
	ADMUX |= adcHandleConfig->adcPinValue[adcHandleConfig->adcActiveChannel];    // Defines the new ADC channel to be read
  dc:	97 b1       	in	r25, 0x07	; 7
  de:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <adcHandleConfig>
  e2:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <adcHandleConfig+0x1>
  e6:	80 81       	ld	r24, Z
  e8:	e8 0f       	add	r30, r24
  ea:	f1 1d       	adc	r31, r1
  ec:	82 81       	ldd	r24, Z+2	; 0x02
  ee:	89 2b       	or	r24, r25
  f0:	87 b9       	out	0x07, r24	; 7
}
  f2:	ff 91       	pop	r31
  f4:	ef 91       	pop	r30
  f6:	bf 91       	pop	r27
  f8:	af 91       	pop	r26
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <AdcInit>:

void AdcInit(void){
	adcHandleConfig = AdcCfgInitAndGet();
 108:	0e 94 9a 00 	call	0x134	; 0x134 <AdcCfgInitAndGet>
 10c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <adcHandleConfig+0x1>
 110:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <adcHandleConfig>
 114:	08 95       	ret

00000116 <GetAdcValue>:
}

const AdcValue* GetAdcValue(){
	return &adcValue;
}
 116:	8c e7       	ldi	r24, 0x7C	; 124
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	08 95       	ret

0000011c <AdcEnable>:
void AdcEnable(void){
	ADCSRA |= (1<<ADEN);		// Turn on ADC
}

void AdcDisable(void){
	ADCSRA &= ~(1<<ADEN);		// Turn off ADC
 11c:	86 b1       	in	r24, 0x06	; 6
 11e:	80 68       	ori	r24, 0x80	; 128
 120:	86 b9       	out	0x06, r24	; 6
 122:	08 95       	ret

00000124 <AdcStartConversion>:
}

void AdcStartConversion(void){
	ADCSRA |= (1<<ADSC);	   // Start to convert
 124:	86 b1       	in	r24, 0x06	; 6
 126:	80 64       	ori	r24, 0x40	; 64
 128:	86 b9       	out	0x06, r24	; 6
 12a:	08 95       	ret

0000012c <AdcEnableInterrupt>:
}

void AdcEnableInterrupt(void){
	ADCSRA |= (1<<ADIE);	   // Conversion Complete	interrupt is activated.
 12c:	86 b1       	in	r24, 0x06	; 6
 12e:	88 60       	ori	r24, 0x08	; 8
 130:	86 b9       	out	0x06, r24	; 6
 132:	08 95       	ret

00000134 <AdcCfgInitAndGet>:

static AdcHandleConfig adcHandleConfig;

AdcHandleConfig* AdcCfgInitAndGet(void){
	
	adcHandleConfig.adcActiveChannel = 0;
 134:	e2 e8       	ldi	r30, 0x82	; 130
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	10 82       	st	Z, r1
	adcHandleConfig.adcChannelsCount = ADC_CHANNELS_USED;
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	81 83       	std	Z+1, r24	; 0x01
	adcHandleConfig.adcPinValue[0] = ADC_CHANNEL_1_PIN;
 13e:	86 e0       	ldi	r24, 0x06	; 6
 140:	82 83       	std	Z+2, r24	; 0x02
	adcHandleConfig.adcPinValue[1] = ADC_CHANNEL_2_PIN;
 142:	87 e0       	ldi	r24, 0x07	; 7
 144:	83 83       	std	Z+3, r24	; 0x03
	
	for (uint8_t i = 0; i < adcHandleConfig.adcChannelsCount; i++)
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	11 c0       	rjmp	.+34     	; 0x16c <AdcCfgInitAndGet+0x38>
		DDRA &= ~(1<<adcHandleConfig.adcPinValue[i]);	
 14a:	3a b3       	in	r19, 0x1a	; 26
 14c:	e2 2f       	mov	r30, r18
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	ee 57       	subi	r30, 0x7E	; 126
 152:	ff 4f       	sbci	r31, 0xFF	; 255
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 80       	ldd	r0, Z+2	; 0x02
 15a:	02 c0       	rjmp	.+4      	; 0x160 <AdcCfgInitAndGet+0x2c>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	0a 94       	dec	r0
 162:	e2 f7       	brpl	.-8      	; 0x15c <AdcCfgInitAndGet+0x28>
 164:	80 95       	com	r24
 166:	83 23       	and	r24, r19
 168:	8a bb       	out	0x1a, r24	; 26
	adcHandleConfig.adcActiveChannel = 0;
	adcHandleConfig.adcChannelsCount = ADC_CHANNELS_USED;
	adcHandleConfig.adcPinValue[0] = ADC_CHANNEL_1_PIN;
	adcHandleConfig.adcPinValue[1] = ADC_CHANNEL_2_PIN;
	
	for (uint8_t i = 0; i < adcHandleConfig.adcChannelsCount; i++)
 16a:	2f 5f       	subi	r18, 0xFF	; 255
 16c:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <adcHandleConfig+0x1>
 170:	28 17       	cp	r18, r24
 172:	58 f3       	brcs	.-42     	; 0x14a <AdcCfgInitAndGet+0x16>
		DDRA &= ~(1<<adcHandleConfig.adcPinValue[i]);	
	
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));								 // 16Mhz/128 = 125Khz the ADC reference clock
 174:	86 b1       	in	r24, 0x06	; 6
 176:	87 60       	ori	r24, 0x07	; 7
 178:	86 b9       	out	0x06, r24	; 6
	ADMUX  |= (1<<REFS0);														 // Voltage reference from Avcc (5v)
 17a:	87 b1       	in	r24, 0x07	; 7
 17c:	80 64       	ori	r24, 0x40	; 64
 17e:	87 b9       	out	0x07, r24	; 7
	ADMUX  |= adcHandleConfig.adcPinValue[adcHandleConfig.adcActiveChannel];	 // Defines what adc channel to read
 180:	97 b1       	in	r25, 0x07	; 7
 182:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <adcHandleConfig>
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	ee 57       	subi	r30, 0x7E	; 126
 18a:	ff 4f       	sbci	r31, 0xFF	; 255
 18c:	82 81       	ldd	r24, Z+2	; 0x02
 18e:	89 2b       	or	r24, r25
 190:	87 b9       	out	0x07, r24	; 7
	AdcEnable();
 192:	0e 94 8e 00 	call	0x11c	; 0x11c <AdcEnable>
	AdcEnableInterrupt();														 
 196:	0e 94 96 00 	call	0x12c	; 0x12c <AdcEnableInterrupt>
	AdcStartConversion();														// Do an initial conversion because this one is the slowest and to ensure that everything is up and running
 19a:	0e 94 92 00 	call	0x124	; 0x124 <AdcStartConversion>
	return &adcHandleConfig;
}
 19e:	82 e8       	ldi	r24, 0x82	; 130
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	08 95       	ret

000001a4 <ButtonInit>:
static uint8_t counter[BUTTON_COUNT] = {};

ButtonFunctionPtr* buttonFunctionPtr;

void ButtonInit(ButtonFunctionPtr* _buttonFuctionPtr){
	buttonFunctionPtr = _buttonFuctionPtr;
 1a4:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <buttonFunctionPtr+0x1>
 1a8:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <buttonFunctionPtr>

	buttonHandleConfig.pinValue[0] = PIN_BUTTON_POWER;
 1ac:	eb e9       	ldi	r30, 0x9B	; 155
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	11 82       	std	Z+1, r1	; 0x01
	buttonHandleConfig.pinValue[1] = PIN_BUTTON_NEXT;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	82 83       	std	Z+2, r24	; 0x02
	buttonHandleConfig.pinValue[2] = PIN_BUTTON_TOGGLE;
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	83 83       	std	Z+3, r24	; 0x03
	buttonHandleConfig.pinValue[3] = PIN_BUTTON_INCREASE;
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	84 83       	std	Z+4, r24	; 0x04
	buttonHandleConfig.pinValue[4] = PIN_BUTTON_DECREASE;
 1be:	84 e0       	ldi	r24, 0x04	; 4
 1c0:	85 83       	std	Z+5, r24	; 0x05
	buttonHandleConfig.pinValue[5] = PIN_BUTTON_OK;
 1c2:	85 e0       	ldi	r24, 0x05	; 5
 1c4:	86 83       	std	Z+6, r24	; 0x06
	buttonHandleConfig.pinValue[6] = PIN_BUTTON_ABORT;
 1c6:	86 e0       	ldi	r24, 0x06	; 6
 1c8:	87 83       	std	Z+7, r24	; 0x07
	buttonHandleConfig.count = BUTTON_COUNT;
 1ca:	87 e0       	ldi	r24, 0x07	; 7
 1cc:	80 83       	st	Z, r24

	// makes button pins input
	for (uint8_t i = 0; i < buttonHandleConfig.count; i++)
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	11 c0       	rjmp	.+34     	; 0x1f4 <ButtonInit+0x50>
		PORT_DIRECTION_BUTTON &= ~(1 << buttonHandleConfig.pinValue[i]);
 1d2:	31 b3       	in	r19, 0x11	; 17
 1d4:	e2 2f       	mov	r30, r18
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	e5 56       	subi	r30, 0x65	; 101
 1da:	ff 4f       	sbci	r31, 0xFF	; 255
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	01 80       	ldd	r0, Z+1	; 0x01
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <ButtonInit+0x44>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	0a 94       	dec	r0
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <ButtonInit+0x40>
 1ec:	80 95       	com	r24
 1ee:	83 23       	and	r24, r19
 1f0:	81 bb       	out	0x11, r24	; 17
	buttonHandleConfig.pinValue[5] = PIN_BUTTON_OK;
	buttonHandleConfig.pinValue[6] = PIN_BUTTON_ABORT;
	buttonHandleConfig.count = BUTTON_COUNT;

	// makes button pins input
	for (uint8_t i = 0; i < buttonHandleConfig.count; i++)
 1f2:	2f 5f       	subi	r18, 0xFF	; 255
 1f4:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <buttonHandleConfig>
 1f8:	28 17       	cp	r18, r24
 1fa:	58 f3       	brcs	.-42     	; 0x1d2 <ButtonInit+0x2e>
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	10 c0       	rjmp	.+32     	; 0x220 <ButtonInit+0x7c>
		PORT_DIRECTION_BUTTON &= ~(1 << buttonHandleConfig.pinValue[i]);

	// enables pull up resistor for all buttons
	for(uint8_t i = 0; i < buttonHandleConfig.count; i++)
		PORT_BUTTON |= (1 << buttonHandleConfig.pinValue[i]);
 200:	32 b3       	in	r19, 0x12	; 18
 202:	e2 2f       	mov	r30, r18
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	e5 56       	subi	r30, 0x65	; 101
 208:	ff 4f       	sbci	r31, 0xFF	; 255
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	01 80       	ldd	r0, Z+1	; 0x01
 210:	02 c0       	rjmp	.+4      	; 0x216 <ButtonInit+0x72>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <ButtonInit+0x6e>
 21a:	83 2b       	or	r24, r19
 21c:	82 bb       	out	0x12, r24	; 18
	// makes button pins input
	for (uint8_t i = 0; i < buttonHandleConfig.count; i++)
		PORT_DIRECTION_BUTTON &= ~(1 << buttonHandleConfig.pinValue[i]);

	// enables pull up resistor for all buttons
	for(uint8_t i = 0; i < buttonHandleConfig.count; i++)
 21e:	2f 5f       	subi	r18, 0xFF	; 255
 220:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <buttonHandleConfig>
 224:	28 17       	cp	r18, r24
 226:	60 f3       	brcs	.-40     	; 0x200 <ButtonInit+0x5c>
		PORT_BUTTON |= (1 << buttonHandleConfig.pinValue[i]);
}
 228:	08 95       	ret

0000022a <ButtonRoutine>:

void ButtonRoutine(void)
{
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
	for (uint8_t i = 0; i < buttonHandleConfig.count; i++) {
 230:	10 e0       	ldi	r17, 0x00	; 0
 232:	62 c0       	rjmp	.+196    	; 0x2f8 <ButtonRoutine+0xce>

		if (PIN_BUTTON & (1 << buttonHandleConfig.pinValue[i])) {
 234:	80 b3       	in	r24, 0x10	; 16
 236:	c1 2f       	mov	r28, r17
 238:	d0 e0       	ldi	r29, 0x00	; 0
 23a:	fe 01       	movw	r30, r28
 23c:	e5 56       	subi	r30, 0x65	; 101
 23e:	ff 4f       	sbci	r31, 0xFF	; 255
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	01 80       	ldd	r0, Z+1	; 0x01
 244:	02 c0       	rjmp	.+4      	; 0x24a <ButtonRoutine+0x20>
 246:	95 95       	asr	r25
 248:	87 95       	ror	r24
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <ButtonRoutine+0x1c>
 24e:	80 ff       	sbrs	r24, 0
 250:	12 c0       	rjmp	.+36     	; 0x276 <ButtonRoutine+0x4c>
			if (counter[i] != 0) 
 252:	fe 01       	movw	r30, r28
 254:	ea 57       	subi	r30, 0x7A	; 122
 256:	ff 4f       	sbci	r31, 0xFF	; 255
 258:	80 81       	ld	r24, Z
 25a:	88 23       	and	r24, r24
 25c:	31 f0       	breq	.+12     	; 0x26a <ButtonRoutine+0x40>
				counter[i]--;
 25e:	fe 01       	movw	r30, r28
 260:	ea 57       	subi	r30, 0x7A	; 122
 262:	ff 4f       	sbci	r31, 0xFF	; 255
 264:	81 50       	subi	r24, 0x01	; 1
 266:	80 83       	st	Z, r24
 268:	16 c0       	rjmp	.+44     	; 0x296 <ButtonRoutine+0x6c>
			 else
				buttonState[i] = ButtonStateRealesed;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	fe 01       	movw	r30, r28
 26e:	e3 57       	subi	r30, 0x73	; 115
 270:	ff 4f       	sbci	r31, 0xFF	; 255
 272:	80 83       	st	Z, r24
 274:	10 c0       	rjmp	.+32     	; 0x296 <ButtonRoutine+0x6c>
			} 
			else {
			if (counter[i] <= MAX_COUNTER_VALUE) 
 276:	fe 01       	movw	r30, r28
 278:	ea 57       	subi	r30, 0x7A	; 122
 27a:	ff 4f       	sbci	r31, 0xFF	; 255
 27c:	80 81       	ld	r24, Z
 27e:	85 36       	cpi	r24, 0x65	; 101
 280:	30 f4       	brcc	.+12     	; 0x28e <ButtonRoutine+0x64>
				counter[i]++;
 282:	fe 01       	movw	r30, r28
 284:	ea 57       	subi	r30, 0x7A	; 122
 286:	ff 4f       	sbci	r31, 0xFF	; 255
 288:	8f 5f       	subi	r24, 0xFF	; 255
 28a:	80 83       	st	Z, r24
 28c:	04 c0       	rjmp	.+8      	; 0x296 <ButtonRoutine+0x6c>
			else
				buttonState[i] = ButtonStatePressed;
 28e:	fe 01       	movw	r30, r28
 290:	e3 57       	subi	r30, 0x73	; 115
 292:	ff 4f       	sbci	r31, 0xFF	; 255
 294:	10 82       	st	Z, r1
		}

		if (buttonState[i] == ButtonStateRealesed) 
 296:	fe 01       	movw	r30, r28
 298:	e3 57       	subi	r30, 0x73	; 115
 29a:	ff 4f       	sbci	r31, 0xFF	; 255
 29c:	80 81       	ld	r24, Z
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	29 f4       	brne	.+10     	; 0x2ac <ButtonRoutine+0x82>
			togglState[i] = TogglStateNo;
 2a2:	fe 01       	movw	r30, r28
 2a4:	ec 56       	subi	r30, 0x6C	; 108
 2a6:	ff 4f       	sbci	r31, 0xFF	; 255
 2a8:	10 82       	st	Z, r1
 2aa:	0b c0       	rjmp	.+22     	; 0x2c2 <ButtonRoutine+0x98>
		else if (togglState[i] == TogglStateNo) 
 2ac:	fe 01       	movw	r30, r28
 2ae:	ec 56       	subi	r30, 0x6C	; 108
 2b0:	ff 4f       	sbci	r31, 0xFF	; 255
 2b2:	80 81       	ld	r24, Z
 2b4:	81 11       	cpse	r24, r1
 2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <ButtonRoutine+0x98>
			togglState[i] = TogglStateWaiting;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	fe 01       	movw	r30, r28
 2bc:	ec 56       	subi	r30, 0x6C	; 108
 2be:	ff 4f       	sbci	r31, 0xFF	; 255
 2c0:	80 83       	st	Z, r24

		if (togglState[i] == TogglStateWaiting) {
 2c2:	fe 01       	movw	r30, r28
 2c4:	ec 56       	subi	r30, 0x6C	; 108
 2c6:	ff 4f       	sbci	r31, 0xFF	; 255
 2c8:	80 81       	ld	r24, Z
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	a1 f4       	brne	.+40     	; 0x2f6 <ButtonRoutine+0xcc>
			if(i < LED_COUNT)
 2ce:	15 30       	cpi	r17, 0x05	; 5
 2d0:	70 f4       	brcc	.+28     	; 0x2ee <ButtonRoutine+0xc4>
				(*buttonFunctionPtr)[i](i);
 2d2:	e0 91 c5 00 	lds	r30, 0x00C5	; 0x8000c5 <buttonFunctionPtr>
 2d6:	f0 91 c6 00 	lds	r31, 0x00C6	; 0x8000c6 <buttonFunctionPtr+0x1>
 2da:	ce 01       	movw	r24, r28
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	e8 0f       	add	r30, r24
 2e2:	f9 1f       	adc	r31, r25
 2e4:	01 90       	ld	r0, Z+
 2e6:	f0 81       	ld	r31, Z
 2e8:	e0 2d       	mov	r30, r0
 2ea:	81 2f       	mov	r24, r17
 2ec:	09 95       	icall
			togglState[i] = TogglStateDone;
 2ee:	cc 56       	subi	r28, 0x6C	; 108
 2f0:	df 4f       	sbci	r29, 0xFF	; 255
 2f2:	82 e0       	ldi	r24, 0x02	; 2
 2f4:	88 83       	st	Y, r24
		PORT_BUTTON |= (1 << buttonHandleConfig.pinValue[i]);
}

void ButtonRoutine(void)
{
	for (uint8_t i = 0; i < buttonHandleConfig.count; i++) {
 2f6:	1f 5f       	subi	r17, 0xFF	; 255
 2f8:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <buttonHandleConfig>
 2fc:	18 17       	cp	r17, r24
 2fe:	08 f4       	brcc	.+2      	; 0x302 <ButtonRoutine+0xd8>
 300:	99 cf       	rjmp	.-206    	; 0x234 <ButtonRoutine+0xa>
			if(i < LED_COUNT)
				(*buttonFunctionPtr)[i](i);
			togglState[i] = TogglStateDone;
		}
	}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	08 95       	ret

0000030a <LedAllOff>:
	PORT_LED &= ~(1 << ledHandleConfig.pinValue[index]);
}

void LedOff(uint8_t index)
{
	PORT_LED |= (1 << ledHandleConfig.pinValue[index]);
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	10 c0       	rjmp	.+32     	; 0x32e <LedAllOff+0x24>
 30e:	3b b3       	in	r19, 0x1b	; 27
 310:	e2 2f       	mov	r30, r18
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	ed 55       	subi	r30, 0x5D	; 93
 316:	ff 4f       	sbci	r31, 0xFF	; 255
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	01 80       	ldd	r0, Z+1	; 0x01
 31e:	02 c0       	rjmp	.+4      	; 0x324 <LedAllOff+0x1a>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	0a 94       	dec	r0
 326:	e2 f7       	brpl	.-8      	; 0x320 <LedAllOff+0x16>
 328:	83 2b       	or	r24, r19
 32a:	8b bb       	out	0x1b, r24	; 27
 32c:	2f 5f       	subi	r18, 0xFF	; 255
 32e:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <ledHandleConfig>
 332:	28 17       	cp	r18, r24
 334:	60 f3       	brcs	.-40     	; 0x30e <LedAllOff+0x4>
 336:	08 95       	ret

00000338 <LedInit>:
 338:	e3 ea       	ldi	r30, 0xA3	; 163
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	11 82       	std	Z+1, r1	; 0x01
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	82 83       	std	Z+2, r24	; 0x02
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	83 83       	std	Z+3, r24	; 0x03
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	84 83       	std	Z+4, r24	; 0x04
 34a:	84 e0       	ldi	r24, 0x04	; 4
 34c:	85 83       	std	Z+5, r24	; 0x05
 34e:	85 e0       	ldi	r24, 0x05	; 5
 350:	80 83       	st	Z, r24
 352:	20 e0       	ldi	r18, 0x00	; 0
 354:	10 c0       	rjmp	.+32     	; 0x376 <LedInit+0x3e>
 356:	3a b3       	in	r19, 0x1a	; 26
 358:	e2 2f       	mov	r30, r18
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	ed 55       	subi	r30, 0x5D	; 93
 35e:	ff 4f       	sbci	r31, 0xFF	; 255
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	01 80       	ldd	r0, Z+1	; 0x01
 366:	02 c0       	rjmp	.+4      	; 0x36c <LedInit+0x34>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	0a 94       	dec	r0
 36e:	e2 f7       	brpl	.-8      	; 0x368 <LedInit+0x30>
 370:	83 2b       	or	r24, r19
 372:	8a bb       	out	0x1a, r24	; 26
 374:	2f 5f       	subi	r18, 0xFF	; 255
 376:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <ledHandleConfig>
 37a:	28 17       	cp	r18, r24
 37c:	60 f3       	brcs	.-40     	; 0x356 <LedInit+0x1e>
 37e:	0e 94 85 01 	call	0x30a	; 0x30a <LedAllOff>
 382:	08 95       	ret

00000384 <LedToggle>:
}

void LedToggle(uint8_t index)
{
	PORT_LED ^= (1 << ledHandleConfig.pinValue[index]);
 384:	2b b3       	in	r18, 0x1b	; 27
 386:	e8 2f       	mov	r30, r24
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	ed 55       	subi	r30, 0x5D	; 93
 38c:	ff 4f       	sbci	r31, 0xFF	; 255
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	01 80       	ldd	r0, Z+1	; 0x01
 394:	02 c0       	rjmp	.+4      	; 0x39a <LedToggle+0x16>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	0a 94       	dec	r0
 39c:	e2 f7       	brpl	.-8      	; 0x396 <LedToggle+0x12>
 39e:	82 27       	eor	r24, r18
 3a0:	8b bb       	out	0x1b, r24	; 27
 3a2:	08 95       	ret

000003a4 <main>:
static ButtonFunctionPtr buttonFunctionPtr = {LedToggle,LedToggle,LedToggle,LedToggle,LedToggle};


int main(void)
{
	TimerInitCfg();
 3a4:	0e 94 37 03 	call	0x66e	; 0x66e <TimerInitCfg>
	TimerEnableCfg(true);
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 47 03 	call	0x68e	; 0x68e <TimerEnableCfg>
	
    SevSegInit();
 3ae:	0e 94 80 02 	call	0x500	; 0x500 <SevSegInit>
    ButtonInit(&buttonFunctionPtr);
 3b2:	80 e6       	ldi	r24, 0x60	; 96
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <ButtonInit>
	LedInit();
 3ba:	0e 94 9c 01 	call	0x338	; 0x338 <LedInit>
	
	AdcInit();
 3be:	0e 94 84 00 	call	0x108	; 0x108 <AdcInit>
	adcValue = GetAdcValue();
 3c2:	0e 94 8b 00 	call	0x116	; 0x116 <GetAdcValue>
 3c6:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <adcValue+0x1>
 3ca:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <adcValue>
	
    sei();
 3ce:	78 94       	sei
	
	StatusError err;
	TimerSwInitParam* pTimerSwInitParam = TimerGetIntervalPointerCfg();
 3d0:	0e 94 50 03 	call	0x6a0	; 0x6a0 <TimerGetIntervalPointerCfg>
	err = TimerSwInit(pTimerSwInitParam, &timerSwHandle);
 3d4:	6d ea       	ldi	r22, 0xAD	; 173
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	0e 94 17 04 	call	0x82e	; 0x82e <TimerSwInit>
	if (err == StatusErrNone) {
 3dc:	81 11       	cpse	r24, r1
 3de:	08 c0       	rjmp	.+16     	; 0x3f0 <main+0x4c>
		TimerSwStartup(&timerSwHandle, 1000);
 3e0:	48 ee       	ldi	r20, 0xE8	; 232
 3e2:	53 e0       	ldi	r21, 0x03	; 3
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	8d ea       	ldi	r24, 0xAD	; 173
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 23 04 	call	0x846	; 0x846 <TimerSwStartup>
	//if (err == StatusErrNone) {
		//TimerSwStartup(&timerSwHandle, 8);
	//}

    while (1) {
        err = TimerSwIsExpired(&timerSwHandle);
 3f0:	8d ea       	ldi	r24, 0xAD	; 173
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 3c 04 	call	0x878	; 0x878 <TimerSwIsExpired>
        if (err == StatusErrTime) {
 3f8:	80 31       	cpi	r24, 0x10	; 16
 3fa:	c9 f4       	brne	.+50     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
			
            currentTime.minutes++;
 3fc:	ee e6       	ldi	r30, 0x6E	; 110
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	81 81       	ldd	r24, Z+1	; 0x01
 402:	8f 5f       	subi	r24, 0xFF	; 255
 404:	81 83       	std	Z+1, r24	; 0x01
            if(currentTime.minutes>=60){
 406:	8c 33       	cpi	r24, 0x3C	; 60
 408:	50 f0       	brcs	.+20     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
                currentTime.minutes-=60;
 40a:	8c 53       	subi	r24, 0x3C	; 60
 40c:	81 83       	std	Z+1, r24	; 0x01
                currentTime.hours++;
 40e:	80 81       	ld	r24, Z
 410:	8f 5f       	subi	r24, 0xFF	; 255
 412:	80 83       	st	Z, r24
                if (currentTime.hours>=24)
 414:	88 31       	cpi	r24, 0x18	; 24
 416:	18 f0       	brcs	.+6      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
                    currentTime.hours-=24;
 418:	88 51       	subi	r24, 0x18	; 24
 41a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <currentTime>
            }
            TimerSwStartup(&timerSwHandle, 1000);
 41e:	48 ee       	ldi	r20, 0xE8	; 232
 420:	53 e0       	ldi	r21, 0x03	; 3
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	8d ea       	ldi	r24, 0xAD	; 173
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 23 04 	call	0x846	; 0x846 <TimerSwStartup>
			   //AdcStartConversion();
			   //SevSegSetFloatVal((float)adcValue->adcChannel[display]);
			   //TimerSwStartup(&timerSwAdcHandle, 8);
		   //}

        if (oldTime.hours != currentTime.hours || oldTime.minutes != currentTime.minutes) {
 42e:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <oldTime>
 432:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <currentTime>
 436:	98 13       	cpse	r25, r24
 438:	06 c0       	rjmp	.+12     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 43a:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <oldTime+0x1>
 43e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <currentTime+0x1>
 442:	98 17       	cp	r25, r24
 444:	71 f0       	breq	.+28     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
            SevSegSetTimeVal(currentTime);
 446:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <currentTime>
 44a:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <currentTime+0x1>
 44e:	0e 94 c7 02 	call	0x58e	; 0x58e <SevSegSetTimeVal>
            oldTime = currentTime;
 452:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <currentTime>
 456:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <currentTime+0x1>
 45a:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <oldTime+0x1>
 45e:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <oldTime>
        }

        SevSegRutine();
 462:	0e 94 9f 02 	call	0x53e	; 0x53e <SevSegRutine>
        ButtonRoutine();
 466:	0e 94 15 01 	call	0x22a	; 0x22a <ButtonRoutine>
    }
 46a:	c2 cf       	rjmp	.-124    	; 0x3f0 <main+0x4c>

0000046c <TimeToBuff>:
		localdecValue -= (float)tmp * decVal;
		decVal /= 10;
	}
	
	return;
 46c:	db 01       	movw	r26, r22
 46e:	8a 30       	cpi	r24, 0x0A	; 10
 470:	20 f4       	brcc	.+8      	; 0x47a <TimeToBuff+0xe>
 472:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <segCode>
 476:	2c 93       	st	X, r18
 478:	13 c0       	rjmp	.+38     	; 0x4a0 <TimeToBuff+0x34>
 47a:	2d ec       	ldi	r18, 0xCD	; 205
 47c:	82 9f       	mul	r24, r18
 47e:	21 2d       	mov	r18, r1
 480:	11 24       	eor	r1, r1
 482:	26 95       	lsr	r18
 484:	26 95       	lsr	r18
 486:	26 95       	lsr	r18
 488:	e2 2f       	mov	r30, r18
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	e0 59       	subi	r30, 0x90	; 144
 48e:	ff 4f       	sbci	r31, 0xFF	; 255
 490:	30 81       	ld	r19, Z
 492:	3c 93       	st	X, r19
 494:	22 0f       	add	r18, r18
 496:	32 2f       	mov	r19, r18
 498:	33 0f       	add	r19, r19
 49a:	33 0f       	add	r19, r19
 49c:	23 0f       	add	r18, r19
 49e:	82 1b       	sub	r24, r18
 4a0:	e8 2f       	mov	r30, r24
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	e0 59       	subi	r30, 0x90	; 144
 4a6:	ff 4f       	sbci	r31, 0xFF	; 255
 4a8:	20 81       	ld	r18, Z
 4aa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <segCode+0xa>
 4ae:	82 2b       	or	r24, r18
 4b0:	11 96       	adiw	r26, 0x01	; 1
 4b2:	8c 93       	st	X, r24
 4b4:	11 97       	sbiw	r26, 0x01	; 1
 4b6:	9a 30       	cpi	r25, 0x0A	; 10
 4b8:	30 f4       	brcc	.+12     	; 0x4c6 <TimeToBuff+0x5a>
 4ba:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <segCode>
 4be:	12 96       	adiw	r26, 0x02	; 2
 4c0:	8c 93       	st	X, r24
 4c2:	12 97       	sbiw	r26, 0x02	; 2
 4c4:	15 c0       	rjmp	.+42     	; 0x4f0 <TimeToBuff+0x84>
 4c6:	8d ec       	ldi	r24, 0xCD	; 205
 4c8:	98 9f       	mul	r25, r24
 4ca:	81 2d       	mov	r24, r1
 4cc:	11 24       	eor	r1, r1
 4ce:	86 95       	lsr	r24
 4d0:	86 95       	lsr	r24
 4d2:	86 95       	lsr	r24
 4d4:	e8 2f       	mov	r30, r24
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	e0 59       	subi	r30, 0x90	; 144
 4da:	ff 4f       	sbci	r31, 0xFF	; 255
 4dc:	20 81       	ld	r18, Z
 4de:	12 96       	adiw	r26, 0x02	; 2
 4e0:	2c 93       	st	X, r18
 4e2:	12 97       	sbiw	r26, 0x02	; 2
 4e4:	88 0f       	add	r24, r24
 4e6:	28 2f       	mov	r18, r24
 4e8:	22 0f       	add	r18, r18
 4ea:	22 0f       	add	r18, r18
 4ec:	82 0f       	add	r24, r18
 4ee:	98 1b       	sub	r25, r24
 4f0:	e9 2f       	mov	r30, r25
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	e0 59       	subi	r30, 0x90	; 144
 4f6:	ff 4f       	sbci	r31, 0xFF	; 255
 4f8:	80 81       	ld	r24, Z
 4fa:	13 96       	adiw	r26, 0x03	; 3
 4fc:	8c 93       	st	X, r24
 4fe:	08 95       	ret

00000500 <SevSegInit>:

/* Global functions */
void SevSegInit(void)
{
	StatusError err;
	for(uint8_t index = 0; index < DISPLAY_7_SEGMENT_DIGITS_COUNT; index++)
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	06 c0       	rjmp	.+12     	; 0x510 <SevSegInit+0x10>
	{
		digitsValue[index] = 0;
 504:	e8 2f       	mov	r30, r24
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	e9 53       	subi	r30, 0x39	; 57
 50a:	ff 4f       	sbci	r31, 0xFF	; 255
 50c:	10 82       	st	Z, r1

/* Global functions */
void SevSegInit(void)
{
	StatusError err;
	for(uint8_t index = 0; index < DISPLAY_7_SEGMENT_DIGITS_COUNT; index++)
 50e:	8f 5f       	subi	r24, 0xFF	; 255
 510:	84 30       	cpi	r24, 0x04	; 4
 512:	c0 f3       	brcs	.-16     	; 0x504 <SevSegInit+0x4>
	{
		digitsValue[index] = 0;
	}
	disp7SegHandleConfig = SevSegCfgInitAndGet();	
 514:	0e 94 cd 02 	call	0x59a	; 0x59a <SevSegCfgInitAndGet>
	
	TimerSwInitParam *pTimerSwInitParam = TimerGetIntervalPointerCfg();
 518:	0e 94 50 03 	call	0x6a0	; 0x6a0 <TimerGetIntervalPointerCfg>
	
	err = TimerSwInit(pTimerSwInitParam,&timerSwHandle);
 51c:	6b ec       	ldi	r22, 0xCB	; 203
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	0e 94 17 04 	call	0x82e	; 0x82e <TimerSwInit>
	
	if (err == StatusErrNone)
 524:	81 11       	cpse	r24, r1
 526:	08 c0       	rjmp	.+16     	; 0x538 <SevSegInit+0x38>
	{
		TimerSwStartup(&timerSwHandle,DISPLAY_7_SEGMENT_TIMER_MS);
 528:	44 e0       	ldi	r20, 0x04	; 4
 52a:	50 e0       	ldi	r21, 0x00	; 0
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	8b ec       	ldi	r24, 0xCB	; 203
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 23 04 	call	0x846	; 0x846 <TimerSwStartup>
	}
	digitCount = 0;
 538:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <digitCount>
 53c:	08 95       	ret

0000053e <SevSegRutine>:
}

void SevSegRutine(void)
{
	StatusError err;
	err = TimerSwIsExpired(&timerSwHandle);
 53e:	8b ec       	ldi	r24, 0xCB	; 203
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 3c 04 	call	0x878	; 0x878 <TimerSwIsExpired>
	if (err == StatusErrTime)
 546:	80 31       	cpi	r24, 0x10	; 16
 548:	09 f5       	brne	.+66     	; 0x58c <SevSegRutine+0x4e>
	{
		if (digitCount >= DISPLAY_7_SEGMENT_DIGITS_COUNT)
 54a:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <digitCount>
 54e:	84 30       	cpi	r24, 0x04	; 4
 550:	10 f0       	brcs	.+4      	; 0x556 <SevSegRutine+0x18>
		{
			digitCount = 0;
 552:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <digitCount>
		}
		SevSegCfgAllDigitsOff();
 556:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SevSegCfgAllDigitsOff>
		
		SevSegCfgSetDigitValue(digitsValue[digitCount]);
 55a:	e0 91 bd 00 	lds	r30, 0x00BD	; 0x8000bd <digitCount>
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	e9 53       	subi	r30, 0x39	; 57
 562:	ff 4f       	sbci	r31, 0xFF	; 255
 564:	80 81       	ld	r24, Z
 566:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SevSegCfgSetDigitValue>
		
		SevSegCfgDigitOn(digitCount);
 56a:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <digitCount>
 56e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <SevSegCfgDigitOn>
		
		TimerSwStartup(&timerSwHandle,DISPLAY_7_SEGMENT_TIMER_MS);
 572:	44 e0       	ldi	r20, 0x04	; 4
 574:	50 e0       	ldi	r21, 0x00	; 0
 576:	60 e0       	ldi	r22, 0x00	; 0
 578:	70 e0       	ldi	r23, 0x00	; 0
 57a:	8b ec       	ldi	r24, 0xCB	; 203
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 23 04 	call	0x846	; 0x846 <TimerSwStartup>
		
		digitCount++;
 582:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <digitCount>
 586:	8f 5f       	subi	r24, 0xFF	; 255
 588:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <digitCount>
 58c:	08 95       	ret

0000058e <SevSegSetTimeVal>:
	}
}

StatusError SevSegSetTimeVal(Time time)
{
	TimeToBuff(time,digitsValue);
 58e:	67 ec       	ldi	r22, 0xC7	; 199
 590:	70 e0       	ldi	r23, 0x00	; 0
 592:	0e 94 36 02 	call	0x46c	; 0x46c <TimeToBuff>
	
	return StatusErrNone;
}
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	08 95       	ret

0000059a <SevSegCfgInitAndGet>:

static SevSegHandleConfig disp7SegHandleConfig;

SevSegHandleConfig* SevSegCfgInitAndGet()
{
	disp7SegHandleConfig.port = DISPLAY_7_SEGMENT_PORT;
 59a:	85 b3       	in	r24, 0x15	; 21
 59c:	ee eb       	ldi	r30, 0xBE	; 190
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	80 83       	st	Z, r24
	disp7SegHandleConfig.portDig = DISPLAY_7_SEGMENT_DIGIT_PORT;
 5a2:	88 b3       	in	r24, 0x18	; 24
 5a4:	81 83       	std	Z+1, r24	; 0x01
	
	DISPLAY_7_SEGMENT_PORT_DIR = 0xFF;
 5a6:	8f ef       	ldi	r24, 0xFF	; 255
 5a8:	84 bb       	out	0x14, r24	; 20
	
	disp7SegHandleConfig.digitsPinValue[0] = DISPLAY_7_SEGMENT_DIGIT_1_PIN;
 5aa:	84 e0       	ldi	r24, 0x04	; 4
 5ac:	83 83       	std	Z+3, r24	; 0x03
	disp7SegHandleConfig.digitsPinValue[1] = DISPLAY_7_SEGMENT_DIGIT_2_PIN;
 5ae:	85 e0       	ldi	r24, 0x05	; 5
 5b0:	84 83       	std	Z+4, r24	; 0x04
	disp7SegHandleConfig.digitsPinValue[2] = DISPLAY_7_SEGMENT_DIGIT_3_PIN;
 5b2:	86 e0       	ldi	r24, 0x06	; 6
 5b4:	85 83       	std	Z+5, r24	; 0x05
	disp7SegHandleConfig.digitsPinValue[3] = DISPLAY_7_SEGMENT_DIGIT_4_PIN;
 5b6:	87 e0       	ldi	r24, 0x07	; 7
 5b8:	86 83       	std	Z+6, r24	; 0x06
		
	DISPLAY_7_SEGMENT_DIGIT_PORT_DIR |= (1 << DISPLAY_7_SEGMENT_DIGIT_1_PIN);
 5ba:	87 b3       	in	r24, 0x17	; 23
 5bc:	80 61       	ori	r24, 0x10	; 16
 5be:	87 bb       	out	0x17, r24	; 23
	DISPLAY_7_SEGMENT_DIGIT_PORT_DIR |= (1 << DISPLAY_7_SEGMENT_DIGIT_2_PIN);
 5c0:	87 b3       	in	r24, 0x17	; 23
 5c2:	80 62       	ori	r24, 0x20	; 32
 5c4:	87 bb       	out	0x17, r24	; 23
	DISPLAY_7_SEGMENT_DIGIT_PORT_DIR |= (1 << DISPLAY_7_SEGMENT_DIGIT_3_PIN);
 5c6:	87 b3       	in	r24, 0x17	; 23
 5c8:	80 64       	ori	r24, 0x40	; 64
 5ca:	87 bb       	out	0x17, r24	; 23
	DISPLAY_7_SEGMENT_DIGIT_PORT_DIR |= (1 << DISPLAY_7_SEGMENT_DIGIT_4_PIN);
 5cc:	87 b3       	in	r24, 0x17	; 23
 5ce:	80 68       	ori	r24, 0x80	; 128
 5d0:	87 bb       	out	0x17, r24	; 23
	
	return &disp7SegHandleConfig;
}
 5d2:	cf 01       	movw	r24, r30
 5d4:	08 95       	ret

000005d6 <SevSegCfgAllDigitsOff>:

void SevSegCfgAllDigitsOff(void)
{
	DISPLAY_7_SEGMENT_DIGIT_PORT |= (1 << DISPLAY_7_SEGMENT_DIGIT_1_PIN);
 5d6:	88 b3       	in	r24, 0x18	; 24
 5d8:	80 61       	ori	r24, 0x10	; 16
 5da:	88 bb       	out	0x18, r24	; 24
	DISPLAY_7_SEGMENT_DIGIT_PORT |= (1 << DISPLAY_7_SEGMENT_DIGIT_2_PIN);
 5dc:	88 b3       	in	r24, 0x18	; 24
 5de:	80 62       	ori	r24, 0x20	; 32
 5e0:	88 bb       	out	0x18, r24	; 24
	DISPLAY_7_SEGMENT_DIGIT_PORT |= (1 << DISPLAY_7_SEGMENT_DIGIT_3_PIN);
 5e2:	88 b3       	in	r24, 0x18	; 24
 5e4:	80 64       	ori	r24, 0x40	; 64
 5e6:	88 bb       	out	0x18, r24	; 24
	DISPLAY_7_SEGMENT_DIGIT_PORT |= (1 << DISPLAY_7_SEGMENT_DIGIT_4_PIN);
 5e8:	88 b3       	in	r24, 0x18	; 24
 5ea:	80 68       	ori	r24, 0x80	; 128
 5ec:	88 bb       	out	0x18, r24	; 24
 5ee:	08 95       	ret

000005f0 <SevSegCfgSetDigitValue>:
}

void SevSegCfgSetDigitValue(uint8_t value)
{
#if (DISPLAY_7_SEGMENT_MODE == COMUN_POWER_SUPPLY)
	DISPLAY_7_SEGMENT_PORT = ~value;
 5f0:	80 95       	com	r24
 5f2:	85 bb       	out	0x15, r24	; 21
 5f4:	08 95       	ret

000005f6 <SevSegCfgDigitOn>:
#endif
}

void SevSegCfgDigitOn(uint8_t digit)
{
	if (digit < DISPLAY_7_SEGMENT_DIGITS_COUNT)
 5f6:	84 30       	cpi	r24, 0x04	; 4
 5f8:	80 f4       	brcc	.+32     	; 0x61a <SevSegCfgDigitOn+0x24>
	{
		DISPLAY_7_SEGMENT_DIGIT_PORT &= ~(1 << disp7SegHandleConfig.digitsPinValue[digit]);		
 5fa:	28 b3       	in	r18, 0x18	; 24
 5fc:	e8 2f       	mov	r30, r24
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	e2 54       	subi	r30, 0x42	; 66
 602:	ff 4f       	sbci	r31, 0xFF	; 255
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	03 80       	ldd	r0, Z+3	; 0x03
 60a:	02 c0       	rjmp	.+4      	; 0x610 <SevSegCfgDigitOn+0x1a>
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	0a 94       	dec	r0
 612:	e2 f7       	brpl	.-8      	; 0x60c <SevSegCfgDigitOn+0x16>
 614:	80 95       	com	r24
 616:	82 23       	and	r24, r18
 618:	88 bb       	out	0x18, r24	; 24
 61a:	08 95       	ret

0000061c <__vector_9>:
 ******************************************************************************/

TimerSwInitParam timerSwInitParam;

ISR (TIMER1_OVF_vect)    // Timer1 ISR
{
 61c:	1f 92       	push	r1
 61e:	0f 92       	push	r0
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	0f 92       	push	r0
 624:	11 24       	eor	r1, r1
 626:	8f 93       	push	r24
 628:	9f 93       	push	r25
 62a:	af 93       	push	r26
 62c:	bf 93       	push	r27
	timerSwInitParam.interval++;
 62e:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <timerSwInitParam>
 632:	90 91 dc 00 	lds	r25, 0x00DC	; 0x8000dc <timerSwInitParam+0x1>
 636:	a0 91 dd 00 	lds	r26, 0x00DD	; 0x8000dd <timerSwInitParam+0x2>
 63a:	b0 91 de 00 	lds	r27, 0x00DE	; 0x8000de <timerSwInitParam+0x3>
 63e:	01 96       	adiw	r24, 0x01	; 1
 640:	a1 1d       	adc	r26, r1
 642:	b1 1d       	adc	r27, r1
 644:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <timerSwInitParam>
 648:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <timerSwInitParam+0x1>
 64c:	a0 93 dd 00 	sts	0x00DD, r26	; 0x8000dd <timerSwInitParam+0x2>
 650:	b0 93 de 00 	sts	0x00DE, r27	; 0x8000de <timerSwInitParam+0x3>
	TCNT1 = TTIMER_CFG_COUNTER_INIT_STATE;   // for 1 sec at 16 MHz  63974
 654:	8f e7       	ldi	r24, 0x7F	; 127
 656:	91 ec       	ldi	r25, 0xC1	; 193
 658:	9d bd       	out	0x2d, r25	; 45
 65a:	8c bd       	out	0x2c, r24	; 44
}
 65c:	bf 91       	pop	r27
 65e:	af 91       	pop	r26
 660:	9f 91       	pop	r25
 662:	8f 91       	pop	r24
 664:	0f 90       	pop	r0
 666:	0f be       	out	0x3f, r0	; 63
 668:	0f 90       	pop	r0
 66a:	1f 90       	pop	r1
 66c:	18 95       	reti

0000066e <TimerInitCfg>:

void TimerInitCfg(){
	TCNT1 = TTIMER_CFG_COUNTER_INIT_STATE;   // for 1 sec at 16 MHz
 66e:	8f e7       	ldi	r24, 0x7F	; 127
 670:	91 ec       	ldi	r25, 0xC1	; 193
 672:	9d bd       	out	0x2d, r25	; 45
 674:	8c bd       	out	0x2c, r24	; 44
	TCCR1A = 0x00;
 676:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<CS10);  // Timer mode with 1 prescler
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	8e bd       	out	0x2e, r24	; 46
	
	timerSwInitParam.interval = 0;
 67c:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <timerSwInitParam>
 680:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <timerSwInitParam+0x1>
 684:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <timerSwInitParam+0x2>
 688:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <timerSwInitParam+0x3>
 68c:	08 95       	ret

0000068e <TimerEnableCfg>:
}

void TimerEnableCfg(bool state){
	
	if(state == false)
 68e:	81 11       	cpse	r24, r1
 690:	04 c0       	rjmp	.+8      	; 0x69a <TimerEnableCfg+0xc>
	{
		TIMSK &= ~(1UL << TOIE1); // Disable timer1 overflow interrupt(TOIE1)			
 692:	89 b7       	in	r24, 0x39	; 57
 694:	8b 7f       	andi	r24, 0xFB	; 251
 696:	89 bf       	out	0x39, r24	; 57
 698:	08 95       	ret
	}
	else
	{
		TIMSK = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
 69a:	84 e0       	ldi	r24, 0x04	; 4
 69c:	89 bf       	out	0x39, r24	; 57
 69e:	08 95       	ret

000006a0 <TimerGetIntervalPointerCfg>:
}

TimerSwInitParam* TimerGetIntervalPointerCfg(void)
{
	return &timerSwInitParam;
 6a0:	8b ed       	ldi	r24, 0xDB	; 219
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	08 95       	ret

000006a6 <s_IsValidHandle>:
    {
        return err;
    }

    return s_IsActive(handle);
}
 6a6:	00 97       	sbiw	r24, 0x00	; 0
 6a8:	31 f0       	breq	.+12     	; 0x6b6 <s_IsValidHandle+0x10>
 6aa:	fc 01       	movw	r30, r24
 6ac:	80 81       	ld	r24, Z
 6ae:	81 11       	cpse	r24, r1
 6b0:	04 c0       	rjmp	.+8      	; 0x6ba <s_IsValidHandle+0x14>
 6b2:	82 e1       	ldi	r24, 0x12	; 18
 6b4:	08 95       	ret
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	08 95       	ret
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	08 95       	ret

000006be <s_IsValidAndActiveHandle>:
 6be:	cf 93       	push	r28
 6c0:	df 93       	push	r29
 6c2:	ec 01       	movw	r28, r24
 6c4:	0e 94 53 03 	call	0x6a6	; 0x6a6 <s_IsValidHandle>
 6c8:	81 11       	cpse	r24, r1
 6ca:	06 c0       	rjmp	.+12     	; 0x6d8 <s_IsValidAndActiveHandle+0x1a>
 6cc:	89 81       	ldd	r24, Y+1	; 0x01
 6ce:	81 11       	cpse	r24, r1
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <s_IsValidAndActiveHandle+0x18>
 6d2:	8f e0       	ldi	r24, 0x0F	; 15
 6d4:	01 c0       	rjmp	.+2      	; 0x6d8 <s_IsValidAndActiveHandle+0x1a>
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	df 91       	pop	r29
 6da:	cf 91       	pop	r28
 6dc:	08 95       	ret

000006de <s_Init>:
 6de:	cf 93       	push	r28
 6e0:	df 93       	push	r29
 6e2:	fb 01       	movw	r30, r22
 6e4:	21 e0       	ldi	r18, 0x01	; 1
 6e6:	20 83       	st	Z, r18
 6e8:	97 87       	std	Z+15, r25	; 0x0f
 6ea:	86 87       	std	Z+14, r24	; 0x0e
 6ec:	ec 01       	movw	r28, r24
 6ee:	88 81       	ld	r24, Y
 6f0:	99 81       	ldd	r25, Y+1	; 0x01
 6f2:	aa 81       	ldd	r26, Y+2	; 0x02
 6f4:	bb 81       	ldd	r27, Y+3	; 0x03
 6f6:	82 87       	std	Z+10, r24	; 0x0a
 6f8:	93 87       	std	Z+11, r25	; 0x0b
 6fa:	a4 87       	std	Z+12, r26	; 0x0c
 6fc:	b5 87       	std	Z+13, r27	; 0x0d
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	df 91       	pop	r29
 702:	cf 91       	pop	r28
 704:	08 95       	ret

00000706 <s_Startup>:
 706:	fc 01       	movw	r30, r24
 708:	a6 85       	ldd	r26, Z+14	; 0x0e
 70a:	b7 85       	ldd	r27, Z+15	; 0x0f
 70c:	8d 91       	ld	r24, X+
 70e:	9d 91       	ld	r25, X+
 710:	0d 90       	ld	r0, X+
 712:	bc 91       	ld	r27, X
 714:	a0 2d       	mov	r26, r0
 716:	21 e0       	ldi	r18, 0x01	; 1
 718:	20 83       	st	Z, r18
 71a:	21 83       	std	Z+1, r18	; 0x01
 71c:	82 83       	std	Z+2, r24	; 0x02
 71e:	93 83       	std	Z+3, r25	; 0x03
 720:	a4 83       	std	Z+4, r26	; 0x04
 722:	b5 83       	std	Z+5, r27	; 0x05
 724:	84 0f       	add	r24, r20
 726:	95 1f       	adc	r25, r21
 728:	a6 1f       	adc	r26, r22
 72a:	b7 1f       	adc	r27, r23
 72c:	86 83       	std	Z+6, r24	; 0x06
 72e:	97 83       	std	Z+7, r25	; 0x07
 730:	a0 87       	std	Z+8, r26	; 0x08
 732:	b1 87       	std	Z+9, r27	; 0x09
 734:	42 87       	std	Z+10, r20	; 0x0a
 736:	53 87       	std	Z+11, r21	; 0x0b
 738:	64 87       	std	Z+12, r22	; 0x0c
 73a:	75 87       	std	Z+13, r23	; 0x0d
 73c:	80 e0       	ldi	r24, 0x00	; 0
 73e:	08 95       	ret

00000740 <s_GetTimerStateProp>:
 740:	cf 92       	push	r12
 742:	df 92       	push	r13
 744:	ef 92       	push	r14
 746:	ff 92       	push	r15
 748:	0f 93       	push	r16
 74a:	1f 93       	push	r17
 74c:	cf 93       	push	r28
 74e:	df 93       	push	r29
 750:	fc 01       	movw	r30, r24
 752:	a6 85       	ldd	r26, Z+14	; 0x0e
 754:	b7 85       	ldd	r27, Z+15	; 0x0f
 756:	cd 90       	ld	r12, X+
 758:	dd 90       	ld	r13, X+
 75a:	ed 90       	ld	r14, X+
 75c:	fc 90       	ld	r15, X
 75e:	02 81       	ldd	r16, Z+2	; 0x02
 760:	13 81       	ldd	r17, Z+3	; 0x03
 762:	24 81       	ldd	r18, Z+4	; 0x04
 764:	35 81       	ldd	r19, Z+5	; 0x05
 766:	86 81       	ldd	r24, Z+6	; 0x06
 768:	97 81       	ldd	r25, Z+7	; 0x07
 76a:	a0 85       	ldd	r26, Z+8	; 0x08
 76c:	b1 85       	ldd	r27, Z+9	; 0x09
 76e:	08 17       	cp	r16, r24
 770:	19 07       	cpc	r17, r25
 772:	2a 07       	cpc	r18, r26
 774:	3b 07       	cpc	r19, r27
 776:	80 f4       	brcc	.+32     	; 0x798 <s_GetTimerStateProp+0x58>
 778:	c8 16       	cp	r12, r24
 77a:	d9 06       	cpc	r13, r25
 77c:	ea 06       	cpc	r14, r26
 77e:	fb 06       	cpc	r15, r27
 780:	30 f5       	brcc	.+76     	; 0x7ce <s_GetTimerStateProp+0x8e>
 782:	c0 16       	cp	r12, r16
 784:	d1 06       	cpc	r13, r17
 786:	e2 06       	cpc	r14, r18
 788:	f3 06       	cpc	r15, r19
 78a:	30 f1       	brcs	.+76     	; 0x7d8 <s_GetTimerStateProp+0x98>
 78c:	8c 19       	sub	r24, r12
 78e:	9d 09       	sbc	r25, r13
 790:	ae 09       	sbc	r26, r14
 792:	bf 09       	sbc	r27, r15
 794:	10 e0       	ldi	r17, 0x00	; 0
 796:	29 c0       	rjmp	.+82     	; 0x7ea <s_GetTimerStateProp+0xaa>
 798:	c8 16       	cp	r12, r24
 79a:	d9 06       	cpc	r13, r25
 79c:	ea 06       	cpc	r14, r26
 79e:	fb 06       	cpc	r15, r27
 7a0:	28 f0       	brcs	.+10     	; 0x7ac <s_GetTimerStateProp+0x6c>
 7a2:	c0 16       	cp	r12, r16
 7a4:	d1 06       	cpc	r13, r17
 7a6:	e2 06       	cpc	r14, r18
 7a8:	f3 06       	cpc	r15, r19
 7aa:	d8 f0       	brcs	.+54     	; 0x7e2 <s_GetTimerStateProp+0xa2>
 7ac:	c8 16       	cp	r12, r24
 7ae:	d9 06       	cpc	r13, r25
 7b0:	ea 06       	cpc	r14, r26
 7b2:	fb 06       	cpc	r15, r27
 7b4:	30 f4       	brcc	.+12     	; 0x7c2 <s_GetTimerStateProp+0x82>
 7b6:	8c 19       	sub	r24, r12
 7b8:	9d 09       	sbc	r25, r13
 7ba:	ae 09       	sbc	r26, r14
 7bc:	bf 09       	sbc	r27, r15
 7be:	10 e0       	ldi	r17, 0x00	; 0
 7c0:	14 c0       	rjmp	.+40     	; 0x7ea <s_GetTimerStateProp+0xaa>
 7c2:	8c 19       	sub	r24, r12
 7c4:	9d 09       	sbc	r25, r13
 7c6:	ae 09       	sbc	r26, r14
 7c8:	bf 09       	sbc	r27, r15
 7ca:	10 e0       	ldi	r17, 0x00	; 0
 7cc:	0e c0       	rjmp	.+28     	; 0x7ea <s_GetTimerStateProp+0xaa>
 7ce:	10 e1       	ldi	r17, 0x10	; 16
 7d0:	80 e0       	ldi	r24, 0x00	; 0
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	dc 01       	movw	r26, r24
 7d6:	09 c0       	rjmp	.+18     	; 0x7ea <s_GetTimerStateProp+0xaa>
 7d8:	10 e1       	ldi	r17, 0x10	; 16
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	dc 01       	movw	r26, r24
 7e0:	04 c0       	rjmp	.+8      	; 0x7ea <s_GetTimerStateProp+0xaa>
 7e2:	10 e1       	ldi	r17, 0x10	; 16
 7e4:	80 e0       	ldi	r24, 0x00	; 0
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	dc 01       	movw	r26, r24
 7ea:	41 15       	cp	r20, r1
 7ec:	51 05       	cpc	r21, r1
 7ee:	29 f0       	breq	.+10     	; 0x7fa <s_GetTimerStateProp+0xba>
 7f0:	ea 01       	movw	r28, r20
 7f2:	88 83       	st	Y, r24
 7f4:	99 83       	std	Y+1, r25	; 0x01
 7f6:	aa 83       	std	Y+2, r26	; 0x02
 7f8:	bb 83       	std	Y+3, r27	; 0x03
 7fa:	61 15       	cp	r22, r1
 7fc:	71 05       	cpc	r23, r1
 7fe:	69 f0       	breq	.+26     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 800:	eb 01       	movw	r28, r22
 802:	22 81       	ldd	r18, Z+2	; 0x02
 804:	33 81       	ldd	r19, Z+3	; 0x03
 806:	44 81       	ldd	r20, Z+4	; 0x04
 808:	55 81       	ldd	r21, Z+5	; 0x05
 80a:	c7 01       	movw	r24, r14
 80c:	b6 01       	movw	r22, r12
 80e:	0e 94 4d 04 	call	0x89a	; 0x89a <TimerSwBasePassed>
 812:	68 83       	st	Y, r22
 814:	79 83       	std	Y+1, r23	; 0x01
 816:	8a 83       	std	Y+2, r24	; 0x02
 818:	9b 83       	std	Y+3, r25	; 0x03
 81a:	81 2f       	mov	r24, r17
 81c:	df 91       	pop	r29
 81e:	cf 91       	pop	r28
 820:	1f 91       	pop	r17
 822:	0f 91       	pop	r16
 824:	ff 90       	pop	r15
 826:	ef 90       	pop	r14
 828:	df 90       	pop	r13
 82a:	cf 90       	pop	r12
 82c:	08 95       	ret

0000082e <TimerSwInit>:
 82e:	00 97       	sbiw	r24, 0x00	; 0
 830:	31 f0       	breq	.+12     	; 0x83e <TimerSwInit+0x10>
 832:	61 15       	cp	r22, r1
 834:	71 05       	cpc	r23, r1
 836:	29 f0       	breq	.+10     	; 0x842 <TimerSwInit+0x14>
 838:	0e 94 6f 03 	call	0x6de	; 0x6de <s_Init>
 83c:	08 95       	ret
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	08 95       	ret
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	08 95       	ret

00000846 <TimerSwStartup>:
 846:	cf 92       	push	r12
 848:	df 92       	push	r13
 84a:	ef 92       	push	r14
 84c:	ff 92       	push	r15
 84e:	cf 93       	push	r28
 850:	df 93       	push	r29
 852:	ec 01       	movw	r28, r24
 854:	6a 01       	movw	r12, r20
 856:	7b 01       	movw	r14, r22
 858:	0e 94 53 03 	call	0x6a6	; 0x6a6 <s_IsValidHandle>
 85c:	81 11       	cpse	r24, r1
 85e:	05 c0       	rjmp	.+10     	; 0x86a <__stack+0xb>
 860:	b7 01       	movw	r22, r14
 862:	a6 01       	movw	r20, r12
 864:	ce 01       	movw	r24, r28
 866:	0e 94 83 03 	call	0x706	; 0x706 <s_Startup>
 86a:	df 91       	pop	r29
 86c:	cf 91       	pop	r28
 86e:	ff 90       	pop	r15
 870:	ef 90       	pop	r14
 872:	df 90       	pop	r13
 874:	cf 90       	pop	r12
 876:	08 95       	ret

00000878 <TimerSwIsExpired>:

StatusError TimerSwIsExpired(
        const TimerSwHandle * const handle)
{
 878:	cf 93       	push	r28
 87a:	df 93       	push	r29
 87c:	ec 01       	movw	r28, r24
    const StatusError err = s_IsValidAndActiveHandle(handle);
 87e:	0e 94 5f 03 	call	0x6be	; 0x6be <s_IsValidAndActiveHandle>

    if (StatusErrNone != err)
 882:	81 11       	cpse	r24, r1
 884:	07 c0       	rjmp	.+14     	; 0x894 <TimerSwIsExpired+0x1c>
    {
        return err;
    }

    return s_GetTimerStateProp(
 886:	40 e0       	ldi	r20, 0x00	; 0
 888:	50 e0       	ldi	r21, 0x00	; 0
 88a:	60 e0       	ldi	r22, 0x00	; 0
 88c:	70 e0       	ldi	r23, 0x00	; 0
 88e:	ce 01       	movw	r24, r28
 890:	0e 94 a0 03 	call	0x740	; 0x740 <s_GetTimerStateProp>
            handle,
            NULL,
            NULL);
}
 894:	df 91       	pop	r29
 896:	cf 91       	pop	r28
 898:	08 95       	ret

0000089a <TimerSwBasePassed>:
 ******************************************************************************/
TimerSwValue TimerSwBasePassed(
        const TimerSwValue timeCurr,
        const TimerSwValue timeStart)
{
    if (timeCurr >= timeStart)
 89a:	62 17       	cp	r22, r18
 89c:	73 07       	cpc	r23, r19
 89e:	84 07       	cpc	r24, r20
 8a0:	95 07       	cpc	r25, r21
 8a2:	28 f0       	brcs	.+10     	; 0x8ae <TimerSwBasePassed+0x14>
    {
        return timeCurr - timeStart;
 8a4:	62 1b       	sub	r22, r18
 8a6:	73 0b       	sbc	r23, r19
 8a8:	84 0b       	sbc	r24, r20
 8aa:	95 0b       	sbc	r25, r21
 8ac:	08 95       	ret
    }
    else
    {
        return (TIMER_SW_VALUE_MAX - timeStart) + 1 + timeCurr;
 8ae:	62 1b       	sub	r22, r18
 8b0:	73 0b       	sbc	r23, r19
 8b2:	84 0b       	sbc	r24, r20
 8b4:	95 0b       	sbc	r25, r21
    }
}
 8b6:	08 95       	ret

000008b8 <_exit>:
 8b8:	f8 94       	cli

000008ba <__stop_program>:
 8ba:	ff cf       	rjmp	.-2      	; 0x8ba <__stop_program>
