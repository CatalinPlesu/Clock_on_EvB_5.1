
Clock_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ec6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000ec6  00000f5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000064  00800072  00800072  00000f6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000207c  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000daf  00000000  00000000  0000326c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011cb  00000000  00000000  0000401b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004cc  00000000  00000000  000051e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b75  00000000  00000000  000056b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001198  00000000  00000000  00006229  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  000073c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3d       	cpi	r26, 0xD6	; 214
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a4 01 	call	0x348	; 0x348 <main>
  8a:	0c 94 61 07 	jmp	0xec2	; 0xec2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ControlInit>:
ButtonState buttonState[BUTTON_COUNT] = {};
static uint16_t counter[BUTTON_COUNT] = {};

void ControlInit(void)
{
    controlHandleConfig = ControlCfgInitAndGet();
  92:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ControlCfgInitAndGet>
  96:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <controlHandleConfig+0x1>
  9a:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <controlHandleConfig>
    ControlCfgAllLedsOff();
  9e:	0e 94 46 01 	call	0x28c	; 0x28c <ControlCfgAllLedsOff>
  a2:	08 95       	ret

000000a4 <ControlRoutine>:
}

void ControlRoutine(void)
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
    for (uint8_t i = 0; i < controlHandleConfig->buttonCount; i++) {
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	78 c0       	rjmp	.+240    	; 0x19c <ControlRoutine+0xf8>

        if (*controlHandleConfig->pinButton & (1 << controlHandleConfig->buttonPinValue[i])) {
  ac:	c4 81       	ldd	r28, Z+4	; 0x04
  ae:	d5 81       	ldd	r29, Z+5	; 0x05
  b0:	84 2f       	mov	r24, r20
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	df 01       	movw	r26, r30
  b6:	a8 0f       	add	r26, r24
  b8:	b9 1f       	adc	r27, r25
  ba:	28 81       	ld	r18, Y
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	1d 96       	adiw	r26, 0x0d	; 13
  c0:	0c 90       	ld	r0, X
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <ControlRoutine+0x24>
  c4:	35 95       	asr	r19
  c6:	27 95       	ror	r18
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <ControlRoutine+0x20>
  cc:	20 ff       	sbrs	r18, 0
  ce:	1a c0       	rjmp	.+52     	; 0x104 <ControlRoutine+0x60>
            if (counter[i] != 0) {
  d0:	dc 01       	movw	r26, r24
  d2:	aa 0f       	add	r26, r26
  d4:	bb 1f       	adc	r27, r27
  d6:	ae 58       	subi	r26, 0x8E	; 142
  d8:	bf 4f       	sbci	r27, 0xFF	; 255
  da:	2d 91       	ld	r18, X+
  dc:	3c 91       	ld	r19, X
  de:	21 15       	cp	r18, r1
  e0:	31 05       	cpc	r19, r1
  e2:	51 f0       	breq	.+20     	; 0xf8 <ControlRoutine+0x54>
                counter[i]--;
  e4:	dc 01       	movw	r26, r24
  e6:	aa 0f       	add	r26, r26
  e8:	bb 1f       	adc	r27, r27
  ea:	ae 58       	subi	r26, 0x8E	; 142
  ec:	bf 4f       	sbci	r27, 0xFF	; 255
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	31 09       	sbc	r19, r1
  f2:	2d 93       	st	X+, r18
  f4:	3c 93       	st	X, r19
  f6:	1e c0       	rjmp	.+60     	; 0x134 <ControlRoutine+0x90>
            } else 
			{
                buttonState[i] = ButtonStateRealesed;
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	dc 01       	movw	r26, r24
  fc:	a0 58       	subi	r26, 0x80	; 128
  fe:	bf 4f       	sbci	r27, 0xFF	; 255
 100:	2c 93       	st	X, r18
 102:	18 c0       	rjmp	.+48     	; 0x134 <ControlRoutine+0x90>
            }
        } else {
            if (counter[i] <= MAX_COUNTER_VALUE) {
 104:	dc 01       	movw	r26, r24
 106:	aa 0f       	add	r26, r26
 108:	bb 1f       	adc	r27, r27
 10a:	ae 58       	subi	r26, 0x8E	; 142
 10c:	bf 4f       	sbci	r27, 0xFF	; 255
 10e:	2d 91       	ld	r18, X+
 110:	3c 91       	ld	r19, X
 112:	25 36       	cpi	r18, 0x65	; 101
 114:	31 05       	cpc	r19, r1
 116:	50 f4       	brcc	.+20     	; 0x12c <ControlRoutine+0x88>
                counter[i]++;
 118:	dc 01       	movw	r26, r24
 11a:	aa 0f       	add	r26, r26
 11c:	bb 1f       	adc	r27, r27
 11e:	ae 58       	subi	r26, 0x8E	; 142
 120:	bf 4f       	sbci	r27, 0xFF	; 255
 122:	2f 5f       	subi	r18, 0xFF	; 255
 124:	3f 4f       	sbci	r19, 0xFF	; 255
 126:	2d 93       	st	X+, r18
 128:	3c 93       	st	X, r19
 12a:	04 c0       	rjmp	.+8      	; 0x134 <ControlRoutine+0x90>
            } 
			else 
			{
                buttonState[i] = ButtonStatePressed;
 12c:	dc 01       	movw	r26, r24
 12e:	a0 58       	subi	r26, 0x80	; 128
 130:	bf 4f       	sbci	r27, 0xFF	; 255
 132:	1c 92       	st	X, r1
            }
        }

        if (buttonState[i] == ButtonStateRealesed) {
 134:	dc 01       	movw	r26, r24
 136:	a0 58       	subi	r26, 0x80	; 128
 138:	bf 4f       	sbci	r27, 0xFF	; 255
 13a:	2c 91       	ld	r18, X
 13c:	21 30       	cpi	r18, 0x01	; 1
 13e:	29 f4       	brne	.+10     	; 0x14a <ControlRoutine+0xa6>
            togglState[i] = TogglStateNo;
 140:	dc 01       	movw	r26, r24
 142:	a9 57       	subi	r26, 0x79	; 121
 144:	bf 4f       	sbci	r27, 0xFF	; 255
 146:	1c 92       	st	X, r1
 148:	0b c0       	rjmp	.+22     	; 0x160 <ControlRoutine+0xbc>
        } else {
            if (togglState[i] == TogglStateNo) {
 14a:	dc 01       	movw	r26, r24
 14c:	a9 57       	subi	r26, 0x79	; 121
 14e:	bf 4f       	sbci	r27, 0xFF	; 255
 150:	2c 91       	ld	r18, X
 152:	21 11       	cpse	r18, r1
 154:	05 c0       	rjmp	.+10     	; 0x160 <ControlRoutine+0xbc>
                togglState[i] = TogglStateWaiting;
 156:	21 e0       	ldi	r18, 0x01	; 1
 158:	dc 01       	movw	r26, r24
 15a:	a9 57       	subi	r26, 0x79	; 121
 15c:	bf 4f       	sbci	r27, 0xFF	; 255
 15e:	2c 93       	st	X, r18
            }
        }

        if (togglState[i] == TogglStateWaiting) {
 160:	dc 01       	movw	r26, r24
 162:	a9 57       	subi	r26, 0x79	; 121
 164:	bf 4f       	sbci	r27, 0xFF	; 255
 166:	2c 91       	ld	r18, X
 168:	21 30       	cpi	r18, 0x01	; 1
 16a:	b9 f4       	brne	.+46     	; 0x19a <ControlRoutine+0xf6>
			if(i < controlHandleConfig->ledCount)
 16c:	26 81       	ldd	r18, Z+6	; 0x06
 16e:	42 17       	cp	r20, r18
 170:	78 f4       	brcc	.+30     	; 0x190 <ControlRoutine+0xec>
			    *controlHandleConfig->portLed ^= (1 << controlHandleConfig->ledPinValue[i]);
 172:	a0 81       	ld	r26, Z
 174:	b1 81       	ldd	r27, Z+1	; 0x01
 176:	e8 0f       	add	r30, r24
 178:	f9 1f       	adc	r31, r25
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	00 84       	ldd	r0, Z+8	; 0x08
 180:	02 c0       	rjmp	.+4      	; 0x186 <ControlRoutine+0xe2>
 182:	22 0f       	add	r18, r18
 184:	33 1f       	adc	r19, r19
 186:	0a 94       	dec	r0
 188:	e2 f7       	brpl	.-8      	; 0x182 <ControlRoutine+0xde>
 18a:	3c 91       	ld	r19, X
 18c:	23 27       	eor	r18, r19
 18e:	2c 93       	st	X, r18
            togglState[i] = TogglStateDone;
 190:	fc 01       	movw	r30, r24
 192:	e9 57       	subi	r30, 0x79	; 121
 194:	ff 4f       	sbci	r31, 0xFF	; 255
 196:	22 e0       	ldi	r18, 0x02	; 2
 198:	20 83       	st	Z, r18
    ControlCfgAllLedsOff();
}

void ControlRoutine(void)
{
    for (uint8_t i = 0; i < controlHandleConfig->buttonCount; i++) {
 19a:	4f 5f       	subi	r20, 0xFF	; 255
 19c:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <controlHandleConfig>
 1a0:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <controlHandleConfig+0x1>
 1a4:	87 81       	ldd	r24, Z+7	; 0x07
 1a6:	48 17       	cp	r20, r24
 1a8:	08 f4       	brcc	.+2      	; 0x1ac <ControlRoutine+0x108>
 1aa:	80 cf       	rjmp	.-256    	; 0xac <ControlRoutine+0x8>
			if(i < controlHandleConfig->ledCount)
			    *controlHandleConfig->portLed ^= (1 << controlHandleConfig->ledPinValue[i]);
            togglState[i] = TogglStateDone;
        }
    }
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <ControlCfgInitAndGet>:

static ControlHandleConfig controlHandleConfig;

ControlHandleConfig* ControlCfgInitAndGet()
{
    controlHandleConfig.portLed = &PORT_LED;
 1b2:	e0 e9       	ldi	r30, 0x90	; 144
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	8b e3       	ldi	r24, 0x3B	; 59
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	91 83       	std	Z+1, r25	; 0x01
 1bc:	80 83       	st	Z, r24
    controlHandleConfig.portButton = &PORT_BUTTON;
 1be:	82 e3       	ldi	r24, 0x32	; 50
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	93 83       	std	Z+3, r25	; 0x03
 1c4:	82 83       	std	Z+2, r24	; 0x02
    controlHandleConfig.pinButton = &PIN_BUTTON;
 1c6:	80 e3       	ldi	r24, 0x30	; 48
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	95 83       	std	Z+5, r25	; 0x05
 1cc:	84 83       	std	Z+4, r24	; 0x04

    controlHandleConfig.ledPinValue[0] = PIN_LED_CLOCK;
 1ce:	10 86       	std	Z+8, r1	; 0x08
    controlHandleConfig.ledPinValue[1] = PIN_LED_TIMER;
 1d0:	41 e0       	ldi	r20, 0x01	; 1
 1d2:	41 87       	std	Z+9, r20	; 0x09
    controlHandleConfig.ledPinValue[2] = PIN_LED_ALARM;
 1d4:	32 e0       	ldi	r19, 0x02	; 2
 1d6:	32 87       	std	Z+10, r19	; 0x0a
    controlHandleConfig.ledPinValue[3] = PIN_LED_CONTDOWN;
 1d8:	23 e0       	ldi	r18, 0x03	; 3
 1da:	23 87       	std	Z+11, r18	; 0x0b
    controlHandleConfig.ledPinValue[4] = PIN_LED_TEMPERATURE;
 1dc:	94 e0       	ldi	r25, 0x04	; 4
 1de:	94 87       	std	Z+12, r25	; 0x0c
    controlHandleConfig.ledCount = LED_COUNT;
 1e0:	85 e0       	ldi	r24, 0x05	; 5
 1e2:	86 83       	std	Z+6, r24	; 0x06

    controlHandleConfig.buttonPinValue[0] = PIN_BUTTON_POWER;
 1e4:	15 86       	std	Z+13, r1	; 0x0d
    controlHandleConfig.buttonPinValue[1] = PIN_BUTTON_NEXT;
 1e6:	46 87       	std	Z+14, r20	; 0x0e
    controlHandleConfig.buttonPinValue[2] = PIN_BUTTON_TOGGLE;
 1e8:	37 87       	std	Z+15, r19	; 0x0f
    controlHandleConfig.buttonPinValue[3] = PIN_BUTTON_INCREASE;
 1ea:	20 8b       	std	Z+16, r18	; 0x10
    controlHandleConfig.buttonPinValue[4] = PIN_BUTTON_DECREASE;
 1ec:	91 8b       	std	Z+17, r25	; 0x11
    controlHandleConfig.buttonPinValue[5] = PIN_BUTTON_OK;
 1ee:	82 8b       	std	Z+18, r24	; 0x12
    controlHandleConfig.buttonPinValue[6] = PIN_BUTTON_ABORT;
 1f0:	86 e0       	ldi	r24, 0x06	; 6
 1f2:	83 8b       	std	Z+19, r24	; 0x13
    controlHandleConfig.buttonCount = BUTTON_COUNT;
 1f4:	87 e0       	ldi	r24, 0x07	; 7
 1f6:	87 83       	std	Z+7, r24	; 0x07

    for (uint8_t i = 0; i < controlHandleConfig.ledCount; i++)
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	10 c0       	rjmp	.+32     	; 0x21c <ControlCfgInitAndGet+0x6a>
        PORT_DIRECTION_LED |= (1 << controlHandleConfig.ledPinValue[i]);
 1fc:	3a b3       	in	r19, 0x1a	; 26
 1fe:	e2 2f       	mov	r30, r18
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	e0 57       	subi	r30, 0x70	; 112
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	00 84       	ldd	r0, Z+8	; 0x08
 20c:	02 c0       	rjmp	.+4      	; 0x212 <ControlCfgInitAndGet+0x60>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <ControlCfgInitAndGet+0x5c>
 216:	83 2b       	or	r24, r19
 218:	8a bb       	out	0x1a, r24	; 26
    controlHandleConfig.buttonPinValue[4] = PIN_BUTTON_DECREASE;
    controlHandleConfig.buttonPinValue[5] = PIN_BUTTON_OK;
    controlHandleConfig.buttonPinValue[6] = PIN_BUTTON_ABORT;
    controlHandleConfig.buttonCount = BUTTON_COUNT;

    for (uint8_t i = 0; i < controlHandleConfig.ledCount; i++)
 21a:	2f 5f       	subi	r18, 0xFF	; 255
 21c:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <controlHandleConfig+0x6>
 220:	28 17       	cp	r18, r24
 222:	60 f3       	brcs	.-40     	; 0x1fc <ControlCfgInitAndGet+0x4a>
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	11 c0       	rjmp	.+34     	; 0x24a <ControlCfgInitAndGet+0x98>
        PORT_DIRECTION_LED |= (1 << controlHandleConfig.ledPinValue[i]);

    for (uint8_t i = 0; i < controlHandleConfig.ledCount; i++)
        PORT_DIRECTION_BUTTON &= ~(1 << controlHandleConfig.ledPinValue[i]);
 228:	31 b3       	in	r19, 0x11	; 17
 22a:	e2 2f       	mov	r30, r18
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	e0 57       	subi	r30, 0x70	; 112
 230:	ff 4f       	sbci	r31, 0xFF	; 255
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	00 84       	ldd	r0, Z+8	; 0x08
 238:	02 c0       	rjmp	.+4      	; 0x23e <ControlCfgInitAndGet+0x8c>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	0a 94       	dec	r0
 240:	e2 f7       	brpl	.-8      	; 0x23a <ControlCfgInitAndGet+0x88>
 242:	80 95       	com	r24
 244:	83 23       	and	r24, r19
 246:	81 bb       	out	0x11, r24	; 17
    controlHandleConfig.buttonCount = BUTTON_COUNT;

    for (uint8_t i = 0; i < controlHandleConfig.ledCount; i++)
        PORT_DIRECTION_LED |= (1 << controlHandleConfig.ledPinValue[i]);

    for (uint8_t i = 0; i < controlHandleConfig.ledCount; i++)
 248:	2f 5f       	subi	r18, 0xFF	; 255
 24a:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <controlHandleConfig+0x6>
 24e:	28 17       	cp	r18, r24
 250:	58 f3       	brcs	.-42     	; 0x228 <ControlCfgInitAndGet+0x76>
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	14 c0       	rjmp	.+40     	; 0x27e <ControlCfgInitAndGet+0xcc>
        PORT_DIRECTION_BUTTON &= ~(1 << controlHandleConfig.ledPinValue[i]);
		
	for(uint8_t i = 0; i < controlHandleConfig.buttonCount; i++)
		*controlHandleConfig.portButton |= (1 << controlHandleConfig.buttonPinValue[i]);
 256:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <controlHandleConfig+0x2>
 25a:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <controlHandleConfig+0x3>
 25e:	e2 2f       	mov	r30, r18
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	e0 57       	subi	r30, 0x70	; 112
 264:	ff 4f       	sbci	r31, 0xFF	; 255
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	05 84       	ldd	r0, Z+13	; 0x0d
 26c:	02 c0       	rjmp	.+4      	; 0x272 <ControlCfgInitAndGet+0xc0>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	0a 94       	dec	r0
 274:	e2 f7       	brpl	.-8      	; 0x26e <ControlCfgInitAndGet+0xbc>
 276:	9c 91       	ld	r25, X
 278:	89 2b       	or	r24, r25
 27a:	8c 93       	st	X, r24
        PORT_DIRECTION_LED |= (1 << controlHandleConfig.ledPinValue[i]);

    for (uint8_t i = 0; i < controlHandleConfig.ledCount; i++)
        PORT_DIRECTION_BUTTON &= ~(1 << controlHandleConfig.ledPinValue[i]);
		
	for(uint8_t i = 0; i < controlHandleConfig.buttonCount; i++)
 27c:	2f 5f       	subi	r18, 0xFF	; 255
 27e:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <controlHandleConfig+0x7>
 282:	28 17       	cp	r18, r24
 284:	40 f3       	brcs	.-48     	; 0x256 <ControlCfgInitAndGet+0xa4>
		*controlHandleConfig.portButton |= (1 << controlHandleConfig.buttonPinValue[i]);

    return &controlHandleConfig;
}
 286:	80 e9       	ldi	r24, 0x90	; 144
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	08 95       	ret

0000028c <ControlCfgAllLedsOff>:

void ControlCfgAllLedsOff(void)
{
    for (uint8_t i = 0; i < controlHandleConfig.ledCount; i++)
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	14 c0       	rjmp	.+40     	; 0x2b8 <ControlCfgAllLedsOff+0x2c>
        *controlHandleConfig.portLed |= (1 << controlHandleConfig.ledPinValue[i]);
 290:	a0 91 90 00 	lds	r26, 0x0090	; 0x800090 <controlHandleConfig>
 294:	b0 91 91 00 	lds	r27, 0x0091	; 0x800091 <controlHandleConfig+0x1>
 298:	e2 2f       	mov	r30, r18
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	e0 57       	subi	r30, 0x70	; 112
 29e:	ff 4f       	sbci	r31, 0xFF	; 255
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	00 84       	ldd	r0, Z+8	; 0x08
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <ControlCfgAllLedsOff+0x20>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	0a 94       	dec	r0
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <ControlCfgAllLedsOff+0x1c>
 2b0:	9c 91       	ld	r25, X
 2b2:	89 2b       	or	r24, r25
 2b4:	8c 93       	st	X, r24
    return &controlHandleConfig;
}

void ControlCfgAllLedsOff(void)
{
    for (uint8_t i = 0; i < controlHandleConfig.ledCount; i++)
 2b6:	2f 5f       	subi	r18, 0xFF	; 255
 2b8:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <controlHandleConfig+0x6>
 2bc:	28 17       	cp	r18, r24
 2be:	40 f3       	brcs	.-48     	; 0x290 <ControlCfgAllLedsOff+0x4>
        *controlHandleConfig.portLed |= (1 << controlHandleConfig.ledPinValue[i]);
}
 2c0:	08 95       	ret

000002c2 <__vector_16>:
Time currentTime = { 16, 26 };
Time oldTime = { 0, 0 };
float a = 9752;

//const AdcValue* adcValue = NULL;
ISR(ADC_vect){
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	2f 93       	push	r18
 2ce:	3f 93       	push	r19
 2d0:	4f 93       	push	r20
 2d2:	5f 93       	push	r21
 2d4:	6f 93       	push	r22
 2d6:	7f 93       	push	r23
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
 2dc:	af 93       	push	r26
 2de:	bf 93       	push	r27
 2e0:	ef 93       	push	r30
 2e2:	ff 93       	push	r31
	a = ADC;
 2e4:	64 b1       	in	r22, 0x04	; 4
 2e6:	75 b1       	in	r23, 0x05	; 5
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__floatunsisf>
 2f0:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
 2f4:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2f8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 2fc:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
}
 300:	ff 91       	pop	r31
 302:	ef 91       	pop	r30
 304:	bf 91       	pop	r27
 306:	af 91       	pop	r26
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	7f 91       	pop	r23
 30e:	6f 91       	pop	r22
 310:	5f 91       	pop	r21
 312:	4f 91       	pop	r20
 314:	3f 91       	pop	r19
 316:	2f 91       	pop	r18
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <AdcInit>:
        SevSegRutine();
    }
}

void AdcInit(){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));								 // 16Mhz/128 = 125Khz the ADC reference clock
 322:	86 b1       	in	r24, 0x06	; 6
 324:	87 60       	ori	r24, 0x07	; 7
 326:	86 b9       	out	0x06, r24	; 6
	ADMUX  |= (1<<REFS0);														 // Voltage reference from Avcc (5v)
 328:	87 b1       	in	r24, 0x07	; 7
 32a:	80 64       	ori	r24, 0x40	; 64
 32c:	87 b9       	out	0x07, r24	; 7
	ADMUX  |= PA7;
 32e:	87 b1       	in	r24, 0x07	; 7
 330:	87 60       	ori	r24, 0x07	; 7
 332:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN);		// Turn on ADC
 334:	86 b1       	in	r24, 0x06	; 6
 336:	80 68       	ori	r24, 0x80	; 128
 338:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADIE);	   // Conversion Complete	interrupt is activated.
 33a:	86 b1       	in	r24, 0x06	; 6
 33c:	88 60       	ori	r24, 0x08	; 8
 33e:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADSC);	   // Start to convert
 340:	86 b1       	in	r24, 0x06	; 6
 342:	80 64       	ori	r24, 0x40	; 64
 344:	86 b9       	out	0x06, r24	; 6
 346:	08 95       	ret

00000348 <main>:

void AdcInit();

int main(void)
{
	TimerInitCfg();
 348:	0e 94 fe 03 	call	0x7fc	; 0x7fc <TimerInitCfg>
	TimerEnableCfg(true);
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 0e 04 	call	0x81c	; 0x81c <TimerEnableCfg>
	
    SevSegInit();
 352:	0e 94 47 03 	call	0x68e	; 0x68e <SevSegInit>
    ControlInit();
 356:	0e 94 49 00 	call	0x92	; 0x92 <ControlInit>
	
	AdcInit();
 35a:	0e 94 91 01 	call	0x322	; 0x322 <AdcInit>
	//adcValue = GetAdcValue();
	
    sei();
 35e:	78 94       	sei
	
	StatusError err;
	TimerSwInitParam* pTimerSwInitParam = TimerGetIntervalPointerCfg();
 360:	0e 94 17 04 	call	0x82e	; 0x82e <TimerGetIntervalPointerCfg>
	err = TimerSwInit(pTimerSwInitParam, &timerSwHandle);
 364:	66 ea       	ldi	r22, 0xA6	; 166
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	0e 94 de 04 	call	0x9bc	; 0x9bc <TimerSwInit>
	if (err == StatusErrNone) {
 36c:	81 11       	cpse	r24, r1
 36e:	08 c0       	rjmp	.+16     	; 0x380 <main+0x38>
		TimerSwStartup(&timerSwHandle, 1000);
 370:	48 ee       	ldi	r20, 0xE8	; 232
 372:	53 e0       	ldi	r21, 0x03	; 3
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	86 ea       	ldi	r24, 0xA6	; 166
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TimerSwStartup>
	}

    while (1) {
        ControlRoutine();
 380:	0e 94 52 00 	call	0xa4	; 0xa4 <ControlRoutine>
        
        err = TimerSwIsExpired(&timerSwHandle);
 384:	86 ea       	ldi	r24, 0xA6	; 166
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 03 05 	call	0xa06	; 0xa06 <TimerSwIsExpired>
        if (err == StatusErrTime) {
 38c:	80 31       	cpi	r24, 0x10	; 16
 38e:	e1 f4       	brne	.+56     	; 0x3c8 <main+0x80>
			ADCSRA |= (1<<ADSC);	   // Start to convert
 390:	86 b1       	in	r24, 0x06	; 6
 392:	80 64       	ori	r24, 0x40	; 64
 394:	86 b9       	out	0x06, r24	; 6
			//AdcStartConversion();
			
            currentTime.minutes++;
 396:	e4 e6       	ldi	r30, 0x64	; 100
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	81 81       	ldd	r24, Z+1	; 0x01
 39c:	8f 5f       	subi	r24, 0xFF	; 255
 39e:	81 83       	std	Z+1, r24	; 0x01
            if(currentTime.minutes>=60){
 3a0:	8c 33       	cpi	r24, 0x3C	; 60
 3a2:	50 f0       	brcs	.+20     	; 0x3b8 <main+0x70>
                currentTime.minutes-=60;
 3a4:	8c 53       	subi	r24, 0x3C	; 60
 3a6:	81 83       	std	Z+1, r24	; 0x01
                currentTime.hours++;
 3a8:	80 81       	ld	r24, Z
 3aa:	8f 5f       	subi	r24, 0xFF	; 255
 3ac:	80 83       	st	Z, r24
                if (currentTime.hours>=24)
 3ae:	88 31       	cpi	r24, 0x18	; 24
 3b0:	18 f0       	brcs	.+6      	; 0x3b8 <main+0x70>
                    currentTime.hours-=24;
 3b2:	88 51       	subi	r24, 0x18	; 24
 3b4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <currentTime>
            }
            TimerSwStartup(&timerSwHandle, 1000);
 3b8:	48 ee       	ldi	r20, 0xE8	; 232
 3ba:	53 e0       	ldi	r21, 0x03	; 3
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	86 ea       	ldi	r24, 0xA6	; 166
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TimerSwStartup>
        }

        if (oldTime.hours != currentTime.hours || oldTime.minutes != currentTime.minutes) {
 3c8:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <oldTime>
 3cc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentTime>
 3d0:	98 13       	cpse	r25, r24
 3d2:	06 c0       	rjmp	.+12     	; 0x3e0 <main+0x98>
 3d4:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <oldTime+0x1>
 3d8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <currentTime+0x1>
 3dc:	98 17       	cp	r25, r24
 3de:	91 f0       	breq	.+36     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
            //SevSegSetTimeVal(currentTime);
			SevSegSetFloatVal(a);
 3e0:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3e4:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3e8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 3ec:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 3f0:	0e 94 8e 03 	call	0x71c	; 0x71c <SevSegSetFloatVal>
			//SevSegSetFloatVal((float)adcValue->adcChannel[0]);
            oldTime = currentTime;
 3f4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentTime>
 3f8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentTime+0x1>
 3fc:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <oldTime+0x1>
 400:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <oldTime>
        }

        SevSegRutine();
 404:	0e 94 66 03 	call	0x6cc	; 0x6cc <SevSegRutine>
    }
 408:	bb cf       	rjmp	.-138    	; 0x380 <main+0x38>

0000040a <FloatToBuff>:
StatusError SevSegSetTimeVal(Time time)
{
	TimeToBuff(time,digitsValue);
	
	return StatusErrNone;
}
 40a:	4f 92       	push	r4
 40c:	5f 92       	push	r5
 40e:	6f 92       	push	r6
 410:	7f 92       	push	r7
 412:	8f 92       	push	r8
 414:	9f 92       	push	r9
 416:	af 92       	push	r10
 418:	bf 92       	push	r11
 41a:	cf 92       	push	r12
 41c:	df 92       	push	r13
 41e:	ef 92       	push	r14
 420:	ff 92       	push	r15
 422:	0f 93       	push	r16
 424:	1f 93       	push	r17
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	4b 01       	movw	r8, r22
 42c:	5c 01       	movw	r10, r24
 42e:	8a 01       	movw	r16, r20
 430:	20 e0       	ldi	r18, 0x00	; 0
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	a9 01       	movw	r20, r18
 436:	0e 94 90 05 	call	0xb20	; 0xb20 <__cmpsf2>
 43a:	88 23       	and	r24, r24
 43c:	2c f5       	brge	.+74     	; 0x488 <FloatToBuff+0x7e>
 43e:	b7 fa       	bst	r11, 7
 440:	b0 94       	com	r11
 442:	b7 f8       	bld	r11, 7
 444:	b0 94       	com	r11
 446:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <segCode+0xb>
 44a:	f8 01       	movw	r30, r16
 44c:	80 83       	st	Z, r24
 44e:	20 e0       	ldi	r18, 0x00	; 0
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	4a e7       	ldi	r20, 0x7A	; 122
 454:	54 e4       	ldi	r21, 0x44	; 68
 456:	c5 01       	movw	r24, r10
 458:	b4 01       	movw	r22, r8
 45a:	0e 94 ef 06 	call	0xdde	; 0xdde <__gesf2>
 45e:	88 23       	and	r24, r24
 460:	84 f1       	brlt	.+96     	; 0x4c2 <FloatToBuff+0xb8>
 462:	0f 2e       	mov	r0, r31
 464:	81 2c       	mov	r8, r1
 466:	f0 ec       	ldi	r31, 0xC0	; 192
 468:	9f 2e       	mov	r9, r31
 46a:	f9 e7       	ldi	r31, 0x79	; 121
 46c:	af 2e       	mov	r10, r31
 46e:	f4 e4       	ldi	r31, 0x44	; 68
 470:	bf 2e       	mov	r11, r31
 472:	f0 2d       	mov	r31, r0
 474:	c1 e0       	ldi	r28, 0x01	; 1
 476:	0f 2e       	mov	r0, r31
 478:	c1 2c       	mov	r12, r1
 47a:	d1 2c       	mov	r13, r1
 47c:	f8 ec       	ldi	r31, 0xC8	; 200
 47e:	ef 2e       	mov	r14, r31
 480:	f2 e4       	ldi	r31, 0x42	; 66
 482:	ff 2e       	mov	r15, r31
 484:	f0 2d       	mov	r31, r0
 486:	30 c0       	rjmp	.+96     	; 0x4e8 <FloatToBuff+0xde>
 488:	20 e0       	ldi	r18, 0x00	; 0
 48a:	30 e4       	ldi	r19, 0x40	; 64
 48c:	4c e1       	ldi	r20, 0x1C	; 28
 48e:	56 e4       	ldi	r21, 0x46	; 70
 490:	c5 01       	movw	r24, r10
 492:	b4 01       	movw	r22, r8
 494:	0e 94 ef 06 	call	0xdde	; 0xdde <__gesf2>
 498:	88 23       	and	r24, r24
 49a:	ec f0       	brlt	.+58     	; 0x4d6 <FloatToBuff+0xcc>
 49c:	0f 2e       	mov	r0, r31
 49e:	81 2c       	mov	r8, r1
 4a0:	fc e3       	ldi	r31, 0x3C	; 60
 4a2:	9f 2e       	mov	r9, r31
 4a4:	fc e1       	ldi	r31, 0x1C	; 28
 4a6:	af 2e       	mov	r10, r31
 4a8:	f6 e4       	ldi	r31, 0x46	; 70
 4aa:	bf 2e       	mov	r11, r31
 4ac:	f0 2d       	mov	r31, r0
 4ae:	c0 e0       	ldi	r28, 0x00	; 0
 4b0:	0f 2e       	mov	r0, r31
 4b2:	c1 2c       	mov	r12, r1
 4b4:	d1 2c       	mov	r13, r1
 4b6:	fa e7       	ldi	r31, 0x7A	; 122
 4b8:	ef 2e       	mov	r14, r31
 4ba:	f4 e4       	ldi	r31, 0x44	; 68
 4bc:	ff 2e       	mov	r15, r31
 4be:	f0 2d       	mov	r31, r0
 4c0:	13 c0       	rjmp	.+38     	; 0x4e8 <FloatToBuff+0xde>
 4c2:	c1 e0       	ldi	r28, 0x01	; 1
 4c4:	0f 2e       	mov	r0, r31
 4c6:	c1 2c       	mov	r12, r1
 4c8:	d1 2c       	mov	r13, r1
 4ca:	f8 ec       	ldi	r31, 0xC8	; 200
 4cc:	ef 2e       	mov	r14, r31
 4ce:	f2 e4       	ldi	r31, 0x42	; 66
 4d0:	ff 2e       	mov	r15, r31
 4d2:	f0 2d       	mov	r31, r0
 4d4:	09 c0       	rjmp	.+18     	; 0x4e8 <FloatToBuff+0xde>
 4d6:	c0 e0       	ldi	r28, 0x00	; 0
 4d8:	0f 2e       	mov	r0, r31
 4da:	c1 2c       	mov	r12, r1
 4dc:	d1 2c       	mov	r13, r1
 4de:	fa e7       	ldi	r31, 0x7A	; 122
 4e0:	ef 2e       	mov	r14, r31
 4e2:	f4 e4       	ldi	r31, 0x44	; 68
 4e4:	ff 2e       	mov	r15, r31
 4e6:	f0 2d       	mov	r31, r0
 4e8:	20 e0       	ldi	r18, 0x00	; 0
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	4a e7       	ldi	r20, 0x7A	; 122
 4ee:	54 e4       	ldi	r21, 0x44	; 68
 4f0:	c5 01       	movw	r24, r10
 4f2:	b4 01       	movw	r22, r8
 4f4:	0e 94 f4 06 	call	0xde8	; 0xde8 <__mulsf3>
 4f8:	2b 01       	movw	r4, r22
 4fa:	3c 01       	movw	r6, r24
 4fc:	c5 01       	movw	r24, r10
 4fe:	b4 01       	movw	r22, r8
 500:	0e 94 07 06 	call	0xc0e	; 0xc0e <__fixsfsi>
 504:	28 ee       	ldi	r18, 0xE8	; 232
 506:	33 e0       	ldi	r19, 0x03	; 3
 508:	26 9f       	mul	r18, r22
 50a:	a0 01       	movw	r20, r0
 50c:	27 9f       	mul	r18, r23
 50e:	50 0d       	add	r21, r0
 510:	36 9f       	mul	r19, r22
 512:	50 0d       	add	r21, r0
 514:	11 24       	eor	r1, r1
 516:	ba 01       	movw	r22, r20
 518:	55 0f       	add	r21, r21
 51a:	88 0b       	sbc	r24, r24
 51c:	99 0b       	sbc	r25, r25
 51e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__floatsisf>
 522:	9b 01       	movw	r18, r22
 524:	ac 01       	movw	r20, r24
 526:	c3 01       	movw	r24, r6
 528:	b2 01       	movw	r22, r4
 52a:	0e 94 23 05 	call	0xa46	; 0xa46 <__subsf3>
 52e:	2b 01       	movw	r4, r22
 530:	3c 01       	movw	r6, r24
 532:	d0 e0       	ldi	r29, 0x00	; 0
 534:	42 c0       	rjmp	.+132    	; 0x5ba <FloatToBuff+0x1b0>
 536:	a5 01       	movw	r20, r10
 538:	94 01       	movw	r18, r8
 53a:	c7 01       	movw	r24, r14
 53c:	b6 01       	movw	r22, r12
 53e:	0e 94 90 05 	call	0xb20	; 0xb20 <__cmpsf2>
 542:	18 16       	cp	r1, r24
 544:	3c f1       	brlt	.+78     	; 0x594 <FloatToBuff+0x18a>
 546:	a7 01       	movw	r20, r14
 548:	96 01       	movw	r18, r12
 54a:	c5 01       	movw	r24, r10
 54c:	b4 01       	movw	r22, r8
 54e:	0e 94 95 05 	call	0xb2a	; 0xb2a <__divsf3>
 552:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fixunssfsi>
 556:	d8 01       	movw	r26, r16
 558:	ac 0f       	add	r26, r28
 55a:	b1 1d       	adc	r27, r1
 55c:	e6 2f       	mov	r30, r22
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	ea 59       	subi	r30, 0x9A	; 154
 562:	ff 4f       	sbci	r31, 0xFF	; 255
 564:	80 81       	ld	r24, Z
 566:	8c 93       	st	X, r24
 568:	cf 5f       	subi	r28, 0xFF	; 255
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__floatunsisf>
 574:	9b 01       	movw	r18, r22
 576:	ac 01       	movw	r20, r24
 578:	c7 01       	movw	r24, r14
 57a:	b6 01       	movw	r22, r12
 57c:	0e 94 f4 06 	call	0xde8	; 0xde8 <__mulsf3>
 580:	9b 01       	movw	r18, r22
 582:	ac 01       	movw	r20, r24
 584:	c5 01       	movw	r24, r10
 586:	b4 01       	movw	r22, r8
 588:	0e 94 23 05 	call	0xa46	; 0xa46 <__subsf3>
 58c:	4b 01       	movw	r8, r22
 58e:	5c 01       	movw	r10, r24
 590:	d1 e0       	ldi	r29, 0x01	; 1
 592:	09 c0       	rjmp	.+18     	; 0x5a6 <FloatToBuff+0x19c>
 594:	dd 23       	and	r29, r29
 596:	39 f0       	breq	.+14     	; 0x5a6 <FloatToBuff+0x19c>
 598:	f8 01       	movw	r30, r16
 59a:	ec 0f       	add	r30, r28
 59c:	f1 1d       	adc	r31, r1
 59e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <segCode>
 5a2:	80 83       	st	Z, r24
 5a4:	cf 5f       	subi	r28, 0xFF	; 255
 5a6:	20 e0       	ldi	r18, 0x00	; 0
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	40 e2       	ldi	r20, 0x20	; 32
 5ac:	51 e4       	ldi	r21, 0x41	; 65
 5ae:	c7 01       	movw	r24, r14
 5b0:	b6 01       	movw	r22, r12
 5b2:	0e 94 95 05 	call	0xb2a	; 0xb2a <__divsf3>
 5b6:	6b 01       	movw	r12, r22
 5b8:	7c 01       	movw	r14, r24
 5ba:	20 e0       	ldi	r18, 0x00	; 0
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	40 e8       	ldi	r20, 0x80	; 128
 5c0:	5f e3       	ldi	r21, 0x3F	; 63
 5c2:	c7 01       	movw	r24, r14
 5c4:	b6 01       	movw	r22, r12
 5c6:	0e 94 ef 06 	call	0xdde	; 0xdde <__gesf2>
 5ca:	88 23       	and	r24, r24
 5cc:	0c f0       	brlt	.+2      	; 0x5d0 <FloatToBuff+0x1c6>
 5ce:	b3 cf       	rjmp	.-154    	; 0x536 <FloatToBuff+0x12c>
 5d0:	c4 30       	cpi	r28, 0x04	; 4
 5d2:	08 f0       	brcs	.+2      	; 0x5d6 <FloatToBuff+0x1cc>
 5d4:	4b c0       	rjmp	.+150    	; 0x66c <FloatToBuff+0x262>
 5d6:	c1 11       	cpse	r28, r1
 5d8:	05 c0       	rjmp	.+10     	; 0x5e4 <FloatToBuff+0x1da>
 5da:	f8 01       	movw	r30, r16
 5dc:	ec 0f       	add	r30, r28
 5de:	f1 1d       	adc	r31, r1
 5e0:	10 82       	st	Z, r1
 5e2:	cf 5f       	subi	r28, 0xFF	; 255
 5e4:	ec 2f       	mov	r30, r28
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	31 97       	sbiw	r30, 0x01	; 1
 5ea:	e0 0f       	add	r30, r16
 5ec:	f1 1f       	adc	r31, r17
 5ee:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <segCode+0xa>
 5f2:	90 81       	ld	r25, Z
 5f4:	89 2b       	or	r24, r25
 5f6:	80 83       	st	Z, r24
 5f8:	0f 2e       	mov	r0, r31
 5fa:	c1 2c       	mov	r12, r1
 5fc:	d1 2c       	mov	r13, r1
 5fe:	f8 ec       	ldi	r31, 0xC8	; 200
 600:	ef 2e       	mov	r14, r31
 602:	f2 e4       	ldi	r31, 0x42	; 66
 604:	ff 2e       	mov	r15, r31
 606:	f0 2d       	mov	r31, r0
 608:	2f c0       	rjmp	.+94     	; 0x668 <FloatToBuff+0x25e>
 60a:	a7 01       	movw	r20, r14
 60c:	96 01       	movw	r18, r12
 60e:	c3 01       	movw	r24, r6
 610:	b2 01       	movw	r22, r4
 612:	0e 94 95 05 	call	0xb2a	; 0xb2a <__divsf3>
 616:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fixunssfsi>
 61a:	d8 01       	movw	r26, r16
 61c:	ac 0f       	add	r26, r28
 61e:	b1 1d       	adc	r27, r1
 620:	e6 2f       	mov	r30, r22
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	ea 59       	subi	r30, 0x9A	; 154
 626:	ff 4f       	sbci	r31, 0xFF	; 255
 628:	80 81       	ld	r24, Z
 62a:	8c 93       	st	X, r24
 62c:	cf 5f       	subi	r28, 0xFF	; 255
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__floatunsisf>
 638:	9b 01       	movw	r18, r22
 63a:	ac 01       	movw	r20, r24
 63c:	c7 01       	movw	r24, r14
 63e:	b6 01       	movw	r22, r12
 640:	0e 94 f4 06 	call	0xde8	; 0xde8 <__mulsf3>
 644:	9b 01       	movw	r18, r22
 646:	ac 01       	movw	r20, r24
 648:	c3 01       	movw	r24, r6
 64a:	b2 01       	movw	r22, r4
 64c:	0e 94 23 05 	call	0xa46	; 0xa46 <__subsf3>
 650:	2b 01       	movw	r4, r22
 652:	3c 01       	movw	r6, r24
 654:	20 e0       	ldi	r18, 0x00	; 0
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	40 e2       	ldi	r20, 0x20	; 32
 65a:	51 e4       	ldi	r21, 0x41	; 65
 65c:	c7 01       	movw	r24, r14
 65e:	b6 01       	movw	r22, r12
 660:	0e 94 95 05 	call	0xb2a	; 0xb2a <__divsf3>
 664:	6b 01       	movw	r12, r22
 666:	7c 01       	movw	r14, r24
 668:	c5 30       	cpi	r28, 0x05	; 5
 66a:	78 f2       	brcs	.-98     	; 0x60a <FloatToBuff+0x200>
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	1f 91       	pop	r17
 672:	0f 91       	pop	r16
 674:	ff 90       	pop	r15
 676:	ef 90       	pop	r14
 678:	df 90       	pop	r13
 67a:	cf 90       	pop	r12
 67c:	bf 90       	pop	r11
 67e:	af 90       	pop	r10
 680:	9f 90       	pop	r9
 682:	8f 90       	pop	r8
 684:	7f 90       	pop	r7
 686:	6f 90       	pop	r6
 688:	5f 90       	pop	r5
 68a:	4f 90       	pop	r4
 68c:	08 95       	ret

0000068e <SevSegInit>:
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	06 c0       	rjmp	.+12     	; 0x69e <SevSegInit+0x10>
 692:	e8 2f       	mov	r30, r24
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	e2 54       	subi	r30, 0x42	; 66
 698:	ff 4f       	sbci	r31, 0xFF	; 255
 69a:	10 82       	st	Z, r1
 69c:	8f 5f       	subi	r24, 0xFF	; 255
 69e:	84 30       	cpi	r24, 0x04	; 4
 6a0:	c0 f3       	brcs	.-16     	; 0x692 <SevSegInit+0x4>
 6a2:	0e 94 94 03 	call	0x728	; 0x728 <SevSegCfgInitAndGet>
 6a6:	0e 94 17 04 	call	0x82e	; 0x82e <TimerGetIntervalPointerCfg>
 6aa:	62 ec       	ldi	r22, 0xC2	; 194
 6ac:	70 e0       	ldi	r23, 0x00	; 0
 6ae:	0e 94 de 04 	call	0x9bc	; 0x9bc <TimerSwInit>
 6b2:	81 11       	cpse	r24, r1
 6b4:	08 c0       	rjmp	.+16     	; 0x6c6 <SevSegInit+0x38>
 6b6:	44 e0       	ldi	r20, 0x04	; 4
 6b8:	50 e0       	ldi	r21, 0x00	; 0
 6ba:	60 e0       	ldi	r22, 0x00	; 0
 6bc:	70 e0       	ldi	r23, 0x00	; 0
 6be:	82 ec       	ldi	r24, 0xC2	; 194
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TimerSwStartup>
 6c6:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <digitCount>
 6ca:	08 95       	ret

000006cc <SevSegRutine>:
 6cc:	82 ec       	ldi	r24, 0xC2	; 194
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 03 05 	call	0xa06	; 0xa06 <TimerSwIsExpired>
 6d4:	80 31       	cpi	r24, 0x10	; 16
 6d6:	09 f5       	brne	.+66     	; 0x71a <SevSegRutine+0x4e>
 6d8:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <digitCount>
 6dc:	84 30       	cpi	r24, 0x04	; 4
 6de:	10 f0       	brcs	.+4      	; 0x6e4 <SevSegRutine+0x18>
 6e0:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <digitCount>
 6e4:	0e 94 b2 03 	call	0x764	; 0x764 <SevSegCfgAllDigitsOff>
 6e8:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <digitCount>
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	e2 54       	subi	r30, 0x42	; 66
 6f0:	ff 4f       	sbci	r31, 0xFF	; 255
 6f2:	80 81       	ld	r24, Z
 6f4:	0e 94 bf 03 	call	0x77e	; 0x77e <SevSegCfgSetDigitValue>
 6f8:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <digitCount>
 6fc:	0e 94 c2 03 	call	0x784	; 0x784 <SevSegCfgDigitOn>
 700:	44 e0       	ldi	r20, 0x04	; 4
 702:	50 e0       	ldi	r21, 0x00	; 0
 704:	60 e0       	ldi	r22, 0x00	; 0
 706:	70 e0       	ldi	r23, 0x00	; 0
 708:	82 ec       	ldi	r24, 0xC2	; 194
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TimerSwStartup>
 710:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <digitCount>
 714:	8f 5f       	subi	r24, 0xFF	; 255
 716:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <digitCount>
 71a:	08 95       	ret

0000071c <SevSegSetFloatVal>:

StatusError SevSegSetFloatVal(float value)
{
	FloatToBuff(value,digitsValue);
 71c:	4e eb       	ldi	r20, 0xBE	; 190
 71e:	50 e0       	ldi	r21, 0x00	; 0
 720:	0e 94 05 02 	call	0x40a	; 0x40a <FloatToBuff>
	
	return StatusErrNone;
}
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	08 95       	ret

00000728 <SevSegCfgInitAndGet>:

static SevSegHandleConfig disp7SegHandleConfig;

SevSegHandleConfig* SevSegCfgInitAndGet()
{
	disp7SegHandleConfig.port = DISPLAY_7_SEGMENT_PORT;
 728:	85 b3       	in	r24, 0x15	; 21
 72a:	e7 eb       	ldi	r30, 0xB7	; 183
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	80 83       	st	Z, r24
	disp7SegHandleConfig.portDig = DISPLAY_7_SEGMENT_DIGIT_PORT;
 730:	88 b3       	in	r24, 0x18	; 24
 732:	81 83       	std	Z+1, r24	; 0x01
	
	DISPLAY_7_SEGMENT_PORT_DIR = 0xFF;
 734:	8f ef       	ldi	r24, 0xFF	; 255
 736:	84 bb       	out	0x14, r24	; 20
	
	disp7SegHandleConfig.digitsPinValue[0] = DISPLAY_7_SEGMENT_DIGIT_1_PIN;
 738:	84 e0       	ldi	r24, 0x04	; 4
 73a:	83 83       	std	Z+3, r24	; 0x03
	disp7SegHandleConfig.digitsPinValue[1] = DISPLAY_7_SEGMENT_DIGIT_2_PIN;
 73c:	85 e0       	ldi	r24, 0x05	; 5
 73e:	84 83       	std	Z+4, r24	; 0x04
	disp7SegHandleConfig.digitsPinValue[2] = DISPLAY_7_SEGMENT_DIGIT_3_PIN;
 740:	86 e0       	ldi	r24, 0x06	; 6
 742:	85 83       	std	Z+5, r24	; 0x05
	disp7SegHandleConfig.digitsPinValue[3] = DISPLAY_7_SEGMENT_DIGIT_4_PIN;
 744:	87 e0       	ldi	r24, 0x07	; 7
 746:	86 83       	std	Z+6, r24	; 0x06
		
	DISPLAY_7_SEGMENT_DIGIT_PORT_DIR |= (1 << DISPLAY_7_SEGMENT_DIGIT_1_PIN);
 748:	87 b3       	in	r24, 0x17	; 23
 74a:	80 61       	ori	r24, 0x10	; 16
 74c:	87 bb       	out	0x17, r24	; 23
	DISPLAY_7_SEGMENT_DIGIT_PORT_DIR |= (1 << DISPLAY_7_SEGMENT_DIGIT_2_PIN);
 74e:	87 b3       	in	r24, 0x17	; 23
 750:	80 62       	ori	r24, 0x20	; 32
 752:	87 bb       	out	0x17, r24	; 23
	DISPLAY_7_SEGMENT_DIGIT_PORT_DIR |= (1 << DISPLAY_7_SEGMENT_DIGIT_3_PIN);
 754:	87 b3       	in	r24, 0x17	; 23
 756:	80 64       	ori	r24, 0x40	; 64
 758:	87 bb       	out	0x17, r24	; 23
	DISPLAY_7_SEGMENT_DIGIT_PORT_DIR |= (1 << DISPLAY_7_SEGMENT_DIGIT_4_PIN);
 75a:	87 b3       	in	r24, 0x17	; 23
 75c:	80 68       	ori	r24, 0x80	; 128
 75e:	87 bb       	out	0x17, r24	; 23
	
	return &disp7SegHandleConfig;
}
 760:	cf 01       	movw	r24, r30
 762:	08 95       	ret

00000764 <SevSegCfgAllDigitsOff>:

void SevSegCfgAllDigitsOff(void)
{
	DISPLAY_7_SEGMENT_DIGIT_PORT |= (1 << DISPLAY_7_SEGMENT_DIGIT_1_PIN);
 764:	88 b3       	in	r24, 0x18	; 24
 766:	80 61       	ori	r24, 0x10	; 16
 768:	88 bb       	out	0x18, r24	; 24
	DISPLAY_7_SEGMENT_DIGIT_PORT |= (1 << DISPLAY_7_SEGMENT_DIGIT_2_PIN);
 76a:	88 b3       	in	r24, 0x18	; 24
 76c:	80 62       	ori	r24, 0x20	; 32
 76e:	88 bb       	out	0x18, r24	; 24
	DISPLAY_7_SEGMENT_DIGIT_PORT |= (1 << DISPLAY_7_SEGMENT_DIGIT_3_PIN);
 770:	88 b3       	in	r24, 0x18	; 24
 772:	80 64       	ori	r24, 0x40	; 64
 774:	88 bb       	out	0x18, r24	; 24
	DISPLAY_7_SEGMENT_DIGIT_PORT |= (1 << DISPLAY_7_SEGMENT_DIGIT_4_PIN);
 776:	88 b3       	in	r24, 0x18	; 24
 778:	80 68       	ori	r24, 0x80	; 128
 77a:	88 bb       	out	0x18, r24	; 24
 77c:	08 95       	ret

0000077e <SevSegCfgSetDigitValue>:
}

void SevSegCfgSetDigitValue(uint8_t value)
{
#if (DISPLAY_7_SEGMENT_MODE == COMUN_POWER_SUPPLY)
	DISPLAY_7_SEGMENT_PORT = ~value;
 77e:	80 95       	com	r24
 780:	85 bb       	out	0x15, r24	; 21
 782:	08 95       	ret

00000784 <SevSegCfgDigitOn>:
#endif
}

void SevSegCfgDigitOn(uint8_t digit)
{
	if (digit < DISPLAY_7_SEGMENT_DIGITS_COUNT)
 784:	84 30       	cpi	r24, 0x04	; 4
 786:	80 f4       	brcc	.+32     	; 0x7a8 <SevSegCfgDigitOn+0x24>
	{
		DISPLAY_7_SEGMENT_DIGIT_PORT &= ~(1 << disp7SegHandleConfig.digitsPinValue[digit]);		
 788:	28 b3       	in	r18, 0x18	; 24
 78a:	e8 2f       	mov	r30, r24
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	e9 54       	subi	r30, 0x49	; 73
 790:	ff 4f       	sbci	r31, 0xFF	; 255
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	03 80       	ldd	r0, Z+3	; 0x03
 798:	02 c0       	rjmp	.+4      	; 0x79e <SevSegCfgDigitOn+0x1a>
 79a:	88 0f       	add	r24, r24
 79c:	99 1f       	adc	r25, r25
 79e:	0a 94       	dec	r0
 7a0:	e2 f7       	brpl	.-8      	; 0x79a <SevSegCfgDigitOn+0x16>
 7a2:	80 95       	com	r24
 7a4:	82 23       	and	r24, r18
 7a6:	88 bb       	out	0x18, r24	; 24
 7a8:	08 95       	ret

000007aa <__vector_9>:
 ******************************************************************************/

TimerSwInitParam timerSwInitParam;

ISR (TIMER1_OVF_vect)    // Timer1 ISR
{
 7aa:	1f 92       	push	r1
 7ac:	0f 92       	push	r0
 7ae:	0f b6       	in	r0, 0x3f	; 63
 7b0:	0f 92       	push	r0
 7b2:	11 24       	eor	r1, r1
 7b4:	8f 93       	push	r24
 7b6:	9f 93       	push	r25
 7b8:	af 93       	push	r26
 7ba:	bf 93       	push	r27
	timerSwInitParam.interval++;
 7bc:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <timerSwInitParam>
 7c0:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <timerSwInitParam+0x1>
 7c4:	a0 91 d4 00 	lds	r26, 0x00D4	; 0x8000d4 <timerSwInitParam+0x2>
 7c8:	b0 91 d5 00 	lds	r27, 0x00D5	; 0x8000d5 <timerSwInitParam+0x3>
 7cc:	01 96       	adiw	r24, 0x01	; 1
 7ce:	a1 1d       	adc	r26, r1
 7d0:	b1 1d       	adc	r27, r1
 7d2:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <timerSwInitParam>
 7d6:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <timerSwInitParam+0x1>
 7da:	a0 93 d4 00 	sts	0x00D4, r26	; 0x8000d4 <timerSwInitParam+0x2>
 7de:	b0 93 d5 00 	sts	0x00D5, r27	; 0x8000d5 <timerSwInitParam+0x3>
	TCNT1 = TTIMER_CFG_COUNTER_INIT_STATE;   // for 1 sec at 16 MHz  63974
 7e2:	8f e7       	ldi	r24, 0x7F	; 127
 7e4:	91 ec       	ldi	r25, 0xC1	; 193
 7e6:	9d bd       	out	0x2d, r25	; 45
 7e8:	8c bd       	out	0x2c, r24	; 44
}
 7ea:	bf 91       	pop	r27
 7ec:	af 91       	pop	r26
 7ee:	9f 91       	pop	r25
 7f0:	8f 91       	pop	r24
 7f2:	0f 90       	pop	r0
 7f4:	0f be       	out	0x3f, r0	; 63
 7f6:	0f 90       	pop	r0
 7f8:	1f 90       	pop	r1
 7fa:	18 95       	reti

000007fc <TimerInitCfg>:

void TimerInitCfg(){
	TCNT1 = TTIMER_CFG_COUNTER_INIT_STATE;   // for 1 sec at 16 MHz
 7fc:	8f e7       	ldi	r24, 0x7F	; 127
 7fe:	91 ec       	ldi	r25, 0xC1	; 193
 800:	9d bd       	out	0x2d, r25	; 45
 802:	8c bd       	out	0x2c, r24	; 44
	TCCR1A = 0x00;
 804:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<CS10);  // Timer mode with 1 prescler
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	8e bd       	out	0x2e, r24	; 46
	
	timerSwInitParam.interval = 0;
 80a:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <timerSwInitParam>
 80e:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <timerSwInitParam+0x1>
 812:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <timerSwInitParam+0x2>
 816:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <timerSwInitParam+0x3>
 81a:	08 95       	ret

0000081c <TimerEnableCfg>:
}

void TimerEnableCfg(bool state){
	
	if(state == false)
 81c:	81 11       	cpse	r24, r1
 81e:	04 c0       	rjmp	.+8      	; 0x828 <TimerEnableCfg+0xc>
	{
		TIMSK &= ~(1UL << TOIE1); // Disable timer1 overflow interrupt(TOIE1)			
 820:	89 b7       	in	r24, 0x39	; 57
 822:	8b 7f       	andi	r24, 0xFB	; 251
 824:	89 bf       	out	0x39, r24	; 57
 826:	08 95       	ret
	}
	else
	{
		TIMSK = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
 828:	84 e0       	ldi	r24, 0x04	; 4
 82a:	89 bf       	out	0x39, r24	; 57
 82c:	08 95       	ret

0000082e <TimerGetIntervalPointerCfg>:
}

TimerSwInitParam* TimerGetIntervalPointerCfg(void)
{
	return &timerSwInitParam;
 82e:	82 ed       	ldi	r24, 0xD2	; 210
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	08 95       	ret

00000834 <s_IsValidHandle>:
    {
        return err;
    }

    return s_IsActive(handle);
}
 834:	00 97       	sbiw	r24, 0x00	; 0
 836:	31 f0       	breq	.+12     	; 0x844 <s_IsValidHandle+0x10>
 838:	fc 01       	movw	r30, r24
 83a:	80 81       	ld	r24, Z
 83c:	81 11       	cpse	r24, r1
 83e:	04 c0       	rjmp	.+8      	; 0x848 <s_IsValidHandle+0x14>
 840:	82 e1       	ldi	r24, 0x12	; 18
 842:	08 95       	ret
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	08 95       	ret
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	08 95       	ret

0000084c <s_IsValidAndActiveHandle>:
 84c:	cf 93       	push	r28
 84e:	df 93       	push	r29
 850:	ec 01       	movw	r28, r24
 852:	0e 94 1a 04 	call	0x834	; 0x834 <s_IsValidHandle>
 856:	81 11       	cpse	r24, r1
 858:	06 c0       	rjmp	.+12     	; 0x866 <__stack+0x7>
 85a:	89 81       	ldd	r24, Y+1	; 0x01
 85c:	81 11       	cpse	r24, r1
 85e:	02 c0       	rjmp	.+4      	; 0x864 <__stack+0x5>
 860:	8f e0       	ldi	r24, 0x0F	; 15
 862:	01 c0       	rjmp	.+2      	; 0x866 <__stack+0x7>
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	08 95       	ret

0000086c <s_Init>:
 86c:	cf 93       	push	r28
 86e:	df 93       	push	r29
 870:	fb 01       	movw	r30, r22
 872:	21 e0       	ldi	r18, 0x01	; 1
 874:	20 83       	st	Z, r18
 876:	97 87       	std	Z+15, r25	; 0x0f
 878:	86 87       	std	Z+14, r24	; 0x0e
 87a:	ec 01       	movw	r28, r24
 87c:	88 81       	ld	r24, Y
 87e:	99 81       	ldd	r25, Y+1	; 0x01
 880:	aa 81       	ldd	r26, Y+2	; 0x02
 882:	bb 81       	ldd	r27, Y+3	; 0x03
 884:	82 87       	std	Z+10, r24	; 0x0a
 886:	93 87       	std	Z+11, r25	; 0x0b
 888:	a4 87       	std	Z+12, r26	; 0x0c
 88a:	b5 87       	std	Z+13, r27	; 0x0d
 88c:	80 e0       	ldi	r24, 0x00	; 0
 88e:	df 91       	pop	r29
 890:	cf 91       	pop	r28
 892:	08 95       	ret

00000894 <s_Startup>:
 894:	fc 01       	movw	r30, r24
 896:	a6 85       	ldd	r26, Z+14	; 0x0e
 898:	b7 85       	ldd	r27, Z+15	; 0x0f
 89a:	8d 91       	ld	r24, X+
 89c:	9d 91       	ld	r25, X+
 89e:	0d 90       	ld	r0, X+
 8a0:	bc 91       	ld	r27, X
 8a2:	a0 2d       	mov	r26, r0
 8a4:	21 e0       	ldi	r18, 0x01	; 1
 8a6:	20 83       	st	Z, r18
 8a8:	21 83       	std	Z+1, r18	; 0x01
 8aa:	82 83       	std	Z+2, r24	; 0x02
 8ac:	93 83       	std	Z+3, r25	; 0x03
 8ae:	a4 83       	std	Z+4, r26	; 0x04
 8b0:	b5 83       	std	Z+5, r27	; 0x05
 8b2:	84 0f       	add	r24, r20
 8b4:	95 1f       	adc	r25, r21
 8b6:	a6 1f       	adc	r26, r22
 8b8:	b7 1f       	adc	r27, r23
 8ba:	86 83       	std	Z+6, r24	; 0x06
 8bc:	97 83       	std	Z+7, r25	; 0x07
 8be:	a0 87       	std	Z+8, r26	; 0x08
 8c0:	b1 87       	std	Z+9, r27	; 0x09
 8c2:	42 87       	std	Z+10, r20	; 0x0a
 8c4:	53 87       	std	Z+11, r21	; 0x0b
 8c6:	64 87       	std	Z+12, r22	; 0x0c
 8c8:	75 87       	std	Z+13, r23	; 0x0d
 8ca:	80 e0       	ldi	r24, 0x00	; 0
 8cc:	08 95       	ret

000008ce <s_GetTimerStateProp>:
 8ce:	cf 92       	push	r12
 8d0:	df 92       	push	r13
 8d2:	ef 92       	push	r14
 8d4:	ff 92       	push	r15
 8d6:	0f 93       	push	r16
 8d8:	1f 93       	push	r17
 8da:	cf 93       	push	r28
 8dc:	df 93       	push	r29
 8de:	fc 01       	movw	r30, r24
 8e0:	a6 85       	ldd	r26, Z+14	; 0x0e
 8e2:	b7 85       	ldd	r27, Z+15	; 0x0f
 8e4:	cd 90       	ld	r12, X+
 8e6:	dd 90       	ld	r13, X+
 8e8:	ed 90       	ld	r14, X+
 8ea:	fc 90       	ld	r15, X
 8ec:	02 81       	ldd	r16, Z+2	; 0x02
 8ee:	13 81       	ldd	r17, Z+3	; 0x03
 8f0:	24 81       	ldd	r18, Z+4	; 0x04
 8f2:	35 81       	ldd	r19, Z+5	; 0x05
 8f4:	86 81       	ldd	r24, Z+6	; 0x06
 8f6:	97 81       	ldd	r25, Z+7	; 0x07
 8f8:	a0 85       	ldd	r26, Z+8	; 0x08
 8fa:	b1 85       	ldd	r27, Z+9	; 0x09
 8fc:	08 17       	cp	r16, r24
 8fe:	19 07       	cpc	r17, r25
 900:	2a 07       	cpc	r18, r26
 902:	3b 07       	cpc	r19, r27
 904:	80 f4       	brcc	.+32     	; 0x926 <s_GetTimerStateProp+0x58>
 906:	c8 16       	cp	r12, r24
 908:	d9 06       	cpc	r13, r25
 90a:	ea 06       	cpc	r14, r26
 90c:	fb 06       	cpc	r15, r27
 90e:	30 f5       	brcc	.+76     	; 0x95c <s_GetTimerStateProp+0x8e>
 910:	c0 16       	cp	r12, r16
 912:	d1 06       	cpc	r13, r17
 914:	e2 06       	cpc	r14, r18
 916:	f3 06       	cpc	r15, r19
 918:	30 f1       	brcs	.+76     	; 0x966 <s_GetTimerStateProp+0x98>
 91a:	8c 19       	sub	r24, r12
 91c:	9d 09       	sbc	r25, r13
 91e:	ae 09       	sbc	r26, r14
 920:	bf 09       	sbc	r27, r15
 922:	10 e0       	ldi	r17, 0x00	; 0
 924:	29 c0       	rjmp	.+82     	; 0x978 <s_GetTimerStateProp+0xaa>
 926:	c8 16       	cp	r12, r24
 928:	d9 06       	cpc	r13, r25
 92a:	ea 06       	cpc	r14, r26
 92c:	fb 06       	cpc	r15, r27
 92e:	28 f0       	brcs	.+10     	; 0x93a <s_GetTimerStateProp+0x6c>
 930:	c0 16       	cp	r12, r16
 932:	d1 06       	cpc	r13, r17
 934:	e2 06       	cpc	r14, r18
 936:	f3 06       	cpc	r15, r19
 938:	d8 f0       	brcs	.+54     	; 0x970 <s_GetTimerStateProp+0xa2>
 93a:	c8 16       	cp	r12, r24
 93c:	d9 06       	cpc	r13, r25
 93e:	ea 06       	cpc	r14, r26
 940:	fb 06       	cpc	r15, r27
 942:	30 f4       	brcc	.+12     	; 0x950 <s_GetTimerStateProp+0x82>
 944:	8c 19       	sub	r24, r12
 946:	9d 09       	sbc	r25, r13
 948:	ae 09       	sbc	r26, r14
 94a:	bf 09       	sbc	r27, r15
 94c:	10 e0       	ldi	r17, 0x00	; 0
 94e:	14 c0       	rjmp	.+40     	; 0x978 <s_GetTimerStateProp+0xaa>
 950:	8c 19       	sub	r24, r12
 952:	9d 09       	sbc	r25, r13
 954:	ae 09       	sbc	r26, r14
 956:	bf 09       	sbc	r27, r15
 958:	10 e0       	ldi	r17, 0x00	; 0
 95a:	0e c0       	rjmp	.+28     	; 0x978 <s_GetTimerStateProp+0xaa>
 95c:	10 e1       	ldi	r17, 0x10	; 16
 95e:	80 e0       	ldi	r24, 0x00	; 0
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	dc 01       	movw	r26, r24
 964:	09 c0       	rjmp	.+18     	; 0x978 <s_GetTimerStateProp+0xaa>
 966:	10 e1       	ldi	r17, 0x10	; 16
 968:	80 e0       	ldi	r24, 0x00	; 0
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	dc 01       	movw	r26, r24
 96e:	04 c0       	rjmp	.+8      	; 0x978 <s_GetTimerStateProp+0xaa>
 970:	10 e1       	ldi	r17, 0x10	; 16
 972:	80 e0       	ldi	r24, 0x00	; 0
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	dc 01       	movw	r26, r24
 978:	41 15       	cp	r20, r1
 97a:	51 05       	cpc	r21, r1
 97c:	29 f0       	breq	.+10     	; 0x988 <s_GetTimerStateProp+0xba>
 97e:	ea 01       	movw	r28, r20
 980:	88 83       	st	Y, r24
 982:	99 83       	std	Y+1, r25	; 0x01
 984:	aa 83       	std	Y+2, r26	; 0x02
 986:	bb 83       	std	Y+3, r27	; 0x03
 988:	61 15       	cp	r22, r1
 98a:	71 05       	cpc	r23, r1
 98c:	69 f0       	breq	.+26     	; 0x9a8 <s_GetTimerStateProp+0xda>
 98e:	eb 01       	movw	r28, r22
 990:	22 81       	ldd	r18, Z+2	; 0x02
 992:	33 81       	ldd	r19, Z+3	; 0x03
 994:	44 81       	ldd	r20, Z+4	; 0x04
 996:	55 81       	ldd	r21, Z+5	; 0x05
 998:	c7 01       	movw	r24, r14
 99a:	b6 01       	movw	r22, r12
 99c:	0e 94 14 05 	call	0xa28	; 0xa28 <TimerSwBasePassed>
 9a0:	68 83       	st	Y, r22
 9a2:	79 83       	std	Y+1, r23	; 0x01
 9a4:	8a 83       	std	Y+2, r24	; 0x02
 9a6:	9b 83       	std	Y+3, r25	; 0x03
 9a8:	81 2f       	mov	r24, r17
 9aa:	df 91       	pop	r29
 9ac:	cf 91       	pop	r28
 9ae:	1f 91       	pop	r17
 9b0:	0f 91       	pop	r16
 9b2:	ff 90       	pop	r15
 9b4:	ef 90       	pop	r14
 9b6:	df 90       	pop	r13
 9b8:	cf 90       	pop	r12
 9ba:	08 95       	ret

000009bc <TimerSwInit>:
 9bc:	00 97       	sbiw	r24, 0x00	; 0
 9be:	31 f0       	breq	.+12     	; 0x9cc <TimerSwInit+0x10>
 9c0:	61 15       	cp	r22, r1
 9c2:	71 05       	cpc	r23, r1
 9c4:	29 f0       	breq	.+10     	; 0x9d0 <TimerSwInit+0x14>
 9c6:	0e 94 36 04 	call	0x86c	; 0x86c <s_Init>
 9ca:	08 95       	ret
 9cc:	81 e0       	ldi	r24, 0x01	; 1
 9ce:	08 95       	ret
 9d0:	81 e0       	ldi	r24, 0x01	; 1
 9d2:	08 95       	ret

000009d4 <TimerSwStartup>:
 9d4:	cf 92       	push	r12
 9d6:	df 92       	push	r13
 9d8:	ef 92       	push	r14
 9da:	ff 92       	push	r15
 9dc:	cf 93       	push	r28
 9de:	df 93       	push	r29
 9e0:	ec 01       	movw	r28, r24
 9e2:	6a 01       	movw	r12, r20
 9e4:	7b 01       	movw	r14, r22
 9e6:	0e 94 1a 04 	call	0x834	; 0x834 <s_IsValidHandle>
 9ea:	81 11       	cpse	r24, r1
 9ec:	05 c0       	rjmp	.+10     	; 0x9f8 <TimerSwStartup+0x24>
 9ee:	b7 01       	movw	r22, r14
 9f0:	a6 01       	movw	r20, r12
 9f2:	ce 01       	movw	r24, r28
 9f4:	0e 94 4a 04 	call	0x894	; 0x894 <s_Startup>
 9f8:	df 91       	pop	r29
 9fa:	cf 91       	pop	r28
 9fc:	ff 90       	pop	r15
 9fe:	ef 90       	pop	r14
 a00:	df 90       	pop	r13
 a02:	cf 90       	pop	r12
 a04:	08 95       	ret

00000a06 <TimerSwIsExpired>:

StatusError TimerSwIsExpired(
        const TimerSwHandle * const handle)
{
 a06:	cf 93       	push	r28
 a08:	df 93       	push	r29
 a0a:	ec 01       	movw	r28, r24
    const StatusError err = s_IsValidAndActiveHandle(handle);
 a0c:	0e 94 26 04 	call	0x84c	; 0x84c <s_IsValidAndActiveHandle>

    if (StatusErrNone != err)
 a10:	81 11       	cpse	r24, r1
 a12:	07 c0       	rjmp	.+14     	; 0xa22 <TimerSwIsExpired+0x1c>
    {
        return err;
    }

    return s_GetTimerStateProp(
 a14:	40 e0       	ldi	r20, 0x00	; 0
 a16:	50 e0       	ldi	r21, 0x00	; 0
 a18:	60 e0       	ldi	r22, 0x00	; 0
 a1a:	70 e0       	ldi	r23, 0x00	; 0
 a1c:	ce 01       	movw	r24, r28
 a1e:	0e 94 67 04 	call	0x8ce	; 0x8ce <s_GetTimerStateProp>
            handle,
            NULL,
            NULL);
}
 a22:	df 91       	pop	r29
 a24:	cf 91       	pop	r28
 a26:	08 95       	ret

00000a28 <TimerSwBasePassed>:
 ******************************************************************************/
TimerSwValue TimerSwBasePassed(
        const TimerSwValue timeCurr,
        const TimerSwValue timeStart)
{
    if (timeCurr >= timeStart)
 a28:	62 17       	cp	r22, r18
 a2a:	73 07       	cpc	r23, r19
 a2c:	84 07       	cpc	r24, r20
 a2e:	95 07       	cpc	r25, r21
 a30:	28 f0       	brcs	.+10     	; 0xa3c <TimerSwBasePassed+0x14>
    {
        return timeCurr - timeStart;
 a32:	62 1b       	sub	r22, r18
 a34:	73 0b       	sbc	r23, r19
 a36:	84 0b       	sbc	r24, r20
 a38:	95 0b       	sbc	r25, r21
 a3a:	08 95       	ret
    }
    else
    {
        return (TIMER_SW_VALUE_MAX - timeStart) + 1 + timeCurr;
 a3c:	62 1b       	sub	r22, r18
 a3e:	73 0b       	sbc	r23, r19
 a40:	84 0b       	sbc	r24, r20
 a42:	95 0b       	sbc	r25, r21
    }
}
 a44:	08 95       	ret

00000a46 <__subsf3>:
 a46:	50 58       	subi	r21, 0x80	; 128

00000a48 <__addsf3>:
 a48:	bb 27       	eor	r27, r27
 a4a:	aa 27       	eor	r26, r26
 a4c:	0e 94 3b 05 	call	0xa76	; 0xa76 <__addsf3x>
 a50:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__fp_round>
 a54:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__fp_pscA>
 a58:	38 f0       	brcs	.+14     	; 0xa68 <__addsf3+0x20>
 a5a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__fp_pscB>
 a5e:	20 f0       	brcs	.+8      	; 0xa68 <__addsf3+0x20>
 a60:	39 f4       	brne	.+14     	; 0xa70 <__addsf3+0x28>
 a62:	9f 3f       	cpi	r25, 0xFF	; 255
 a64:	19 f4       	brne	.+6      	; 0xa6c <__addsf3+0x24>
 a66:	26 f4       	brtc	.+8      	; 0xa70 <__addsf3+0x28>
 a68:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__fp_nan>
 a6c:	0e f4       	brtc	.+2      	; 0xa70 <__addsf3+0x28>
 a6e:	e0 95       	com	r30
 a70:	e7 fb       	bst	r30, 7
 a72:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__fp_inf>

00000a76 <__addsf3x>:
 a76:	e9 2f       	mov	r30, r25
 a78:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__fp_split3>
 a7c:	58 f3       	brcs	.-42     	; 0xa54 <__addsf3+0xc>
 a7e:	ba 17       	cp	r27, r26
 a80:	62 07       	cpc	r22, r18
 a82:	73 07       	cpc	r23, r19
 a84:	84 07       	cpc	r24, r20
 a86:	95 07       	cpc	r25, r21
 a88:	20 f0       	brcs	.+8      	; 0xa92 <__addsf3x+0x1c>
 a8a:	79 f4       	brne	.+30     	; 0xaaa <__addsf3x+0x34>
 a8c:	a6 f5       	brtc	.+104    	; 0xaf6 <__addsf3x+0x80>
 a8e:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_zero>
 a92:	0e f4       	brtc	.+2      	; 0xa96 <__addsf3x+0x20>
 a94:	e0 95       	com	r30
 a96:	0b 2e       	mov	r0, r27
 a98:	ba 2f       	mov	r27, r26
 a9a:	a0 2d       	mov	r26, r0
 a9c:	0b 01       	movw	r0, r22
 a9e:	b9 01       	movw	r22, r18
 aa0:	90 01       	movw	r18, r0
 aa2:	0c 01       	movw	r0, r24
 aa4:	ca 01       	movw	r24, r20
 aa6:	a0 01       	movw	r20, r0
 aa8:	11 24       	eor	r1, r1
 aaa:	ff 27       	eor	r31, r31
 aac:	59 1b       	sub	r21, r25
 aae:	99 f0       	breq	.+38     	; 0xad6 <__addsf3x+0x60>
 ab0:	59 3f       	cpi	r21, 0xF9	; 249
 ab2:	50 f4       	brcc	.+20     	; 0xac8 <__addsf3x+0x52>
 ab4:	50 3e       	cpi	r21, 0xE0	; 224
 ab6:	68 f1       	brcs	.+90     	; 0xb12 <__addsf3x+0x9c>
 ab8:	1a 16       	cp	r1, r26
 aba:	f0 40       	sbci	r31, 0x00	; 0
 abc:	a2 2f       	mov	r26, r18
 abe:	23 2f       	mov	r18, r19
 ac0:	34 2f       	mov	r19, r20
 ac2:	44 27       	eor	r20, r20
 ac4:	58 5f       	subi	r21, 0xF8	; 248
 ac6:	f3 cf       	rjmp	.-26     	; 0xaae <__addsf3x+0x38>
 ac8:	46 95       	lsr	r20
 aca:	37 95       	ror	r19
 acc:	27 95       	ror	r18
 ace:	a7 95       	ror	r26
 ad0:	f0 40       	sbci	r31, 0x00	; 0
 ad2:	53 95       	inc	r21
 ad4:	c9 f7       	brne	.-14     	; 0xac8 <__addsf3x+0x52>
 ad6:	7e f4       	brtc	.+30     	; 0xaf6 <__addsf3x+0x80>
 ad8:	1f 16       	cp	r1, r31
 ada:	ba 0b       	sbc	r27, r26
 adc:	62 0b       	sbc	r22, r18
 ade:	73 0b       	sbc	r23, r19
 ae0:	84 0b       	sbc	r24, r20
 ae2:	ba f0       	brmi	.+46     	; 0xb12 <__addsf3x+0x9c>
 ae4:	91 50       	subi	r25, 0x01	; 1
 ae6:	a1 f0       	breq	.+40     	; 0xb10 <__addsf3x+0x9a>
 ae8:	ff 0f       	add	r31, r31
 aea:	bb 1f       	adc	r27, r27
 aec:	66 1f       	adc	r22, r22
 aee:	77 1f       	adc	r23, r23
 af0:	88 1f       	adc	r24, r24
 af2:	c2 f7       	brpl	.-16     	; 0xae4 <__addsf3x+0x6e>
 af4:	0e c0       	rjmp	.+28     	; 0xb12 <__addsf3x+0x9c>
 af6:	ba 0f       	add	r27, r26
 af8:	62 1f       	adc	r22, r18
 afa:	73 1f       	adc	r23, r19
 afc:	84 1f       	adc	r24, r20
 afe:	48 f4       	brcc	.+18     	; 0xb12 <__addsf3x+0x9c>
 b00:	87 95       	ror	r24
 b02:	77 95       	ror	r23
 b04:	67 95       	ror	r22
 b06:	b7 95       	ror	r27
 b08:	f7 95       	ror	r31
 b0a:	9e 3f       	cpi	r25, 0xFE	; 254
 b0c:	08 f0       	brcs	.+2      	; 0xb10 <__addsf3x+0x9a>
 b0e:	b0 cf       	rjmp	.-160    	; 0xa70 <__addsf3+0x28>
 b10:	93 95       	inc	r25
 b12:	88 0f       	add	r24, r24
 b14:	08 f0       	brcs	.+2      	; 0xb18 <__addsf3x+0xa2>
 b16:	99 27       	eor	r25, r25
 b18:	ee 0f       	add	r30, r30
 b1a:	97 95       	ror	r25
 b1c:	87 95       	ror	r24
 b1e:	08 95       	ret

00000b20 <__cmpsf2>:
 b20:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fp_cmp>
 b24:	08 f4       	brcc	.+2      	; 0xb28 <__cmpsf2+0x8>
 b26:	81 e0       	ldi	r24, 0x01	; 1
 b28:	08 95       	ret

00000b2a <__divsf3>:
 b2a:	0e 94 a9 05 	call	0xb52	; 0xb52 <__divsf3x>
 b2e:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__fp_round>
 b32:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__fp_pscB>
 b36:	58 f0       	brcs	.+22     	; 0xb4e <__divsf3+0x24>
 b38:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__fp_pscA>
 b3c:	40 f0       	brcs	.+16     	; 0xb4e <__divsf3+0x24>
 b3e:	29 f4       	brne	.+10     	; 0xb4a <__divsf3+0x20>
 b40:	5f 3f       	cpi	r21, 0xFF	; 255
 b42:	29 f0       	breq	.+10     	; 0xb4e <__divsf3+0x24>
 b44:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__fp_inf>
 b48:	51 11       	cpse	r21, r1
 b4a:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__fp_szero>
 b4e:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__fp_nan>

00000b52 <__divsf3x>:
 b52:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__fp_split3>
 b56:	68 f3       	brcs	.-38     	; 0xb32 <__divsf3+0x8>

00000b58 <__divsf3_pse>:
 b58:	99 23       	and	r25, r25
 b5a:	b1 f3       	breq	.-20     	; 0xb48 <__divsf3+0x1e>
 b5c:	55 23       	and	r21, r21
 b5e:	91 f3       	breq	.-28     	; 0xb44 <__divsf3+0x1a>
 b60:	95 1b       	sub	r25, r21
 b62:	55 0b       	sbc	r21, r21
 b64:	bb 27       	eor	r27, r27
 b66:	aa 27       	eor	r26, r26
 b68:	62 17       	cp	r22, r18
 b6a:	73 07       	cpc	r23, r19
 b6c:	84 07       	cpc	r24, r20
 b6e:	38 f0       	brcs	.+14     	; 0xb7e <__divsf3_pse+0x26>
 b70:	9f 5f       	subi	r25, 0xFF	; 255
 b72:	5f 4f       	sbci	r21, 0xFF	; 255
 b74:	22 0f       	add	r18, r18
 b76:	33 1f       	adc	r19, r19
 b78:	44 1f       	adc	r20, r20
 b7a:	aa 1f       	adc	r26, r26
 b7c:	a9 f3       	breq	.-22     	; 0xb68 <__divsf3_pse+0x10>
 b7e:	35 d0       	rcall	.+106    	; 0xbea <__divsf3_pse+0x92>
 b80:	0e 2e       	mov	r0, r30
 b82:	3a f0       	brmi	.+14     	; 0xb92 <__divsf3_pse+0x3a>
 b84:	e0 e8       	ldi	r30, 0x80	; 128
 b86:	32 d0       	rcall	.+100    	; 0xbec <__divsf3_pse+0x94>
 b88:	91 50       	subi	r25, 0x01	; 1
 b8a:	50 40       	sbci	r21, 0x00	; 0
 b8c:	e6 95       	lsr	r30
 b8e:	00 1c       	adc	r0, r0
 b90:	ca f7       	brpl	.-14     	; 0xb84 <__divsf3_pse+0x2c>
 b92:	2b d0       	rcall	.+86     	; 0xbea <__divsf3_pse+0x92>
 b94:	fe 2f       	mov	r31, r30
 b96:	29 d0       	rcall	.+82     	; 0xbea <__divsf3_pse+0x92>
 b98:	66 0f       	add	r22, r22
 b9a:	77 1f       	adc	r23, r23
 b9c:	88 1f       	adc	r24, r24
 b9e:	bb 1f       	adc	r27, r27
 ba0:	26 17       	cp	r18, r22
 ba2:	37 07       	cpc	r19, r23
 ba4:	48 07       	cpc	r20, r24
 ba6:	ab 07       	cpc	r26, r27
 ba8:	b0 e8       	ldi	r27, 0x80	; 128
 baa:	09 f0       	breq	.+2      	; 0xbae <__divsf3_pse+0x56>
 bac:	bb 0b       	sbc	r27, r27
 bae:	80 2d       	mov	r24, r0
 bb0:	bf 01       	movw	r22, r30
 bb2:	ff 27       	eor	r31, r31
 bb4:	93 58       	subi	r25, 0x83	; 131
 bb6:	5f 4f       	sbci	r21, 0xFF	; 255
 bb8:	3a f0       	brmi	.+14     	; 0xbc8 <__divsf3_pse+0x70>
 bba:	9e 3f       	cpi	r25, 0xFE	; 254
 bbc:	51 05       	cpc	r21, r1
 bbe:	78 f0       	brcs	.+30     	; 0xbde <__divsf3_pse+0x86>
 bc0:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__fp_inf>
 bc4:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__fp_szero>
 bc8:	5f 3f       	cpi	r21, 0xFF	; 255
 bca:	e4 f3       	brlt	.-8      	; 0xbc4 <__divsf3_pse+0x6c>
 bcc:	98 3e       	cpi	r25, 0xE8	; 232
 bce:	d4 f3       	brlt	.-12     	; 0xbc4 <__divsf3_pse+0x6c>
 bd0:	86 95       	lsr	r24
 bd2:	77 95       	ror	r23
 bd4:	67 95       	ror	r22
 bd6:	b7 95       	ror	r27
 bd8:	f7 95       	ror	r31
 bda:	9f 5f       	subi	r25, 0xFF	; 255
 bdc:	c9 f7       	brne	.-14     	; 0xbd0 <__divsf3_pse+0x78>
 bde:	88 0f       	add	r24, r24
 be0:	91 1d       	adc	r25, r1
 be2:	96 95       	lsr	r25
 be4:	87 95       	ror	r24
 be6:	97 f9       	bld	r25, 7
 be8:	08 95       	ret
 bea:	e1 e0       	ldi	r30, 0x01	; 1
 bec:	66 0f       	add	r22, r22
 bee:	77 1f       	adc	r23, r23
 bf0:	88 1f       	adc	r24, r24
 bf2:	bb 1f       	adc	r27, r27
 bf4:	62 17       	cp	r22, r18
 bf6:	73 07       	cpc	r23, r19
 bf8:	84 07       	cpc	r24, r20
 bfa:	ba 07       	cpc	r27, r26
 bfc:	20 f0       	brcs	.+8      	; 0xc06 <__divsf3_pse+0xae>
 bfe:	62 1b       	sub	r22, r18
 c00:	73 0b       	sbc	r23, r19
 c02:	84 0b       	sbc	r24, r20
 c04:	ba 0b       	sbc	r27, r26
 c06:	ee 1f       	adc	r30, r30
 c08:	88 f7       	brcc	.-30     	; 0xbec <__divsf3_pse+0x94>
 c0a:	e0 95       	com	r30
 c0c:	08 95       	ret

00000c0e <__fixsfsi>:
 c0e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fixunssfsi>
 c12:	68 94       	set
 c14:	b1 11       	cpse	r27, r1
 c16:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__fp_szero>
 c1a:	08 95       	ret

00000c1c <__fixunssfsi>:
 c1c:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__fp_splitA>
 c20:	88 f0       	brcs	.+34     	; 0xc44 <__fixunssfsi+0x28>
 c22:	9f 57       	subi	r25, 0x7F	; 127
 c24:	98 f0       	brcs	.+38     	; 0xc4c <__fixunssfsi+0x30>
 c26:	b9 2f       	mov	r27, r25
 c28:	99 27       	eor	r25, r25
 c2a:	b7 51       	subi	r27, 0x17	; 23
 c2c:	b0 f0       	brcs	.+44     	; 0xc5a <__fixunssfsi+0x3e>
 c2e:	e1 f0       	breq	.+56     	; 0xc68 <__fixunssfsi+0x4c>
 c30:	66 0f       	add	r22, r22
 c32:	77 1f       	adc	r23, r23
 c34:	88 1f       	adc	r24, r24
 c36:	99 1f       	adc	r25, r25
 c38:	1a f0       	brmi	.+6      	; 0xc40 <__fixunssfsi+0x24>
 c3a:	ba 95       	dec	r27
 c3c:	c9 f7       	brne	.-14     	; 0xc30 <__fixunssfsi+0x14>
 c3e:	14 c0       	rjmp	.+40     	; 0xc68 <__fixunssfsi+0x4c>
 c40:	b1 30       	cpi	r27, 0x01	; 1
 c42:	91 f0       	breq	.+36     	; 0xc68 <__fixunssfsi+0x4c>
 c44:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__fp_zero>
 c48:	b1 e0       	ldi	r27, 0x01	; 1
 c4a:	08 95       	ret
 c4c:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_zero>
 c50:	67 2f       	mov	r22, r23
 c52:	78 2f       	mov	r23, r24
 c54:	88 27       	eor	r24, r24
 c56:	b8 5f       	subi	r27, 0xF8	; 248
 c58:	39 f0       	breq	.+14     	; 0xc68 <__fixunssfsi+0x4c>
 c5a:	b9 3f       	cpi	r27, 0xF9	; 249
 c5c:	cc f3       	brlt	.-14     	; 0xc50 <__fixunssfsi+0x34>
 c5e:	86 95       	lsr	r24
 c60:	77 95       	ror	r23
 c62:	67 95       	ror	r22
 c64:	b3 95       	inc	r27
 c66:	d9 f7       	brne	.-10     	; 0xc5e <__fixunssfsi+0x42>
 c68:	3e f4       	brtc	.+14     	; 0xc78 <__fixunssfsi+0x5c>
 c6a:	90 95       	com	r25
 c6c:	80 95       	com	r24
 c6e:	70 95       	com	r23
 c70:	61 95       	neg	r22
 c72:	7f 4f       	sbci	r23, 0xFF	; 255
 c74:	8f 4f       	sbci	r24, 0xFF	; 255
 c76:	9f 4f       	sbci	r25, 0xFF	; 255
 c78:	08 95       	ret

00000c7a <__floatunsisf>:
 c7a:	e8 94       	clt
 c7c:	09 c0       	rjmp	.+18     	; 0xc90 <__floatsisf+0x12>

00000c7e <__floatsisf>:
 c7e:	97 fb       	bst	r25, 7
 c80:	3e f4       	brtc	.+14     	; 0xc90 <__floatsisf+0x12>
 c82:	90 95       	com	r25
 c84:	80 95       	com	r24
 c86:	70 95       	com	r23
 c88:	61 95       	neg	r22
 c8a:	7f 4f       	sbci	r23, 0xFF	; 255
 c8c:	8f 4f       	sbci	r24, 0xFF	; 255
 c8e:	9f 4f       	sbci	r25, 0xFF	; 255
 c90:	99 23       	and	r25, r25
 c92:	a9 f0       	breq	.+42     	; 0xcbe <__floatsisf+0x40>
 c94:	f9 2f       	mov	r31, r25
 c96:	96 e9       	ldi	r25, 0x96	; 150
 c98:	bb 27       	eor	r27, r27
 c9a:	93 95       	inc	r25
 c9c:	f6 95       	lsr	r31
 c9e:	87 95       	ror	r24
 ca0:	77 95       	ror	r23
 ca2:	67 95       	ror	r22
 ca4:	b7 95       	ror	r27
 ca6:	f1 11       	cpse	r31, r1
 ca8:	f8 cf       	rjmp	.-16     	; 0xc9a <__floatsisf+0x1c>
 caa:	fa f4       	brpl	.+62     	; 0xcea <__floatsisf+0x6c>
 cac:	bb 0f       	add	r27, r27
 cae:	11 f4       	brne	.+4      	; 0xcb4 <__floatsisf+0x36>
 cb0:	60 ff       	sbrs	r22, 0
 cb2:	1b c0       	rjmp	.+54     	; 0xcea <__floatsisf+0x6c>
 cb4:	6f 5f       	subi	r22, 0xFF	; 255
 cb6:	7f 4f       	sbci	r23, 0xFF	; 255
 cb8:	8f 4f       	sbci	r24, 0xFF	; 255
 cba:	9f 4f       	sbci	r25, 0xFF	; 255
 cbc:	16 c0       	rjmp	.+44     	; 0xcea <__floatsisf+0x6c>
 cbe:	88 23       	and	r24, r24
 cc0:	11 f0       	breq	.+4      	; 0xcc6 <__floatsisf+0x48>
 cc2:	96 e9       	ldi	r25, 0x96	; 150
 cc4:	11 c0       	rjmp	.+34     	; 0xce8 <__floatsisf+0x6a>
 cc6:	77 23       	and	r23, r23
 cc8:	21 f0       	breq	.+8      	; 0xcd2 <__floatsisf+0x54>
 cca:	9e e8       	ldi	r25, 0x8E	; 142
 ccc:	87 2f       	mov	r24, r23
 cce:	76 2f       	mov	r23, r22
 cd0:	05 c0       	rjmp	.+10     	; 0xcdc <__floatsisf+0x5e>
 cd2:	66 23       	and	r22, r22
 cd4:	71 f0       	breq	.+28     	; 0xcf2 <__floatsisf+0x74>
 cd6:	96 e8       	ldi	r25, 0x86	; 134
 cd8:	86 2f       	mov	r24, r22
 cda:	70 e0       	ldi	r23, 0x00	; 0
 cdc:	60 e0       	ldi	r22, 0x00	; 0
 cde:	2a f0       	brmi	.+10     	; 0xcea <__floatsisf+0x6c>
 ce0:	9a 95       	dec	r25
 ce2:	66 0f       	add	r22, r22
 ce4:	77 1f       	adc	r23, r23
 ce6:	88 1f       	adc	r24, r24
 ce8:	da f7       	brpl	.-10     	; 0xce0 <__floatsisf+0x62>
 cea:	88 0f       	add	r24, r24
 cec:	96 95       	lsr	r25
 cee:	87 95       	ror	r24
 cf0:	97 f9       	bld	r25, 7
 cf2:	08 95       	ret

00000cf4 <__fp_cmp>:
 cf4:	99 0f       	add	r25, r25
 cf6:	00 08       	sbc	r0, r0
 cf8:	55 0f       	add	r21, r21
 cfa:	aa 0b       	sbc	r26, r26
 cfc:	e0 e8       	ldi	r30, 0x80	; 128
 cfe:	fe ef       	ldi	r31, 0xFE	; 254
 d00:	16 16       	cp	r1, r22
 d02:	17 06       	cpc	r1, r23
 d04:	e8 07       	cpc	r30, r24
 d06:	f9 07       	cpc	r31, r25
 d08:	c0 f0       	brcs	.+48     	; 0xd3a <__fp_cmp+0x46>
 d0a:	12 16       	cp	r1, r18
 d0c:	13 06       	cpc	r1, r19
 d0e:	e4 07       	cpc	r30, r20
 d10:	f5 07       	cpc	r31, r21
 d12:	98 f0       	brcs	.+38     	; 0xd3a <__fp_cmp+0x46>
 d14:	62 1b       	sub	r22, r18
 d16:	73 0b       	sbc	r23, r19
 d18:	84 0b       	sbc	r24, r20
 d1a:	95 0b       	sbc	r25, r21
 d1c:	39 f4       	brne	.+14     	; 0xd2c <__fp_cmp+0x38>
 d1e:	0a 26       	eor	r0, r26
 d20:	61 f0       	breq	.+24     	; 0xd3a <__fp_cmp+0x46>
 d22:	23 2b       	or	r18, r19
 d24:	24 2b       	or	r18, r20
 d26:	25 2b       	or	r18, r21
 d28:	21 f4       	brne	.+8      	; 0xd32 <__fp_cmp+0x3e>
 d2a:	08 95       	ret
 d2c:	0a 26       	eor	r0, r26
 d2e:	09 f4       	brne	.+2      	; 0xd32 <__fp_cmp+0x3e>
 d30:	a1 40       	sbci	r26, 0x01	; 1
 d32:	a6 95       	lsr	r26
 d34:	8f ef       	ldi	r24, 0xFF	; 255
 d36:	81 1d       	adc	r24, r1
 d38:	81 1d       	adc	r24, r1
 d3a:	08 95       	ret

00000d3c <__fp_inf>:
 d3c:	97 f9       	bld	r25, 7
 d3e:	9f 67       	ori	r25, 0x7F	; 127
 d40:	80 e8       	ldi	r24, 0x80	; 128
 d42:	70 e0       	ldi	r23, 0x00	; 0
 d44:	60 e0       	ldi	r22, 0x00	; 0
 d46:	08 95       	ret

00000d48 <__fp_nan>:
 d48:	9f ef       	ldi	r25, 0xFF	; 255
 d4a:	80 ec       	ldi	r24, 0xC0	; 192
 d4c:	08 95       	ret

00000d4e <__fp_pscA>:
 d4e:	00 24       	eor	r0, r0
 d50:	0a 94       	dec	r0
 d52:	16 16       	cp	r1, r22
 d54:	17 06       	cpc	r1, r23
 d56:	18 06       	cpc	r1, r24
 d58:	09 06       	cpc	r0, r25
 d5a:	08 95       	ret

00000d5c <__fp_pscB>:
 d5c:	00 24       	eor	r0, r0
 d5e:	0a 94       	dec	r0
 d60:	12 16       	cp	r1, r18
 d62:	13 06       	cpc	r1, r19
 d64:	14 06       	cpc	r1, r20
 d66:	05 06       	cpc	r0, r21
 d68:	08 95       	ret

00000d6a <__fp_round>:
 d6a:	09 2e       	mov	r0, r25
 d6c:	03 94       	inc	r0
 d6e:	00 0c       	add	r0, r0
 d70:	11 f4       	brne	.+4      	; 0xd76 <__fp_round+0xc>
 d72:	88 23       	and	r24, r24
 d74:	52 f0       	brmi	.+20     	; 0xd8a <__fp_round+0x20>
 d76:	bb 0f       	add	r27, r27
 d78:	40 f4       	brcc	.+16     	; 0xd8a <__fp_round+0x20>
 d7a:	bf 2b       	or	r27, r31
 d7c:	11 f4       	brne	.+4      	; 0xd82 <__fp_round+0x18>
 d7e:	60 ff       	sbrs	r22, 0
 d80:	04 c0       	rjmp	.+8      	; 0xd8a <__fp_round+0x20>
 d82:	6f 5f       	subi	r22, 0xFF	; 255
 d84:	7f 4f       	sbci	r23, 0xFF	; 255
 d86:	8f 4f       	sbci	r24, 0xFF	; 255
 d88:	9f 4f       	sbci	r25, 0xFF	; 255
 d8a:	08 95       	ret

00000d8c <__fp_split3>:
 d8c:	57 fd       	sbrc	r21, 7
 d8e:	90 58       	subi	r25, 0x80	; 128
 d90:	44 0f       	add	r20, r20
 d92:	55 1f       	adc	r21, r21
 d94:	59 f0       	breq	.+22     	; 0xdac <__fp_splitA+0x10>
 d96:	5f 3f       	cpi	r21, 0xFF	; 255
 d98:	71 f0       	breq	.+28     	; 0xdb6 <__fp_splitA+0x1a>
 d9a:	47 95       	ror	r20

00000d9c <__fp_splitA>:
 d9c:	88 0f       	add	r24, r24
 d9e:	97 fb       	bst	r25, 7
 da0:	99 1f       	adc	r25, r25
 da2:	61 f0       	breq	.+24     	; 0xdbc <__fp_splitA+0x20>
 da4:	9f 3f       	cpi	r25, 0xFF	; 255
 da6:	79 f0       	breq	.+30     	; 0xdc6 <__fp_splitA+0x2a>
 da8:	87 95       	ror	r24
 daa:	08 95       	ret
 dac:	12 16       	cp	r1, r18
 dae:	13 06       	cpc	r1, r19
 db0:	14 06       	cpc	r1, r20
 db2:	55 1f       	adc	r21, r21
 db4:	f2 cf       	rjmp	.-28     	; 0xd9a <__fp_split3+0xe>
 db6:	46 95       	lsr	r20
 db8:	f1 df       	rcall	.-30     	; 0xd9c <__fp_splitA>
 dba:	08 c0       	rjmp	.+16     	; 0xdcc <__fp_splitA+0x30>
 dbc:	16 16       	cp	r1, r22
 dbe:	17 06       	cpc	r1, r23
 dc0:	18 06       	cpc	r1, r24
 dc2:	99 1f       	adc	r25, r25
 dc4:	f1 cf       	rjmp	.-30     	; 0xda8 <__fp_splitA+0xc>
 dc6:	86 95       	lsr	r24
 dc8:	71 05       	cpc	r23, r1
 dca:	61 05       	cpc	r22, r1
 dcc:	08 94       	sec
 dce:	08 95       	ret

00000dd0 <__fp_zero>:
 dd0:	e8 94       	clt

00000dd2 <__fp_szero>:
 dd2:	bb 27       	eor	r27, r27
 dd4:	66 27       	eor	r22, r22
 dd6:	77 27       	eor	r23, r23
 dd8:	cb 01       	movw	r24, r22
 dda:	97 f9       	bld	r25, 7
 ddc:	08 95       	ret

00000dde <__gesf2>:
 dde:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fp_cmp>
 de2:	08 f4       	brcc	.+2      	; 0xde6 <__gesf2+0x8>
 de4:	8f ef       	ldi	r24, 0xFF	; 255
 de6:	08 95       	ret

00000de8 <__mulsf3>:
 de8:	0e 94 07 07 	call	0xe0e	; 0xe0e <__mulsf3x>
 dec:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__fp_round>
 df0:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__fp_pscA>
 df4:	38 f0       	brcs	.+14     	; 0xe04 <__mulsf3+0x1c>
 df6:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__fp_pscB>
 dfa:	20 f0       	brcs	.+8      	; 0xe04 <__mulsf3+0x1c>
 dfc:	95 23       	and	r25, r21
 dfe:	11 f0       	breq	.+4      	; 0xe04 <__mulsf3+0x1c>
 e00:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__fp_inf>
 e04:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__fp_nan>
 e08:	11 24       	eor	r1, r1
 e0a:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__fp_szero>

00000e0e <__mulsf3x>:
 e0e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__fp_split3>
 e12:	70 f3       	brcs	.-36     	; 0xdf0 <__mulsf3+0x8>

00000e14 <__mulsf3_pse>:
 e14:	95 9f       	mul	r25, r21
 e16:	c1 f3       	breq	.-16     	; 0xe08 <__mulsf3+0x20>
 e18:	95 0f       	add	r25, r21
 e1a:	50 e0       	ldi	r21, 0x00	; 0
 e1c:	55 1f       	adc	r21, r21
 e1e:	62 9f       	mul	r22, r18
 e20:	f0 01       	movw	r30, r0
 e22:	72 9f       	mul	r23, r18
 e24:	bb 27       	eor	r27, r27
 e26:	f0 0d       	add	r31, r0
 e28:	b1 1d       	adc	r27, r1
 e2a:	63 9f       	mul	r22, r19
 e2c:	aa 27       	eor	r26, r26
 e2e:	f0 0d       	add	r31, r0
 e30:	b1 1d       	adc	r27, r1
 e32:	aa 1f       	adc	r26, r26
 e34:	64 9f       	mul	r22, r20
 e36:	66 27       	eor	r22, r22
 e38:	b0 0d       	add	r27, r0
 e3a:	a1 1d       	adc	r26, r1
 e3c:	66 1f       	adc	r22, r22
 e3e:	82 9f       	mul	r24, r18
 e40:	22 27       	eor	r18, r18
 e42:	b0 0d       	add	r27, r0
 e44:	a1 1d       	adc	r26, r1
 e46:	62 1f       	adc	r22, r18
 e48:	73 9f       	mul	r23, r19
 e4a:	b0 0d       	add	r27, r0
 e4c:	a1 1d       	adc	r26, r1
 e4e:	62 1f       	adc	r22, r18
 e50:	83 9f       	mul	r24, r19
 e52:	a0 0d       	add	r26, r0
 e54:	61 1d       	adc	r22, r1
 e56:	22 1f       	adc	r18, r18
 e58:	74 9f       	mul	r23, r20
 e5a:	33 27       	eor	r19, r19
 e5c:	a0 0d       	add	r26, r0
 e5e:	61 1d       	adc	r22, r1
 e60:	23 1f       	adc	r18, r19
 e62:	84 9f       	mul	r24, r20
 e64:	60 0d       	add	r22, r0
 e66:	21 1d       	adc	r18, r1
 e68:	82 2f       	mov	r24, r18
 e6a:	76 2f       	mov	r23, r22
 e6c:	6a 2f       	mov	r22, r26
 e6e:	11 24       	eor	r1, r1
 e70:	9f 57       	subi	r25, 0x7F	; 127
 e72:	50 40       	sbci	r21, 0x00	; 0
 e74:	9a f0       	brmi	.+38     	; 0xe9c <__mulsf3_pse+0x88>
 e76:	f1 f0       	breq	.+60     	; 0xeb4 <__mulsf3_pse+0xa0>
 e78:	88 23       	and	r24, r24
 e7a:	4a f0       	brmi	.+18     	; 0xe8e <__mulsf3_pse+0x7a>
 e7c:	ee 0f       	add	r30, r30
 e7e:	ff 1f       	adc	r31, r31
 e80:	bb 1f       	adc	r27, r27
 e82:	66 1f       	adc	r22, r22
 e84:	77 1f       	adc	r23, r23
 e86:	88 1f       	adc	r24, r24
 e88:	91 50       	subi	r25, 0x01	; 1
 e8a:	50 40       	sbci	r21, 0x00	; 0
 e8c:	a9 f7       	brne	.-22     	; 0xe78 <__mulsf3_pse+0x64>
 e8e:	9e 3f       	cpi	r25, 0xFE	; 254
 e90:	51 05       	cpc	r21, r1
 e92:	80 f0       	brcs	.+32     	; 0xeb4 <__mulsf3_pse+0xa0>
 e94:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__fp_inf>
 e98:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__fp_szero>
 e9c:	5f 3f       	cpi	r21, 0xFF	; 255
 e9e:	e4 f3       	brlt	.-8      	; 0xe98 <__mulsf3_pse+0x84>
 ea0:	98 3e       	cpi	r25, 0xE8	; 232
 ea2:	d4 f3       	brlt	.-12     	; 0xe98 <__mulsf3_pse+0x84>
 ea4:	86 95       	lsr	r24
 ea6:	77 95       	ror	r23
 ea8:	67 95       	ror	r22
 eaa:	b7 95       	ror	r27
 eac:	f7 95       	ror	r31
 eae:	e7 95       	ror	r30
 eb0:	9f 5f       	subi	r25, 0xFF	; 255
 eb2:	c1 f7       	brne	.-16     	; 0xea4 <__mulsf3_pse+0x90>
 eb4:	fe 2b       	or	r31, r30
 eb6:	88 0f       	add	r24, r24
 eb8:	91 1d       	adc	r25, r1
 eba:	96 95       	lsr	r25
 ebc:	87 95       	ror	r24
 ebe:	97 f9       	bld	r25, 7
 ec0:	08 95       	ret

00000ec2 <_exit>:
 ec2:	f8 94       	cli

00000ec4 <__stop_program>:
 ec4:	ff cf       	rjmp	.-2      	; 0xec4 <__stop_program>
